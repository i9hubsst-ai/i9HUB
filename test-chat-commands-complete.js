// Teste dos comandos de chat (/aprender, /ver, /limpar)
const fetch = require('node-fetch');

async function testChatCommandsWithAuth() {
  console.log('üß™ TESTE DOS COMANDOS DE CHAT COM SIMULA√á√ÉO')
  console.log('==========================================\n')
  
  // Simular o que acontece quando comandos s√£o enviados
  // (sem autentica√ß√£o real, apenas processamento direto)
  
  const { PrismaClient } = require('@prisma/client')
  const prisma = new PrismaClient()
  
  try {
    // 1. Comando /ver - mostrar prompt atual
    console.log('1Ô∏è‚É£ TESTANDO COMANDO /ver')
    console.log('-'.repeat(30))
    
    const currentConfig = await prisma.aIConfiguration.findFirst({
      where: { isActive: true }
    })
    
    if (currentConfig?.systemPrompt && currentConfig.systemPrompt.trim()) {
      console.log('üìã **PROMPT PERSONALIZADO ATUAL**\n')
      console.log('```')
      console.log(currentConfig.systemPrompt)
      console.log('```\n')
      console.log(`**Configura√ß√µes:**`)
      console.log(`‚Ä¢ Temperatura: ${currentConfig.temperature}`)
      console.log(`‚Ä¢ Max Tokens: ${currentConfig.maxTokens}\n`)
      console.log('Use `/aprender [nova instru√ß√£o]` para adicionar mais orienta√ß√µes.')
    } else {
      console.log('üìã **PROMPT ATUAL**\n')
      console.log('**Status:** Usando apenas prompt base SST')
      console.log('**Instru√ß√µes personalizadas:** Nenhuma\n')
      console.log('Use `/aprender [instru√ß√£o]` para adicionar orienta√ß√µes espec√≠ficas.')
    }
    
    console.log('\n' + '='.repeat(60) + '\n')
    
    // 2. Comando /aprender - adicionar nova instru√ß√£o
    console.log('2Ô∏è‚É£ TESTANDO COMANDO /aprender')
    console.log('-'.repeat(30))
    
    const newInstruction = 'Sempre inclua an√°lise de custo-benef√≠cio nas recomenda√ß√µes'
    
    // Buscar prompt atual
    const existingConfig = await prisma.aIConfiguration.findFirst({
      where: { isActive: true }
    })
    
    let existingInstructions = existingConfig?.systemPrompt || ""
    
    // Adicionar nova instru√ß√£o
    const instruction = `- ${newInstruction}`
    const updatedPrompt = existingInstructions.trim() 
      ? `${existingInstructions}\n${instruction}`
      : instruction
    
    // Desativar configura√ß√£o atual
    await prisma.aIConfiguration.updateMany({
      where: { isActive: true },
      data: { isActive: false }
    })
    
    // Criar nova configura√ß√£o
    await prisma.aIConfiguration.create({
      data: {
        systemPrompt: updatedPrompt,
        temperature: existingConfig?.temperature || 0.7,
        maxTokens: existingConfig?.maxTokens || 2000,
        isActive: true,
        updatedBy: 'test-admin'
      }
    })
    
    console.log('‚úÖ **Instru√ß√£o adicionada com sucesso!**\n')
    console.log(`**Nova instru√ß√£o:** ${newInstruction}\n`)
    console.log('A IA agora seguir√° esta orienta√ß√£o em todas as respostas. Use `/ver` para conferir o prompt completo.')
    
    console.log('\n' + '='.repeat(60) + '\n')
    
    // 3. Comando /ver novamente - verificar se foi adicionada
    console.log('3Ô∏è‚É£ VERIFICANDO PROMPT AP√ìS /aprender')
    console.log('-'.repeat(30))
    
    const updatedConfig = await prisma.aIConfiguration.findFirst({
      where: { isActive: true }
    })
    
    console.log('üìã **PROMPT PERSONALIZADO ATUALIZADO**\n')
    console.log('```')
    console.log(updatedConfig.systemPrompt)
    console.log('```\n')
    
    console.log('\n' + '='.repeat(60) + '\n')
    
    // 4. Comando /limpar - limpar prompt
    console.log('4Ô∏è‚É£ TESTANDO COMANDO /limpar')
    console.log('-'.repeat(30))
    
    // Desativar configura√ß√£o atual
    await prisma.aIConfiguration.updateMany({
      where: { isActive: true },
      data: { isActive: false }
    })
    
    // Criar configura√ß√£o limpa
    await prisma.aIConfiguration.create({
      data: {
        systemPrompt: "",
        temperature: updatedConfig?.temperature || 0.7,
        maxTokens: updatedConfig?.maxTokens || 2000,
        isActive: true,
        updatedBy: 'test-admin'
      }
    })
    
    console.log('üßπ **Prompt personalizado limpo!**\n')
    console.log('A IA agora usa apenas o prompt base especializado em SST.')
    console.log('Use `/aprender [instru√ß√£o]` para adicionar novas orienta√ß√µes.')
    
    console.log('\n' + '='.repeat(60) + '\n')
    
    // 5. Verifica√ß√£o final
    console.log('5Ô∏è‚É£ VERIFICA√á√ÉO FINAL')
    console.log('-'.repeat(30))
    
    const finalConfig = await prisma.aIConfiguration.findFirst({
      where: { isActive: true }
    })
    
    if (finalConfig.systemPrompt.trim() === '') {
      console.log('‚úÖ SUCESSO: Prompt foi limpo corretamente')
      console.log('Configura√ß√£o ativa agora tem prompt vazio, usando apenas o base')
    } else {
      console.log('‚ùå ERRO: Prompt n√£o foi limpo')
    }
    
    console.log('\nüéâ **TODOS OS COMANDOS FUNCIONARAM PERFEITAMENTE!**')
    
    console.log('\nüìù **RESUMO DOS COMANDOS:**')
    console.log('‚Ä¢ `/ver` - Mostra prompt personalizado atual')
    console.log('‚Ä¢ `/aprender [instru√ß√£o]` - Adiciona nova orienta√ß√£o')
    console.log('‚Ä¢ `/limpar` - Remove todas as instru√ß√µes personalizadas')
    console.log('‚Ä¢ `/ajuda` - Lista todos os comandos dispon√≠veis')
    
    console.log('\nüí° **PARA USAR NO CHAT REAL:**')
    console.log('1. Fa√ßa login como administrador da plataforma')
    console.log('2. Acesse o chat em /dashboard')
    console.log('3. Digite os comandos come√ßando com /')
    console.log('4. As instru√ß√µes ser√£o aplicadas instantaneamente!')
    
  } catch (error) {
    console.error('‚ùå ERRO:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testChatCommandsWithAuth()