// Script para testar upload de documentos
const fs = require('fs')

console.log('üß™ TESTE DE UPLOAD DE DOCUMENTOS')
console.log('=================================')

const testDocumentUpload = async () => {
  try {
    console.log('\nüìÑ Criando arquivo de teste...')
    
    // Criar um arquivo de texto simples para teste
    const testContent = `Norma Regulamentadora NR-12 - SEGURAN√áA NO TRABALHO EM M√ÅQUINAS E EQUIPAMENTOS

12.1 Esta Norma Regulamentadora e seus anexos definem refer√™ncias t√©cnicas, princ√≠pios fundamentais e medidas de prote√ß√£o para garantir a sa√∫de e a integridade f√≠sica dos trabalhadores e estabelece requisitos m√≠nimos para a preven√ß√£o de acidentes e doen√ßas do trabalho nas fases de projeto e de utiliza√ß√£o de m√°quinas e equipamentos de todos os tipos, e ainda √† sua fabrica√ß√£o, importa√ß√£o, comercializa√ß√£o, exposi√ß√£o e cess√£o a qualquer t√≠tulo, em todas as atividades econ√¥micas, sem preju√≠zo da observ√¢ncia do disposto nas demais Normas Regulamentadoras aprovadas pela Portaria MTb n.¬∫ 3.214, de 8 de junho de 1978, nas normas t√©cnicas oficiais e, na aus√™ncia ou omiss√£o dessas, nas normas internacionais aplic√°veis.

12.2 Esta Norma Regulamentadora n√£o se aplica a:
a) m√°quinas e equipamentos movidos a for√ßa humana ou animal;
b) m√°quinas e equipamentos que possuam norma regulamentadora espec√≠fica no Minist√©rio do Trabalho e Emprego.

Teste de documento para upload na base de conhecimento.`
    
    const fileName = 'test-nr12.txt'
    fs.writeFileSync(fileName, testContent)
    console.log('‚úÖ Arquivo de teste criado:', fileName)
    
    console.log('\nüöÄ Fazendo upload via API...')
    
    // Criar FormData para o upload
    const FormData = require('form-data')
    const formData = new FormData()
    
    const fileBuffer = fs.readFileSync(fileName)
    formData.append('documents', fileBuffer, {
      filename: fileName,
      contentType: 'text/plain'
    })
    
    // Fazer requisi√ß√£o de upload
    const fetch = (await import('node-fetch')).default
    const response = await fetch('https://i9hubsst.vercel.app/api/ai/documents', {
      method: 'POST',
      body: formData,
      headers: {
        ...formData.getHeaders()
      }
    })
    
    console.log('üìÑ Status da resposta:', response.status)
    
    if (!response.ok) {
      const errorText = await response.text()
      console.log('‚ùå Erro na resposta:', errorText)
      throw new Error(`Upload falhou: ${response.status} - ${errorText}`)
    }
    
    const result = await response.json()
    console.log('‚úÖ UPLOAD BEM-SUCEDIDO!')
    console.log('üìä Resultado:', JSON.stringify(result, null, 2))
    
    console.log('\nüîç DETALHES:')
    console.log(`- Arquivos enviados: ${result.total}`)
    console.log(`- Uploads bem-sucedidos: ${result.uploaded}`)
    
    if (result.results) {
      result.results.forEach((file, index) => {
        console.log(`  ${index + 1}. ${file.filename}: ${file.status}`)
        if (file.error) {
          console.log(`     Erro: ${file.error}`)
        }
      })
    }
    
    // Limpar arquivo de teste
    fs.unlinkSync(fileName)
    console.log('üßπ Arquivo de teste removido')
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message)
    console.log('\nüîç DIAGN√ìSTICO:')
    console.log('- Verifique se o servidor est√° rodando (npm run dev)')
    console.log('- Confirme se voc√™ tem privil√©gios de admin')
    console.log('- Verifique se a tabela KnowledgeDocument existe no banco')
    console.log('- Confirme se o diret√≥rio uploads/knowledge existe')
    
    // Tentar limpar arquivo se existir
    try {
      if (fs.existsSync('test-nr12.txt')) {
        fs.unlinkSync('test-nr12.txt')
        console.log('üßπ Arquivo de teste removido ap√≥s erro')
      }
    } catch (cleanupError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel remover arquivo de teste')
    }
  }
}

// Instalar depend√™ncias se necess√°rio
try {
  require('form-data')
} catch (error) {
  console.log('‚ùå form-data n√£o instalado. Instalando...')
  require('child_process').execSync('npm install form-data', { stdio: 'inherit' })
}

try {
  require('node-fetch')
} catch (error) {
  console.log('‚ùå node-fetch n√£o instalado. Instalando...')
  require('child_process').execSync('npm install node-fetch@2', { stdio: 'inherit' })
}

// Executar teste
testDocumentUpload()