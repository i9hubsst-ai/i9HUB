// Teste real da API: fazer pergunta sobre o nome para verificar se MA.IA responde
const fetch = require('node-fetch');

async function testMAIANameInChat() {
  console.log('ü§ñ TESTE REAL: PERGUNTANDO O NOME PARA A IA')
  console.log('===========================================\n')
  
  const baseUrl = 'http://localhost:3000'
  
  try {
    console.log('üìû Fazendo pergunta para a IA: "Qual √© o seu nome?"...\n')
    
    const response = await fetch(`${baseUrl}/api/ai/chat`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        messages: [
          { role: 'user', content: 'Qual √© o seu nome?' }
        ]
      })
    })
    
    if (response.ok) {
      console.log('‚úÖ Resposta recebida com sucesso!')
      console.log('üìÑ Status:', response.status)
      
      // Como √© um stream, vamos ler o texto
      const responseText = await response.text()
      
      console.log('\nü§ñ RESPOSTA DA IA:')
      console.log('=' * 40)
      console.log(responseText)
      console.log('=' * 40)
      
      // Verificar se a resposta cont√©m "MA.IA"
      if (responseText.includes('MA.IA') || responseText.includes('ma.ia') || responseText.includes('Maia')) {
        console.log('\n‚úÖ SUCESSO! A IA mencionou o nome MA.IA na resposta!')
        console.log('üéØ O sistema de prompt personalizado est√° funcionando perfeitamente!')
      } else {
        console.log('\n‚ùå PROBLEMA: A IA n√£o mencionou o nome MA.IA')
        console.log('üí° Poss√≠veis causas:')
        console.log('   1. A instru√ß√£o pode n√£o estar sendo aplicada')
        console.log('   2. A IA pode estar ignorando a instru√ß√£o')
        console.log('   3. Pode haver um problema no prompt final')
      }
      
      // Verificar se menciona SST (para confirmar que o prompt base tamb√©m funciona)
      if (responseText.toLowerCase().includes('sst') || 
          responseText.toLowerCase().includes('seguran√ßa') || 
          responseText.toLowerCase().includes('trabalho')) {
        console.log('‚úÖ BONUS: A IA tamb√©m manteve o contexto de SST!')
      }
      
    } else {
      console.log('‚ùå Erro na requisi√ß√£o:', response.status, response.statusText)
      const errorText = await response.text()
      console.log('Detalhes do erro:', errorText)
    }
    
  } catch (error) {
    console.error('‚ùå ERRO na requisi√ß√£o:', error.message)
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° SOLU√á√ÉO: O servidor n√£o est√° rodando!')
      console.log('Execute: npm run dev')
      console.log('Ent√£o execute este teste novamente.')
    }
  }
}

// Pequena pausa para garantir que o servidor est√° pronto, depois executa
console.log('‚è±Ô∏è Aguardando 2 segundos para garantir que o servidor est√° pronto...')
setTimeout(testMAIANameInChat, 2000)