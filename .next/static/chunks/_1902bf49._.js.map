{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACZ,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,4JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACjB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACvB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,YAAY,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACnB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n        \"icon-sm\": \"size-8\",\n        \"icon-lg\": \"size-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,IAAA,0KAAG,EACxB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,WAAW;YACX,WAAW;QACb;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,KASb;QATa,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF,GATa;IAUd,MAAM,OAAO,UAAU,2KAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,IAAA,qHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf;KAnBS","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAEA;;;AAEA,SAAS,MAAM,KAA4D;QAA5D,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC,GAA5D;IACb,qBACE,6LAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,8bACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,KAGoC;QAHpC,EACb,SAAS,EACT,GAAG,OAC8C,GAHpC;IAIb,qBACE,6LAAC,4KAAmB;QAClB,aAAU;QACV,WAAW,IAAA,qHAAE,EACX,uNACA;QAED,GAAG,KAAK;;;;;;AAGf;KAdS","debugId":null}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  align = \"center\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        align={align}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/assessments.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, getUserRole, isPlatformAdmin } from '@/lib/auth'\nimport { AssessmentStatus } from '@prisma/client'\n\nexport async function createAssessment(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const role = await getUserRole(user.id, companyId)\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n    return { error: 'Sem permissão para criar diagnósticos' }\n  }\n\n  const title = formData.get('title') as string\n  const description = formData.get('description') as string\n  const templateId = formData.get('templateId') as string | null\n\n  if (!title) {\n    return { error: 'Título é obrigatório' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.create({\n      data: {\n        companyId,\n        createdBy: user.id,\n        title,\n        description,\n        templateId: templateId || undefined,\n        status: 'DRAFT',\n      }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    redirect(`/dashboard/diagnostics/${assessment.id}`)\n  } catch (error) {\n    console.error('Erro ao criar diagnóstico:', error)\n    return { error: 'Erro ao criar diagnóstico' }\n  }\n}\n\nexport async function getAssessments(companyId?: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n    let assessments\n\n    if (isAdmin) {\n      assessments = await prisma.assessment.findMany({\n        where: companyId ? { companyId } : undefined,\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = memberships.map(m => m.companyId)\n\n      if (companyId && !companyIds.includes(companyId)) {\n        return { error: 'Sem permissão para acessar diagnósticos desta empresa' }\n      }\n\n      assessments = await prisma.assessment.findMany({\n        where: {\n          companyId: companyId ? companyId : { in: companyIds }\n        },\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    return { success: true, assessments }\n  } catch (error) {\n    console.error('Erro ao buscar diagnósticos:', error)\n    return { error: 'Erro ao buscar diagnósticos' }\n  }\n}\n\nexport async function getAssessmentById(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        company: true,\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: true\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true\n          }\n        },\n        scores: true,\n        findings: true,\n        evidences: true,\n        actionPlans: true,\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    return { success: true, assessment }\n  } catch (error) {\n    console.error('Erro ao buscar diagnóstico:', error)\n    return { error: 'Erro ao buscar diagnóstico' }\n  }\n}\n\nexport async function getTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: {\n        status: 'PUBLISHED'\n      },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: {\n                active: true,\n                approved: true\n              },\n              orderBy: {\n                createdAt: 'asc'\n              }\n            }\n          },\n          orderBy: {\n            order: 'asc'\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function saveAnswer(\n  assessmentId: string, \n  questionId: string, \n  value: number,\n  justification?: string,\n  evidenceUrls?: string[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    if (assessment.status === 'COMPLETED') {\n      return { error: 'Este diagnóstico já foi finalizado' }\n    }\n\n    const answer = await prisma.assessmentAnswer.upsert({\n      where: {\n        assessmentId_questionId: {\n          assessmentId,\n          questionId,\n        }\n      },\n      create: {\n        assessmentId,\n        questionId,\n        userId: user.id,\n        value,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      },\n      update: {\n        value,\n        userId: user.id,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      }\n    })\n\n    if (assessment.status === 'DRAFT') {\n      await prisma.assessment.update({\n        where: { id: assessmentId },\n        data: {\n          status: 'IN_PROGRESS',\n          startedAt: new Date(),\n        }\n      })\n    }\n\n    return { success: true, answer }\n  } catch (error) {\n    console.error('Erro ao salvar resposta:', error)\n    return { error: 'Erro ao salvar resposta' }\n  }\n}\n\nexport async function submitAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true\n          }\n        }\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (!assessment.template) {\n      return { error: 'Este diagnóstico não possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para submeter este diagnóstico' }\n    }\n\n    // Calcular scores por seção usando o novo schema\n    const totalQuestions = assessment.template.sections.reduce(\n      (sum, section) => sum + section.questions.length, \n      0\n    )\n    \n    if (assessment.answers.length < totalQuestions) {\n      return { error: `Por favor, responda todas as ${totalQuestions} perguntas antes de finalizar` }\n    }\n\n    const sectionScores: { sectionId: string; rawScore: number; weightedScore: number; level: number }[] = []\n\n    for (const section of assessment.template.sections) {\n      const sectionAnswers = assessment.answers.filter(\n        a => section.questions.some(q => q.id === a.questionId)\n      )\n\n      if (sectionAnswers.length === 0) continue\n\n      // Calcular score ponderado da seção\n      let rawScore = 0\n      let totalWeight = 0\n\n      for (const answer of sectionAnswers) {\n        const question = section.questions.find(q => q.id === answer.questionId)\n        if (!question) continue\n\n        rawScore += answer.value * question.weight\n        totalWeight += question.weight * (question.type === 'BOOLEAN' ? 1 : 5)\n      }\n\n      const weightedScore = totalWeight > 0 ? (rawScore / totalWeight) * 100 : 0\n      const level = Math.min(5, Math.max(1, Math.ceil(weightedScore / 20)))\n\n      sectionScores.push({ sectionId: section.id, rawScore, weightedScore, level })\n\n      await prisma.assessmentScore.upsert({\n        where: {\n          assessmentId_sectionId: {\n            assessmentId,\n            sectionId: section.id,\n          }\n        },\n        create: {\n          assessmentId,\n          sectionId: section.id,\n          rawScore,\n          weightedScore,\n          level,\n        },\n        update: {\n          rawScore,\n          weightedScore,\n          level,\n        }\n      })\n    }\n\n    // Calcular overall score (média ponderada de todas as seções)\n    const overallScore = sectionScores.length > 0 \n      ? sectionScores.reduce((sum, s) => sum + s.weightedScore, 0) / sectionScores.length \n      : 0\n    const overallLevel = Math.min(5, Math.max(1, Math.ceil(overallScore / 20)))\n\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: {\n        status: 'SCORED',\n        submittedAt: new Date(),\n        scoredAt: new Date(),\n        overallScore,\n        overallLevel,\n      }\n    })\n\n    // Gerar achados automaticamente baseados nas respostas não conformes\n    const { generateFindings } = await import('./findings')\n    await generateFindings(assessmentId)\n\n    revalidatePath('/dashboard/diagnostics')\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao submeter diagnóstico:', error)\n    return { error: 'Erro ao submeter diagnóstico' }\n  }\n}\n\nexport async function deleteAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, assessment.companyId)\n\n    if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n      return { error: 'Sem permissão para deletar este diagnóstico' }\n    }\n\n    await prisma.assessment.delete({\n      where: { id: assessmentId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar diagnóstico:', error)\n    return { error: 'Erro ao deletar diagnóstico' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAQsB,mBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 546, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/companies.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role } from '@prisma/client'\n\nexport async function createCompany(formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem criar empresas' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.create({\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao criar empresa:', error)\n    return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n  }\n}\n\nexport async function updateCompany(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Sem permissão para editar esta empresa' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.update({\n      where: { id: companyId },\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao atualizar empresa:', error)\n    return { error: 'Erro ao atualizar empresa' }\n  }\n}\n\nexport async function deleteCompany(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem deletar empresas' }\n  }\n\n  try {\n    await prisma.company.delete({\n      where: { id: companyId }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar empresa:', error)\n    return { error: 'Erro ao deletar empresa' }\n  }\n}\n\nexport async function getCompanies() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let companies\n\n    if (isAdmin) {\n      companies = await prisma.company.findMany({\n        include: {\n          _count: {\n            select: {\n              memberships: true,\n              assessments: true,\n              actionPlans: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        include: {\n          company: {\n            include: {\n              _count: {\n                select: {\n                  memberships: true,\n                  assessments: true,\n                  actionPlans: true,\n                }\n              }\n            }\n          }\n        }\n      })\n\n      companies = memberships.map(m => m.company)\n    }\n\n    return { success: true, companies }\n  } catch (error) {\n    console.error('Erro ao buscar empresas:', error)\n    return { error: 'Erro ao buscar empresas' }\n  }\n}\n\nexport async function getCompanyById(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar esta empresa' }\n  }\n\n  try {\n    const company = await prisma.company.findUnique({\n      where: { id: companyId },\n      include: {\n        memberships: {\n          include: {\n            company: true\n          }\n        },\n        assessments: {\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 5\n        },\n        _count: {\n          select: {\n            memberships: true,\n            assessments: true,\n            actionPlans: true,\n          }\n        }\n      }\n    })\n\n    if (!company) {\n      return { error: 'Empresa não encontrada' }\n    }\n\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao buscar empresa:', error)\n    return { error: 'Erro ao buscar empresa' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAuGsB,eAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 561, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/templates.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\nimport { TemplateStatus } from '@prisma/client'\n\nexport async function getAllTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true },\n              orderBy: { createdAt: 'asc' }\n            }\n          },\n          orderBy: { order: 'asc' }\n        },\n        _count: {\n          select: {\n            sections: true,\n            assessments: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function getTemplateById(templateId: string) {\n  try {\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true },\n              orderBy: { createdAt: 'asc' }\n            }\n          },\n          orderBy: { order: 'asc' }\n        },\n        _count: {\n          select: { assessments: true }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    return { success: true, template }\n  } catch (error) {\n    console.error('Erro ao buscar template:', error)\n    return { error: 'Erro ao buscar template' }\n  }\n}\n\nexport async function updateTemplateStatus(templateId: string, status: TemplateStatus) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem alterar o status de templates' }\n  }\n\n  try {\n    await prisma.diagnosticTemplate.update({\n      where: { id: templateId },\n      data: { status }\n    })\n\n    revalidatePath('/dashboard/templates')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao atualizar status do template:', error)\n    return { error: 'Erro ao atualizar status do template' }\n  }\n}\n\nexport async function deleteTemplate(templateId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem excluir templates' }\n  }\n\n  try {\n    // Verificar se há assessments usando este template\n    const assessmentCount = await prisma.assessment.count({\n      where: { templateId }\n    })\n\n    if (assessmentCount > 0) {\n      return { error: `Não é possível excluir. Existem ${assessmentCount} diagnósticos usando este template.` }\n    }\n\n    await prisma.diagnosticTemplate.delete({\n      where: { id: templateId }\n    })\n\n    revalidatePath('/dashboard/templates')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir template:', error)\n    return { error: 'Erro ao excluir template' }\n  }\n}\n\nexport async function getPublishedTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: { status: 'PUBLISHED' },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        type: true,\n        _count: {\n          select: { sections: true }\n        }\n      },\n      orderBy: { name: 'asc' }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates publicados:', error)\n    return { error: 'Erro ao buscar templates publicados' }\n  }\n}\n\nexport async function publishTemplate(templateId: string) {\n  return updateTemplateStatus(templateId, 'PUBLISHED')\n}\n\nexport async function updateTemplate(\n  templateId: string,\n  data: {\n    name: string\n    description: string\n    sections: Array<{\n      id?: string\n      title: string\n      order: number\n      questions: Array<{\n        id?: string\n        text: string\n        type: string\n        weight: number\n        reference?: string\n        requiresJustification: boolean\n      }>\n    }>\n  }\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem editar templates' }\n  }\n\n  try {\n    // Verificar se template existe\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: { questions: true }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    // Atualizar template e suas seções/perguntas\n    await prisma.$transaction(async (tx) => {\n      // Atualizar informações básicas do template\n      await tx.diagnosticTemplate.update({\n        where: { id: templateId },\n        data: {\n          name: data.name,\n          description: data.description\n        }\n      })\n\n      // IDs de seções e perguntas que devem ser mantidos\n      const sectionIdsToKeep = data.sections.filter(s => s.id).map(s => s.id!)\n      const questionIdsToKeep = data.sections\n        .flatMap(s => s.questions.filter(q => q.id).map(q => q.id!))\n\n      // Deletar seções que foram removidas\n      await tx.diagnosticSection.deleteMany({\n        where: {\n          templateId,\n          id: { notIn: sectionIdsToKeep }\n        }\n      })\n\n      // Processar cada seção\n      for (const section of data.sections) {\n        if (section.id) {\n          // Atualizar seção existente\n          await tx.diagnosticSection.update({\n            where: { id: section.id },\n            data: {\n              title: section.title,\n              order: section.order\n            }\n          })\n\n          // Deletar perguntas removidas desta seção\n          await tx.diagnosticQuestion.deleteMany({\n            where: {\n              sectionId: section.id,\n              id: { notIn: section.questions.filter(q => q.id).map(q => q.id!) }\n            }\n          })\n\n          // Processar perguntas\n          for (const question of section.questions) {\n            if (question.id) {\n              // Atualizar pergunta existente\n              await tx.diagnosticQuestion.update({\n                where: { id: question.id },\n                data: {\n                  text: question.text,\n                  type: question.type,\n                  weight: question.weight,\n                  reference: question.reference,\n                  requiresJustification: question.requiresJustification\n                }\n              })\n            } else {\n              // Criar nova pergunta\n              await tx.diagnosticQuestion.create({\n                data: {\n                  sectionId: section.id,\n                  text: question.text,\n                  type: question.type,\n                  weight: question.weight,\n                  reference: question.reference,\n                  requiresJustification: question.requiresJustification\n                }\n              })\n            }\n          }\n        } else {\n          // Criar nova seção com suas perguntas\n          await tx.diagnosticSection.create({\n            data: {\n              templateId,\n              title: section.title,\n              order: section.order,\n              questions: {\n                create: section.questions.map(q => ({\n                  text: q.text,\n                  type: q.type,\n                  weight: q.weight,\n                  reference: q.reference,\n                  requiresJustification: q.requiresJustification\n                }))\n              }\n            }\n          })\n        }\n      }\n    })\n\n    revalidatePath('/dashboard/templates')\n    revalidatePath(`/dashboard/templates/${templateId}`)\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao atualizar template:', error)\n    return { error: 'Erro ao atualizar template' }\n  }\n}\n\nexport async function applyTemplateToAssessment(assessmentId: string, templateId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o assessment existe e se o usuário tem permissão\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true, status: true, templateId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.status !== 'DRAFT') {\n      return { error: 'Só é possível aplicar template em diagnósticos com status DRAFT' }\n    }\n\n    if (assessment.templateId) {\n      return { error: 'Este diagnóstico já possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para modificar este diagnóstico' }\n    }\n\n    // Buscar o template com seções e perguntas para validação\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true }\n            }\n          }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    if (template.status !== 'PUBLISHED') {\n      return { error: 'Apenas templates publicados podem ser aplicados' }\n    }\n\n    // Associar o template ao assessment\n    // As seções e perguntas já existem no template e serão acessadas via relacionamento\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: { templateId }\n    })\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    return { \n      success: true, \n      sectionsCount: template.sections.length,\n      questionsCount: template.sections.reduce((sum, s) => sum + s.questions.length, 0)\n    }\n  } catch (error) {\n    console.error('Erro ao aplicar template:', error)\n    return { error: 'Erro ao aplicar template ao diagnóstico' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IA8HsB,wBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/new/page.tsx"],"sourcesContent":["'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { ArrowLeft, FileText } from 'lucide-react'\nimport Link from 'next/link'\nimport { createAssessment } from '@/app/actions/assessments'\nimport { getCompanies } from '@/app/actions/companies'\nimport { getPublishedTemplates } from '@/app/actions/templates'\n\nexport default function NewDiagnosticPage() {\n  const [title, setTitle] = useState('')\n  const [description, setDescription] = useState('')\n  const [companyId, setCompanyId] = useState('')\n  const [templateId, setTemplateId] = useState<string>('none')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [companies, setCompanies] = useState<any[]>([])\n  const [templates, setTemplates] = useState<any[]>([])\n\n  useEffect(() => {\n    async function loadData() {\n      const [companiesResult, templatesResult] = await Promise.all([\n        getCompanies(),\n        getPublishedTemplates()\n      ])\n      \n      if (companiesResult.success && companiesResult.companies) {\n        setCompanies(companiesResult.companies)\n        if (companiesResult.companies.length > 0) {\n          setCompanyId(companiesResult.companies[0].id)\n        }\n      }\n\n      if (templatesResult.success && templatesResult.templates) {\n        setTemplates(templatesResult.templates)\n      }\n    }\n    loadData()\n  }, [])\n\n  const handleCreate = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    if (!companyId) {\n      setError('Selecione uma empresa')\n      setLoading(false)\n      return\n    }\n\n    const formData = new FormData()\n    formData.append('title', title)\n    formData.append('description', description)\n    if (templateId && templateId !== 'none') {\n      formData.append('templateId', templateId)\n    }\n\n    try {\n      const result = await createAssessment(companyId, formData)\n      if (result?.error) {\n        setError(result.error)\n      }\n    } catch (err) {\n      setError('Erro ao criar diagnóstico')\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div>\n        <Link \n          href=\"/dashboard/diagnostics\" \n          className=\"inline-flex items-center gap-2 text-muted-foreground hover:text-primary mb-4\"\n        >\n          <ArrowLeft className=\"h-4 w-4\" />\n          Voltar para Diagnósticos\n        </Link>\n        <h1 className=\"text-3xl font-bold text-primary\">Novo Diagnóstico IMSST</h1>\n        <p className=\"text-muted-foreground\">\n          Crie uma nova avaliação de maturidade SST para sua empresa\n        </p>\n      </div>\n\n      <div className=\"max-w-2xl\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Informações do Diagnóstico</CardTitle>\n            <CardDescription>\n              Preencha os dados básicos para iniciar a avaliação\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleCreate} className=\"space-y-6\">\n              {error && (\n                <div className=\"bg-destructive/10 text-destructive px-4 py-3 rounded-lg text-sm\">\n                  {error}\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"company\">Empresa</Label>\n                <Select value={companyId} onValueChange={setCompanyId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Selecione uma empresa\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {companies.map((company) => (\n                      <SelectItem key={company.id} value={company.id}>\n                        {company.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Título do Diagnóstico</Label>\n                <Input\n                  id=\"title\"\n                  placeholder=\"Ex: Diagnóstico Q1 2025\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  required\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Escolha um nome que ajude a identificar este diagnóstico\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Descrição (opcional)</Label>\n                <textarea\n                  id=\"description\"\n                  className=\"w-full min-h-[100px] px-3 py-2 rounded-lg border border-input bg-background focus:outline-none focus:ring-2 focus:ring-ring\"\n                  placeholder=\"Informações adicionais sobre este diagnóstico...\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"template\">Template (opcional)</Label>\n                <Select value={templateId} onValueChange={setTemplateId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Sem template - criar diagnóstico vazio\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"none\">Sem template</SelectItem>\n                    {templates.map((template) => (\n                      <SelectItem key={template.id} value={template.id}>\n                        <div className=\"flex items-center gap-2\">\n                          <FileText className=\"h-4 w-4\" />\n                          <span>{template.name}</span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            ({template._count.sections} seções)\n                          </span>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <p className=\"text-sm text-muted-foreground\">\n                  {templateId && templateId !== 'none'\n                    ? 'Template será aplicado automaticamente com todas as seções e perguntas'\n                    : 'Você poderá criar seções e perguntas manualmente'}\n                </p>\n              </div>\n\n              <div className=\"bg-accent/10 p-4 rounded-lg\">\n                <h3 className=\"font-semibold mb-2\">O que acontece a seguir?</h3>\n                <ol className=\"text-sm text-muted-foreground space-y-1 list-decimal list-inside\">\n                  <li>Você responderá 25 perguntas divididas em 5 dimensões</li>\n                  <li>O sistema calculará automaticamente seu nível de maturidade (1-5)</li>\n                  <li>Você poderá gerar relatórios em PDF com os resultados</li>\n                  <li>Planos de ação podem ser criados baseados nas respostas</li>\n                </ol>\n              </div>\n\n              <div className=\"flex gap-4\">\n                <Button type=\"submit\" disabled={loading || !title || !companyId}>\n                  {loading ? 'Criando...' : 'Criar Diagnóstico'}\n                </Button>\n                <Link href=\"/dashboard/diagnostics\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                  >\n                    Cancelar\n                  </Button>\n                </Link>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}