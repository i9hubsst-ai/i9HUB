{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/assessments.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, getUserRole, isPlatformAdmin } from '@/lib/auth'\nimport { AssessmentStatus } from '@prisma/client'\n\nexport async function createAssessment(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const role = await getUserRole(user.id, companyId)\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n    return { error: 'Sem permissão para criar diagnósticos' }\n  }\n\n  const title = formData.get('title') as string\n  const description = formData.get('description') as string\n\n  if (!title) {\n    return { error: 'Título é obrigatório' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.create({\n      data: {\n        companyId,\n        createdBy: user.id,\n        title,\n        description,\n        status: 'DRAFT',\n      }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    redirect(`/dashboard/diagnostics/${assessment.id}`)\n  } catch (error) {\n    console.error('Erro ao criar diagnóstico:', error)\n    return { error: 'Erro ao criar diagnóstico' }\n  }\n}\n\nexport async function getAssessments(companyId?: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n    let assessments\n\n    if (isAdmin) {\n      assessments = await prisma.assessment.findMany({\n        where: companyId ? { companyId } : undefined,\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = memberships.map(m => m.companyId)\n\n      if (companyId && !companyIds.includes(companyId)) {\n        return { error: 'Sem permissão para acessar diagnósticos desta empresa' }\n      }\n\n      assessments = await prisma.assessment.findMany({\n        where: {\n          companyId: companyId ? companyId : { in: companyIds }\n        },\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    return { success: true, assessments }\n  } catch (error) {\n    console.error('Erro ao buscar diagnósticos:', error)\n    return { error: 'Erro ao buscar diagnósticos' }\n  }\n}\n\nexport async function getAssessmentById(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        company: true,\n        answers: {\n          include: {\n            question: {\n              include: {\n                dimension: true\n              }\n            }\n          }\n        },\n        scores: true,\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    return { success: true, assessment }\n  } catch (error) {\n    console.error('Erro ao buscar diagnóstico:', error)\n    return { error: 'Erro ao buscar diagnóstico' }\n  }\n}\n\nexport async function getQuestions() {\n  try {\n    const dimensions = await prisma.iMSSTDimension.findMany({\n      include: {\n        questions: {\n          orderBy: {\n            order: 'asc'\n          }\n        }\n      },\n      orderBy: {\n        order: 'asc'\n      }\n    })\n\n    return { success: true, dimensions }\n  } catch (error) {\n    console.error('Erro ao buscar perguntas:', error)\n    return { error: 'Erro ao buscar perguntas' }\n  }\n}\n\nexport async function saveAnswer(assessmentId: string, questionId: string, value: number) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    if (assessment.status === 'COMPLETED') {\n      return { error: 'Este diagnóstico já foi finalizado' }\n    }\n\n    const answer = await prisma.assessmentAnswer.upsert({\n      where: {\n        assessmentId_questionId: {\n          assessmentId,\n          questionId,\n        }\n      },\n      create: {\n        assessmentId,\n        questionId,\n        answeredBy: user.id,\n        value,\n      },\n      update: {\n        value,\n        answeredBy: user.id,\n      }\n    })\n\n    if (assessment.status === 'DRAFT') {\n      await prisma.assessment.update({\n        where: { id: assessmentId },\n        data: {\n          status: 'IN_PROGRESS',\n          startedAt: new Date(),\n        }\n      })\n    }\n\n    return { success: true, answer }\n  } catch (error) {\n    console.error('Erro ao salvar resposta:', error)\n    return { error: 'Erro ao salvar resposta' }\n  }\n}\n\nexport async function submitAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        answers: {\n          include: {\n            question: {\n              include: {\n                dimension: true\n              }\n            }\n          }\n        }\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para submeter este diagnóstico' }\n    }\n\n    const totalQuestions = await prisma.question.count()\n    \n    if (assessment.answers.length < totalQuestions) {\n      return { error: `Por favor, responda todas as ${totalQuestions} perguntas antes de finalizar` }\n    }\n\n    const dimensions = await prisma.iMSSTDimension.findMany({\n      include: {\n        questions: true\n      }\n    })\n\n    for (const dimension of dimensions) {\n      const dimensionAnswers = assessment.answers.filter(\n        a => a.question.dimensionId === dimension.id\n      )\n\n      const sum = dimensionAnswers.reduce((acc, answer) => {\n        const value = typeof answer.value === 'number' ? answer.value : 0\n        return acc + value * answer.question.weight\n      }, 0)\n\n      const maxScore = dimensionAnswers.reduce((acc, answer) => {\n        return acc + (5 * answer.question.weight)\n      }, 0)\n\n      const score = (sum / maxScore) * 100\n      const level = Math.ceil(score / 20)\n\n      await prisma.assessmentScore.upsert({\n        where: {\n          assessmentId_dimensionId: {\n            assessmentId,\n            dimensionId: dimension.id,\n          }\n        },\n        create: {\n          assessmentId,\n          dimensionId: dimension.id,\n          score,\n          level: Math.max(1, Math.min(5, level)),\n        },\n        update: {\n          score,\n          level: Math.max(1, Math.min(5, level)),\n        }\n      })\n    }\n\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: {\n        status: 'COMPLETED',\n        submittedAt: new Date(),\n      }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao submeter diagnóstico:', error)\n    return { error: 'Erro ao submeter diagnóstico' }\n  }\n}\n\nexport async function deleteAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, assessment.companyId)\n\n    if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n      return { error: 'Sem permissão para deletar este diagnóstico' }\n    }\n\n    await prisma.assessment.delete({\n      where: { id: assessmentId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar diagnóstico:', error)\n    return { error: 'Erro ao deletar diagnóstico' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/companies.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role } from '@prisma/client'\n\nexport async function createCompany(formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem criar empresas' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.create({\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao criar empresa:', error)\n    return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n  }\n}\n\nexport async function updateCompany(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Sem permissão para editar esta empresa' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.update({\n      where: { id: companyId },\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao atualizar empresa:', error)\n    return { error: 'Erro ao atualizar empresa' }\n  }\n}\n\nexport async function deleteCompany(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem deletar empresas' }\n  }\n\n  try {\n    await prisma.company.delete({\n      where: { id: companyId }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar empresa:', error)\n    return { error: 'Erro ao deletar empresa' }\n  }\n}\n\nexport async function getCompanies() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let companies\n\n    if (isAdmin) {\n      companies = await prisma.company.findMany({\n        include: {\n          _count: {\n            select: {\n              memberships: true,\n              assessments: true,\n              actionPlans: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        include: {\n          company: {\n            include: {\n              _count: {\n                select: {\n                  memberships: true,\n                  assessments: true,\n                  actionPlans: true,\n                }\n              }\n            }\n          }\n        }\n      })\n\n      companies = memberships.map(m => m.company)\n    }\n\n    return { success: true, companies }\n  } catch (error) {\n    console.error('Erro ao buscar empresas:', error)\n    return { error: 'Erro ao buscar empresas' }\n  }\n}\n\nexport async function getCompanyById(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar esta empresa' }\n  }\n\n  try {\n    const company = await prisma.company.findUnique({\n      where: { id: companyId },\n      include: {\n        memberships: {\n          include: {\n            company: true\n          }\n        },\n        assessments: {\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 5\n        },\n        _count: {\n          select: {\n            memberships: true,\n            assessments: true,\n            actionPlans: true,\n          }\n        }\n      }\n    })\n\n    if (!company) {\n      return { error: 'Empresa não encontrada' }\n    }\n\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao buscar empresa:', error)\n    return { error: 'Erro ao buscar empresa' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 742, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/diagnostics/new/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '000a7265372b70878088ed09036d1fd3e0864a1df5'} from 'ACTIONS_MODULE0'\nexport {signup as '401ec2d89585c019b90d74120d11e9c2dbf1af1441'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '406cf3c73ab9c2d0f07b7a7beb2c6e7c1c5c21b032'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '4084f6da2e1e7018c733313cf2901c8a22980453eb'} from 'ACTIONS_MODULE0'\nexport {login as '40faa7564ac777eb597397a532a6abe6fd7a5709ff'} from 'ACTIONS_MODULE0'\nexport {createAssessment as '60f594f95f2d543505b6b87cc3f45f0da439b77d90'} from 'ACTIONS_MODULE1'\nexport {getCompanies as '00fdebc57c98a02f7153921e98f722c5ca22e3fbe3'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AAKA;AACA","debugId":null}},
    {"offset": {"line": 793, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/new/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/diagnostics/new/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/diagnostics/new/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/new/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/diagnostics/new/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/diagnostics/new/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 821, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}