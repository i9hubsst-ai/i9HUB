{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // Server Component context\n          }\n        },\n      },\n    }\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,0IAAO;IAEjC,OAAO,IAAA,+LAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,2BAA2B;gBAC7B;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAS;KAAO,GAAG;AACpE;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/auth.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { createClient } from '@/lib/supabase/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function login(formData: FormData) {\n  const supabase = await createClient()\n\n  const data = {\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  }\n\n  const { error } = await supabase.auth.signInWithPassword(data)\n\n  if (error) {\n    return { error: error.message }\n  }\n\n  revalidatePath('/dashboard', 'layout')\n  redirect('/dashboard')\n}\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient()\n\n  const data = {\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n    options: {\n      data: {\n        name: formData.get('name') as string,\n      },\n      emailRedirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n    }\n  }\n\n  const { data: authData, error } = await supabase.auth.signUp(data)\n\n  if (error) {\n    return { error: error.message }\n  }\n\n  if (authData.user) {\n    const companyName = formData.get('companyName') as string\n    const companyCnpj = formData.get('companyCnpj') as string\n\n    if (companyName && companyCnpj) {\n      try {\n        const company = await prisma.company.create({\n          data: {\n            name: companyName,\n            cnpj: companyCnpj,\n          }\n        })\n\n        await prisma.membership.create({\n          data: {\n            userId: authData.user.id,\n            companyId: company.id,\n            role: 'COMPANY_ADMIN',\n            status: 'ACTIVE',\n          }\n        })\n      } catch (err) {\n        console.error('Erro ao criar empresa:', err)\n        return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n      }\n    }\n  }\n\n  revalidatePath('/dashboard', 'layout')\n  redirect('/dashboard')\n}\n\nexport async function logout() {\n  const supabase = await createClient()\n  await supabase.auth.signOut()\n  revalidatePath('/', 'layout')\n  redirect('/auth/login')\n}\n\nexport async function resetPassword(formData: FormData) {\n  const supabase = await createClient()\n  const email = formData.get('email') as string\n\n  const { error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/reset-password`,\n  })\n\n  if (error) {\n    return { error: error.message }\n  }\n\n  return { success: true }\n}\n\nexport async function updatePassword(formData: FormData) {\n  const supabase = await createClient()\n  const password = formData.get('password') as string\n\n  const { error } = await supabase.auth.updateUser({\n    password: password\n  })\n\n  if (error) {\n    return { error: error.message }\n  }\n\n  revalidatePath('/', 'layout')\n  redirect('/dashboard')\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AAAA;AACA;AACA;;;;;;;AAEO,eAAe,MAAM,QAAkB;IAC5C,MAAM,WAAW,MAAM,IAAA,yIAAY;IAEnC,MAAM,OAAO;QACX,OAAO,SAAS,GAAG,CAAC;QACpB,UAAU,SAAS,GAAG,CAAC;IACzB;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;IAEzD,IAAI,OAAO;QACT,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAChC;IAEA,IAAA,+IAAc,EAAC,cAAc;IAC7B,IAAA,iMAAQ,EAAC;AACX;AAEO,eAAe,OAAO,QAAkB;IAC7C,MAAM,WAAW,MAAM,IAAA,yIAAY;IAEnC,MAAM,OAAO;QACX,OAAO,SAAS,GAAG,CAAC;QACpB,UAAU,SAAS,GAAG,CAAC;QACvB,SAAS;YACP,MAAM;gBACJ,MAAM,SAAS,GAAG,CAAC;YACrB;YACA,iBAAiB,sHAAoC,cAAc,CAAC;QACtE;IACF;IAEA,MAAM,EAAE,MAAM,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;IAE7D,IAAI,OAAO;QACT,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAChC;IAEA,IAAI,SAAS,IAAI,EAAE;QACjB,MAAM,cAAc,SAAS,GAAG,CAAC;QACjC,MAAM,cAAc,SAAS,GAAG,CAAC;QAEjC,IAAI,eAAe,aAAa;YAC9B,IAAI;gBACF,MAAM,UAAU,MAAM,uHAAM,CAAC,OAAO,CAAC,MAAM,CAAC;oBAC1C,MAAM;wBACJ,MAAM;wBACN,MAAM;oBACR;gBACF;gBAEA,MAAM,uHAAM,CAAC,UAAU,CAAC,MAAM,CAAC;oBAC7B,MAAM;wBACJ,QAAQ,SAAS,IAAI,CAAC,EAAE;wBACxB,WAAW,QAAQ,EAAE;wBACrB,MAAM;wBACN,QAAQ;oBACV;gBACF;YACF,EAAE,OAAO,KAAK;gBACZ,QAAQ,KAAK,CAAC,0BAA0B;gBACxC,OAAO;oBAAE,OAAO;gBAAqE;YACvF;QACF;IACF;IAEA,IAAA,+IAAc,EAAC,cAAc;IAC7B,IAAA,iMAAQ,EAAC;AACX;AAEO,eAAe;IACpB,MAAM,WAAW,MAAM,IAAA,yIAAY;IACnC,MAAM,SAAS,IAAI,CAAC,OAAO;IAC3B,IAAA,+IAAc,EAAC,KAAK;IACpB,IAAA,iMAAQ,EAAC;AACX;AAEO,eAAe,cAAc,QAAkB;IACpD,MAAM,WAAW,MAAM,IAAA,yIAAY;IACnC,MAAM,QAAQ,SAAS,GAAG,CAAC;IAE3B,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,qBAAqB,CAAC,OAAO;QACjE,YAAY,sHAAoC,oBAAoB,CAAC;IACvE;IAEA,IAAI,OAAO;QACT,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAChC;IAEA,OAAO;QAAE,SAAS;IAAK;AACzB;AAEO,eAAe,eAAe,QAAkB;IACrD,MAAM,WAAW,MAAM,IAAA,yIAAY;IACnC,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU,CAAC;QAC/C,UAAU;IACZ;IAEA,IAAI,OAAO;QACT,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAChC;IAEA,IAAA,+IAAc,EAAC,KAAK;IACpB,IAAA,iMAAQ,EAAC;AACX;;;IA1GsB;IAkBA;IAoDA;IAOA;IAeA;;AA5FA,+OAAA;AAkBA,+OAAA;AAoDA,+OAAA;AAOA,+OAAA;AAeA,+OAAA","debugId":null}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/auth/login/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {login as '407cc9c953561b157cdc32d732b174c9b3729f8bc7'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/auth/login/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/auth/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA2R,GACxT,yDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/auth/login/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/auth/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/auth/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAuQ,GACpS,qCACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 286, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}