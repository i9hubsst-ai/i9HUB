{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/employees.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport type { Gender, MaritalStatus, ContractType, MembershipStatus } from '@prisma/client'\n\nexport type EmployeeFormData = {\n  companyId: string\n  fullName: string\n  cpf: string\n  birthDate: string\n  gender?: Gender\n  maritalStatus?: MaritalStatus\n  nationality?: string\n  email: string\n  phone?: string\n  emergencyContactName?: string\n  emergencyContactPhone?: string\n  employeeNumber: string\n  admissionDate: string\n  contractType: ContractType\n  workSchedule?: string\n  unit?: string\n  department?: string\n  position: string\n  cboCode?: string\n  supervisor?: string\n  status?: MembershipStatus\n}\n\nexport async function createEmployee(data: EmployeeFormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, data.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para cadastrar funcionários' }\n    }\n\n    const employee = await prisma.employee.create({\n      data: {\n        companyId: data.companyId,\n        fullName: data.fullName,\n        cpf: data.cpf.replace(/\\D/g, ''),\n        birthDate: new Date(data.birthDate),\n        gender: data.gender,\n        maritalStatus: data.maritalStatus,\n        nationality: data.nationality || 'Brasileira',\n        email: data.email,\n        phone: data.phone,\n        emergencyContactName: data.emergencyContactName,\n        emergencyContactPhone: data.emergencyContactPhone,\n        employeeNumber: data.employeeNumber,\n        admissionDate: new Date(data.admissionDate),\n        contractType: data.contractType,\n        workSchedule: data.workSchedule,\n        unit: data.unit,\n        department: data.department,\n        position: data.position,\n        cboCode: data.cboCode,\n        supervisor: data.supervisor,\n        status: data.status || 'ACTIVE',\n      },\n    })\n\n    revalidatePath('/dashboard/employees')\n    revalidatePath(`/dashboard/companies/${data.companyId}`)\n    return { success: true, employee }\n  } catch (error: any) {\n    console.error('Erro ao criar funcionário:', error)\n    \n    if (error.code === 'P2002') {\n      if (error.meta?.target?.includes('cpf')) {\n        return { error: 'CPF já cadastrado nesta empresa' }\n      }\n      if (error.meta?.target?.includes('employeeNumber')) {\n        return { error: 'Matrícula já cadastrada nesta empresa' }\n      }\n    }\n    \n    return { error: 'Erro ao cadastrar funcionário' }\n  }\n}\n\nexport async function updateEmployee(id: string, data: EmployeeFormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const employee = await prisma.employee.findUnique({\n      where: { id },\n    })\n\n    if (!employee) {\n      return { error: 'Funcionário não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, employee.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para editar funcionários' }\n    }\n\n    const updated = await prisma.employee.update({\n      where: { id },\n      data: {\n        fullName: data.fullName,\n        cpf: data.cpf.replace(/\\D/g, ''),\n        birthDate: new Date(data.birthDate),\n        gender: data.gender,\n        maritalStatus: data.maritalStatus,\n        nationality: data.nationality || 'Brasileira',\n        email: data.email,\n        phone: data.phone,\n        emergencyContactName: data.emergencyContactName,\n        emergencyContactPhone: data.emergencyContactPhone,\n        employeeNumber: data.employeeNumber,\n        admissionDate: new Date(data.admissionDate),\n        contractType: data.contractType,\n        workSchedule: data.workSchedule,\n        unit: data.unit,\n        department: data.department,\n        position: data.position,\n        cboCode: data.cboCode,\n        supervisor: data.supervisor,\n        status: data.status || 'ACTIVE',\n      },\n    })\n\n    revalidatePath('/dashboard/employees')\n    revalidatePath(`/dashboard/companies/${employee.companyId}`)\n    return { success: true, employee: updated }\n  } catch (error: any) {\n    console.error('Erro ao atualizar funcionário:', error)\n    \n    if (error.code === 'P2002') {\n      if (error.meta?.target?.includes('cpf')) {\n        return { error: 'CPF já cadastrado nesta empresa' }\n      }\n      if (error.meta?.target?.includes('employeeNumber')) {\n        return { error: 'Matrícula já cadastrada nesta empresa' }\n      }\n    }\n    \n    return { error: 'Erro ao atualizar funcionário' }\n  }\n}\n\nexport async function deleteEmployee(id: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const employee = await prisma.employee.findUnique({\n      where: { id },\n    })\n\n    if (!employee) {\n      return { error: 'Funcionário não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, employee.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para excluir funcionários' }\n    }\n\n    await prisma.employee.delete({\n      where: { id },\n    })\n\n    revalidatePath('/dashboard/employees')\n    revalidatePath(`/dashboard/companies/${employee.companyId}`)\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir funcionário:', error)\n    return { error: 'Erro ao excluir funcionário' }\n  }\n}\n\nexport async function getEmployees(companyId?: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado', employees: [] }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n\n    let employees\n\n    if (isAdmin && !companyId) {\n      employees = await prisma.employee.findMany({\n        include: {\n          company: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n        orderBy: {\n          fullName: 'asc',\n        },\n      })\n    } else if (companyId) {\n      const role = await getUserRole(user.id, companyId)\n      if (!isAdmin && !role) {\n        return { error: 'Sem permissão para visualizar funcionários', employees: [] }\n      }\n\n      employees = await prisma.employee.findMany({\n        where: {\n          companyId,\n        },\n        include: {\n          company: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n        orderBy: {\n          fullName: 'asc',\n        },\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE',\n        },\n        select: {\n          companyId: true,\n        },\n      })\n\n      const companyIds = memberships.map(m => m.companyId)\n\n      employees = await prisma.employee.findMany({\n        where: {\n          companyId: {\n            in: companyIds,\n          },\n        },\n        include: {\n          company: {\n            select: {\n              id: true,\n              name: true,\n            },\n          },\n        },\n        orderBy: {\n          fullName: 'asc',\n        },\n      })\n    }\n\n    return { employees }\n  } catch (error) {\n    console.error('Erro ao buscar funcionários:', error)\n    return { error: 'Erro ao buscar funcionários', employees: [] }\n  }\n}\n\nexport async function getEmployeeById(id: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado', employee: null }\n  }\n\n  try {\n    const employee = await prisma.employee.findUnique({\n      where: { id },\n      include: {\n        company: {\n          select: {\n            id: true,\n            name: true,\n          },\n        },\n      },\n    })\n\n    if (!employee) {\n      return { error: 'Funcionário não encontrado', employee: null }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, employee.companyId)\n\n    if (!isAdmin && !role) {\n      return { error: 'Sem permissão para visualizar este funcionário', employee: null }\n    }\n\n    return { employee }\n  } catch (error) {\n    console.error('Erro ao buscar funcionário:', error)\n    return { error: 'Erro ao buscar funcionário', employee: null }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/companies.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role } from '@prisma/client'\n\nexport async function createCompany(formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem criar empresas' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.create({\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao criar empresa:', error)\n    return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n  }\n}\n\nexport async function updateCompany(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Sem permissão para editar esta empresa' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.update({\n      where: { id: companyId },\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao atualizar empresa:', error)\n    return { error: 'Erro ao atualizar empresa' }\n  }\n}\n\nexport async function deleteCompany(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem deletar empresas' }\n  }\n\n  try {\n    await prisma.company.delete({\n      where: { id: companyId }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar empresa:', error)\n    return { error: 'Erro ao deletar empresa' }\n  }\n}\n\nexport async function getCompanies() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let companies\n\n    if (isAdmin) {\n      companies = await prisma.company.findMany({\n        include: {\n          _count: {\n            select: {\n              memberships: true,\n              assessments: true,\n              actionPlans: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        include: {\n          company: {\n            include: {\n              _count: {\n                select: {\n                  memberships: true,\n                  assessments: true,\n                  actionPlans: true,\n                }\n              }\n            }\n          }\n        }\n      })\n\n      companies = memberships.map(m => m.company)\n    }\n\n    return { success: true, companies }\n  } catch (error) {\n    console.error('Erro ao buscar empresas:', error)\n    return { error: 'Erro ao buscar empresas' }\n  }\n}\n\nexport async function getCompanyById(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar esta empresa' }\n  }\n\n  try {\n    const company = await prisma.company.findUnique({\n      where: { id: companyId },\n      include: {\n        memberships: {\n          include: {\n            company: true\n          }\n        },\n        assessments: {\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 5\n        },\n        _count: {\n          select: {\n            memberships: true,\n            assessments: true,\n            actionPlans: true,\n          }\n        }\n      }\n    })\n\n    if (!company) {\n      return { error: 'Empresa não encontrada' }\n    }\n\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao buscar empresa:', error)\n    return { error: 'Erro ao buscar empresa' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/employees/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '000a7265372b70878088ed09036d1fd3e0864a1df5'} from 'ACTIONS_MODULE0'\nexport {signup as '401ec2d89585c019b90d74120d11e9c2dbf1af1441'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '406cf3c73ab9c2d0f07b7a7beb2c6e7c1c5c21b032'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '4084f6da2e1e7018c733313cf2901c8a22980453eb'} from 'ACTIONS_MODULE0'\nexport {login as '40faa7564ac777eb597397a532a6abe6fd7a5709ff'} from 'ACTIONS_MODULE0'\nexport {getEmployeeById as '403e9daddb0592dedef783672d2acc4e833cde8a87'} from 'ACTIONS_MODULE1'\nexport {getEmployees as '4073a7595f1293db52702f2e64eea5e6dd91a7b1aa'} from 'ACTIONS_MODULE1'\nexport {createEmployee as '408c736b6d445c9ca63a755bc913fa0ef51e61e35a'} from 'ACTIONS_MODULE1'\nexport {deleteEmployee as '40fc5de78e1969282a2a5f3ce14b4700939d1a9a84'} from 'ACTIONS_MODULE1'\nexport {updateEmployee as '605697295cf784a4268efc36734ec9690ab388d358'} from 'ACTIONS_MODULE1'\nexport {getCompanies as '00fdebc57c98a02f7153921e98f722c5ca22e3fbe3'} from 'ACTIONS_MODULE2'\nexport {getCompanyById as '40467e17e3a13d9926560ffb1081f4cdd4fd4fd63b'} from 'ACTIONS_MODULE2'\nexport {createCompany as '4052fcadf6bb0dd36877faca385dbdf54a66b4224d'} from 'ACTIONS_MODULE2'\nexport {deleteCompany as '40f3f8b668a33ffd60becaa1f534ded3da3be7ad0c'} from 'ACTIONS_MODULE2'\nexport {updateCompany as '60274702b45e1aba05d576bf7ce7b8e8c6219b639b'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AAKA;AAKA","debugId":null}},
    {"offset": {"line": 703, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,4JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 805, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/add-employee-dialog.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AddEmployeeDialog = registerClientReference(\n    function() { throw new Error(\"Attempted to call AddEmployeeDialog() from the server but AddEmployeeDialog is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/add-employee-dialog.tsx <module evaluation>\",\n    \"AddEmployeeDialog\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,oBAAoB,IAAA,wQAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,8EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 819, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/add-employee-dialog.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const AddEmployeeDialog = registerClientReference(\n    function() { throw new Error(\"Attempted to call AddEmployeeDialog() from the server but AddEmployeeDialog is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/add-employee-dialog.tsx\",\n    \"AddEmployeeDialog\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,oBAAoB,IAAA,wQAAuB,EACpD;IAAa,MAAM,IAAI,MAAM;AAAkP,GAC/Q,0DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 833, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 841, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/employees-list.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const EmployeesList = registerClientReference(\n    function() { throw new Error(\"Attempted to call EmployeesList() from the server but EmployeesList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/employees-list.tsx <module evaluation>\",\n    \"EmployeesList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,gBAAgB,IAAA,wQAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,yEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 855, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/employees-list.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const EmployeesList = registerClientReference(\n    function() { throw new Error(\"Attempted to call EmployeesList() from the server but EmployeesList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/employees-list.tsx\",\n    \"EmployeesList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,gBAAgB,IAAA,wQAAuB,EAChD;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,qDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 869, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/employees/page.tsx"],"sourcesContent":["import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Users, Building2, Briefcase, UserPlus } from 'lucide-react'\nimport { getEmployees } from '@/app/actions/employees'\nimport { getCompanies } from '@/app/actions/companies'\nimport { AddEmployeeDialog } from '@/components/dashboard/add-employee-dialog'\nimport { EmployeesList } from '@/components/dashboard/employees-list'\n\nexport default async function EmployeesPage() {\n  const result = await getEmployees()\n  const companiesResult = await getCompanies()\n\n  if (result.error) {\n    return (\n      <div className=\"p-8\">\n        <Card className=\"border-destructive\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Erro</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>{result.error}</p>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const employees = result.employees || []\n  const companies = companiesResult.companies || []\n\n  // Statistics\n  const stats = {\n    total: employees.length,\n    active: employees.filter(e => e.status === 'ACTIVE').length,\n    clt: employees.filter(e => e.contractType === 'CLT').length,\n    companies: new Set(employees.map(e => e.companyId)).size,\n  }\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary\">Funcionários</h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie o cadastro completo dos colaboradores ({stats.total} total)\n          </p>\n        </div>\n        <AddEmployeeDialog companies={companies} />\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"p-2 rounded-lg bg-blue-100 text-blue-700\">\n                <Users className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.total}</div>\n            <p className=\"text-xs text-muted-foreground\">Total de Funcionários</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"p-2 rounded-lg bg-green-100 text-green-700\">\n                <UserPlus className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.active}</div>\n            <p className=\"text-xs text-muted-foreground\">Ativos</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"p-2 rounded-lg bg-teal-100 text-teal-700\">\n                <Briefcase className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.clt}</div>\n            <p className=\"text-xs text-muted-foreground\">Regime CLT</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"p-2 rounded-lg bg-orange-100 text-orange-700\">\n                <Building2 className=\"h-4 w-4\" />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-primary mb-1\">{stats.companies}</div>\n            <p className=\"text-xs text-muted-foreground\">Empresas</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Employees List */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Lista de Funcionários</h2>\n        <EmployeesList employees={employees} />\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}