{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // Server Component context\n          }\n        },\n      },\n    }\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,4IAAO;IAEjC,OAAO,IAAA,iMAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,2BAA2B;gBAC7B;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAS;KAAO,GAAG;AACpE;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/auth.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase/server'\nimport { prisma } from '@/lib/prisma'\nimport { Role } from '@prisma/client'\n\nexport async function getCurrentUser() {\n  const supabase = await createClient()\n  const { data: { user }, error } = await supabase.auth.getUser()\n  \n  if (error || !user) {\n    return null\n  }\n  \n  return user\n}\n\nexport async function getUserMemberships(userId: string) {\n  return await prisma.membership.findMany({\n    where: {\n      userId,\n      status: 'ACTIVE'\n    },\n    include: {\n      company: true\n    },\n    orderBy: {\n      createdAt: 'desc'\n    }\n  })\n}\n\nexport async function isPlatformAdmin(userId: string): Promise<boolean> {\n  const admin = await prisma.platformAdmin.findUnique({\n    where: { userId }\n  })\n  return !!admin\n}\n\nexport async function getUserRole(userId: string, companyId: string): Promise<Role | null> {\n  const membership = await prisma.membership.findUnique({\n    where: {\n      userId_companyId: {\n        userId,\n        companyId\n      }\n    }\n  })\n  \n  return membership?.role ?? null\n}\n\nexport async function requireAuth() {\n  const user = await getCurrentUser()\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  return user\n}\n\nexport async function requireRole(userId: string, companyId: string, allowedRoles: Role[]) {\n  const role = await getUserRole(userId, companyId)\n  const isAdmin = await isPlatformAdmin(userId)\n  \n  if (isAdmin) return true\n  \n  if (!role || !allowedRoles.includes(role)) {\n    throw new Error('Insufficient permissions')\n  }\n  \n  return true\n}\n\nexport async function getUserDisplayRole(userId: string): Promise<{ role: Role | 'PLATFORM_ADMIN', label: string }> {\n  // Check if user is Platform Admin first\n  const isAdmin = await isPlatformAdmin(userId)\n  \n  if (isAdmin) {\n    return {\n      role: 'PLATFORM_ADMIN',\n      label: 'Admin da Plataforma'\n    }\n  }\n  \n  // Get the user's primary membership (most recent active one)\n  const memberships = await getUserMemberships(userId)\n  \n  if (memberships.length === 0) {\n    return {\n      role: 'VIEWER',\n      label: 'Sem Acesso'\n    }\n  }\n  \n  // Use the first membership's role\n  const primaryRole = memberships[0].role\n  \n  const roleLabels: Record<Role, string> = {\n    PLATFORM_ADMIN: 'Admin da Plataforma',\n    COMPANY_ADMIN: 'Admin da Empresa',\n    ENGINEER: 'Engenheiro SST',\n    EMPLOYER: 'Empregador',\n    VIEWER: 'Visualizador'\n  }\n  \n  return {\n    role: primaryRole,\n    label: roleLabels[primaryRole]\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;;;AAGO,eAAe;IACpB,MAAM,WAAW,MAAM,IAAA,2IAAY;IACnC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE7D,IAAI,SAAS,CAAC,MAAM;QAClB,OAAO;IACT;IAEA,OAAO;AACT;AAEO,eAAe,mBAAmB,MAAc;IACrD,OAAO,MAAM,yHAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;QACtC,OAAO;YACL;YACA,QAAQ;QACV;QACA,SAAS;YACP,SAAS;QACX;QACA,SAAS;YACP,WAAW;QACb;IACF;AACF;AAEO,eAAe,gBAAgB,MAAc;IAClD,MAAM,QAAQ,MAAM,yHAAM,CAAC,aAAa,CAAC,UAAU,CAAC;QAClD,OAAO;YAAE;QAAO;IAClB;IACA,OAAO,CAAC,CAAC;AACX;AAEO,eAAe,YAAY,MAAc,EAAE,SAAiB;IACjE,MAAM,aAAa,MAAM,yHAAM,CAAC,UAAU,CAAC,UAAU,CAAC;QACpD,OAAO;YACL,kBAAkB;gBAChB;gBACA;YACF;QACF;IACF;IAEA,OAAO,YAAY,QAAQ;AAC7B;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,eAAe,YAAY,MAAc,EAAE,SAAiB,EAAE,YAAoB;IACvF,MAAM,OAAO,MAAM,YAAY,QAAQ;IACvC,MAAM,UAAU,MAAM,gBAAgB;IAEtC,IAAI,SAAS,OAAO;IAEpB,IAAI,CAAC,QAAQ,CAAC,aAAa,QAAQ,CAAC,OAAO;QACzC,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;AAEO,eAAe,mBAAmB,MAAc;IACrD,wCAAwC;IACxC,MAAM,UAAU,MAAM,gBAAgB;IAEtC,IAAI,SAAS;QACX,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,6DAA6D;IAC7D,MAAM,cAAc,MAAM,mBAAmB;IAE7C,IAAI,YAAY,MAAM,KAAK,GAAG;QAC5B,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,kCAAkC;IAClC,MAAM,cAAc,WAAW,CAAC,EAAE,CAAC,IAAI;IAEvC,MAAM,aAAmC;QACvC,gBAAgB;QAChB,eAAe;QACf,UAAU;QACV,UAAU;QACV,QAAQ;IACV;IAEA,OAAO;QACL,MAAM;QACN,OAAO,UAAU,CAAC,YAAY;IAChC;AACF","debugId":null}},
    {"offset": {"line": 365, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/ai/template-builder/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { GoogleGenAI } from '@google/genai'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\nconst genai = new GoogleGenAI({\n  apiKey: process.env.GEMINI_API_KEY || '',\n})\n\ninterface TemplateBuilderRequest {\n  name: string\n  description: string\n  type: 'NR12' | 'NR35' | 'ISO45001' | 'ISO14001' | 'IMSST' | 'CUSTOM'\n  context?: string\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser()\n    if (!user) {\n      return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    if (!isAdmin) {\n      return NextResponse.json(\n        { error: 'Apenas administradores podem gerar templates via IA' },\n        { status: 403 }\n      )\n    }\n\n    const body: TemplateBuilderRequest = await request.json()\n    const { name, description, type, context } = body\n\n    if (!name || !description || !type) {\n      return NextResponse.json(\n        { error: 'Nome, descrição e tipo são obrigatórios' },\n        { status: 400 }\n      )\n    }\n\n    const systemPrompt = `Você é um especialista em Segurança e Saúde no Trabalho (SST) no Brasil. Sua tarefa é gerar templates de diagnóstico detalhados e tecnicamente precisos para avaliações de SST.\n\nUm template consiste em:\n- **Seções**: Agrupamentos lógicos de perguntas (ex: \"Gestão de Riscos\", \"CIPA\")\n- **Perguntas**: Cada pergunta tem:\n  - text: Texto da pergunta claro e objetivo\n  - type: \"BOOLEAN\" (Sim/Não) ou \"SCORE\" (1-5)\n  - weight: Peso de 1-10 (importância da pergunta)\n  - reference: Referência normativa (ex: \"NR-12 item 12.3.1\")\n  - requiresJustification: true/false - se a pergunta exige que o usuário forneça uma justificativa textual para qualquer resposta\n  - requiresEvidence: true/false - se a pergunta exige que o usuário anexe evidências (fotos/documentos) para qualquer resposta\n\nIMPORTANTE:\n- Gere SEMPRE entre 20-30 perguntas no total, distribuídas entre 4-6 seções\n- Use pesos maiores (7-10) para itens críticos de segurança\n- Use pesos menores (3-5) para itens de documentação\n- Mix equilibrado de BOOLEAN e SCORE (cerca de 60% BOOLEAN, 40% SCORE)\n- Use requiresJustification=true em perguntas onde a explicação da resposta é importante (ex: não conformidades, itens críticos)\n- Use requiresEvidence=true em perguntas onde é necessário comprovar com documentos/fotos (ex: treinamentos, certificados, equipamentos)`\n\n    const userPrompt = `Gere um template de diagnóstico SST com as seguintes características:\n\n**Nome**: ${name}\n**Descrição**: ${description}\n**Tipo**: ${type}\n${context ? `**Contexto adicional**: ${context}` : ''}\n\nRetorne APENAS um JSON válido no seguinte formato (sem markdown, sem explicações):\n\n{\n  \"sections\": [\n    {\n      \"title\": \"Nome da Seção\",\n      \"description\": \"Descrição breve da seção\",\n      \"order\": 1,\n      \"questions\": [\n        {\n          \"text\": \"Texto da pergunta?\",\n          \"type\": \"BOOLEAN\",\n          \"weight\": 8,\n          \"reference\": \"NR-XX item X.X.X\",\n          \"requiresJustification\": true,\n          \"requiresEvidence\": false\n        }\n      ]\n    }\n  ]\n}`\n\n    const response = await genai.models.generateContent({\n      model: 'gemini-2.0-flash-exp',\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: 'application/json',\n      },\n      contents: userPrompt,\n    })\n\n    const content = response.text\n    if (!content) {\n      return NextResponse.json(\n        { error: 'IA não retornou conteúdo' },\n        { status: 500 }\n      )\n    }\n\n    const generatedTemplate = JSON.parse(content)\n\n    // Validar estrutura básica\n    if (!generatedTemplate.sections || !Array.isArray(generatedTemplate.sections)) {\n      return NextResponse.json(\n        { error: 'Template gerado tem formato inválido' },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      success: true,\n      template: {\n        name,\n        description,\n        type,\n        sections: generatedTemplate.sections\n      }\n    })\n\n  } catch (error) {\n    console.error('Erro ao gerar template via IA:', error)\n    return NextResponse.json(\n      { error: 'Erro ao gerar template via IA' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,QAAQ,IAAI,4KAAW,CAAC;IAC5B,QAAQ,QAAQ,GAAG,CAAC,cAAc,IAAI;AACxC;AASO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,IAAA,+HAAc;QACjC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,UAAU,MAAM,IAAA,gIAAe,EAAC,KAAK,EAAE;QAC7C,IAAI,CAAC,SAAS;YACZ,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsD,GAC/D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAA+B,MAAM,QAAQ,IAAI;QACvD,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG;QAE7C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM;YAClC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0C,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;wIAkB8G,CAAC;QAErI,MAAM,aAAa,CAAC;;UAEd,EAAE,KAAK;eACF,EAAE,YAAY;UACnB,EAAE,KAAK;AACjB,EAAE,UAAU,CAAC,wBAAwB,EAAE,SAAS,GAAG,GAAG;;;;;;;;;;;;;;;;;;;;;;CAsBrD,CAAC;QAEE,MAAM,WAAW,MAAM,MAAM,MAAM,CAAC,eAAe,CAAC;YAClD,OAAO;YACP,QAAQ;gBACN,mBAAmB;gBACnB,kBAAkB;YACpB;YACA,UAAU;QACZ;QAEA,MAAM,UAAU,SAAS,IAAI;QAC7B,IAAI,CAAC,SAAS;YACZ,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,oBAAoB,KAAK,KAAK,CAAC;QAErC,2BAA2B;QAC3B,IAAI,CAAC,kBAAkB,QAAQ,IAAI,CAAC,MAAM,OAAO,CAAC,kBAAkB,QAAQ,GAAG;YAC7E,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU;gBACR;gBACA;gBACA;gBACA,UAAU,kBAAkB,QAAQ;YACtC;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}