generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model AIPromptConfig {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  description  String?
  systemPrompt String
  temperature  Float    @default(0.7)
  category     String
  isActive     Boolean  @default(true)
  createdBy    String
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])

  @@index([category])
  @@index([companyId])
}

model KnowledgeSource {
  id          String                 @id @default(cuid())
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  type        String
  title       String
  description String?
  content     String
  category    String
  url         String?
  fileKey     String?
  embedding   Unsupported("vector")?
  isActive    Boolean                @default(true)
  createdBy   String
  companyId   String
  company     Company                @relation(fields: [companyId], references: [id])

  @@index([category])
  @@index([companyId])
}

model Company {
  id                String             @id @default(uuid())
  name              String
  cnpj              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  aiPrompts         AIPromptConfig[]
  knowledgeSources  KnowledgeSource[]
  actionPlans       ActionPlan[]
  assessments       Assessment[]
  auditLogs         AuditLog[]
  employees         Employee[]
  memberships       Membership[]
  modulePermissions ModulePermission[]

  @@map("companies")
}

model Membership {
  id         String           @id @default(uuid())
  userId     String
  companyId  String
  employeeId String?          @unique
  role       Role
  status     MembershipStatus @default(INVITED)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  company    Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee   Employee?        @relation(fields: [employeeId], references: [id])

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@index([employeeId])
  @@map("memberships")
}

model PlatformAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())

  @@map("platform_admins")
}

model ModulePermission {
  id        String   @id @default(uuid())
  userId    String
  companyId String
  moduleKey String
  canRead   Boolean  @default(false)
  canWrite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId, moduleKey])
  @@index([userId, companyId])
  @@map("module_permissions")
}

model DiagnosticTemplate {
  id          String              @id @default(uuid())
  name        String
  description String?
  type        TemplateType
  version     String              @default("1.0")
  status      TemplateStatus      @default(DRAFT)
  createdBy   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  assessments Assessment[]
  sections    DiagnosticSection[]

  @@index([type])
  @@index([status])
  @@map("diagnostic_templates")
}

model DiagnosticSection {
  id         String               @id @default(uuid())
  templateId String
  title      String
  order      Int
  createdAt  DateTime             @default(now())
  scores     AssessmentScore[]
  questions  DiagnosticQuestion[]
  template   DiagnosticTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@map("diagnostic_sections")
}

model DiagnosticQuestion {
  id                    String             @id @default(uuid())
  sectionId             String
  text                  String
  type                  QuestionType
  weight                Float              @default(1.0)
  reference             String?
  requiresJustification Boolean            @default(false)
  requiresEvidence      Boolean            @default(false)
  source                QuestionSource     @default(MANUAL)
  versionOf             String?
  approved              Boolean            @default(false)
  active                Boolean            @default(true)
  createdAt             DateTime           @default(now())
  answers               AssessmentAnswer[]
  section               DiagnosticSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([approved])
  @@map("diagnostic_questions")
}

model IMSSTDimension {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int
  createdAt   DateTime @default(now())

  @@map("imsst_dimensions")
}

model Assessment {
  id           String              @id @default(uuid())
  companyId    String
  templateId   String?
  createdBy    String
  title        String
  description  String?
  status       AssessmentStatus    @default(DRAFT)
  overallScore Float?
  overallLevel Int?
  startedAt    DateTime?
  submittedAt  DateTime?
  scoredAt     DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  actionPlans  ActionPlan[]
  answers      AssessmentAnswer[]
  scores       AssessmentScore[]
  company      Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  template     DiagnosticTemplate? @relation(fields: [templateId], references: [id])
  evidences    Evidence[]
  findings     Finding[]

  @@index([companyId])
  @@index([templateId])
  @@index([createdBy])
  @@map("assessments")
}

model AssessmentAnswer {
  id            String             @id @default(uuid())
  assessmentId  String
  questionId    String
  userId        String
  value         Float
  justification String?
  evidenceUrls  String[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  assessment    Assessment         @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question      DiagnosticQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  evidences     Evidence[]

  @@unique([assessmentId, questionId])
  @@index([assessmentId])
  @@index([userId])
  @@map("assessment_answers")
}

model AssessmentScore {
  id            String            @id @default(uuid())
  assessmentId  String
  sectionId     String
  rawScore      Float
  weightedScore Float
  level         Int
  createdAt     DateTime          @default(now())
  assessment    Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  section       DiagnosticSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, sectionId])
  @@index([assessmentId])
  @@map("assessment_scores")
}

model Finding {
  id            String          @id @default(uuid())
  assessmentId  String
  sectionTitle  String
  questionText  String
  questionType  QuestionType
  value         Float
  reference     String?
  justification String?
  severity      FindingSeverity
  evidenceCount Int             @default(0)
  createdAt     DateTime        @default(now())
  assessment    Assessment      @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([severity])
  @@map("findings")
}

model Evidence {
  id           String            @id @default(uuid())
  assessmentId String
  answerId     String?
  fileName     String
  fileUrl      String
  fileSize     Int
  mimeType     String
  uploadedBy   String
  uploadedAt   DateTime          @default(now())
  answer       AssessmentAnswer? @relation(fields: [answerId], references: [id], onDelete: Cascade)
  assessment   Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([answerId])
  @@map("evidences")
}

model ActionPlan {
  id           String       @id @default(uuid())
  assessmentId String
  companyId    String
  title        String
  description  String
  reference    String?
  ownerUserId  String?
  dueDate      DateTime?
  priority     Int          @default(2)
  status       ActionStatus @default(PENDING)
  createdBy    String
  aiGenerated  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assessment   Assessment   @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  company      Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([companyId])
  @@index([status])
  @@index([priority])
  @@map("action_plans")
}

model Employee {
  id                    String           @id @default(uuid())
  companyId             String
  userId                String?
  fullName              String
  cpf                   String
  birthDate             DateTime
  gender                Gender?
  maritalStatus         MaritalStatus?
  nationality           String           @default("Brasileira")
  email                 String
  phone                 String?
  emergencyContactName  String?
  emergencyContactPhone String?
  employeeNumber        String
  admissionDate         DateTime
  contractType          ContractType
  workSchedule          String?
  unit                  String?
  department            String?
  position              String
  cboCode               String?
  supervisor            String?
  status                MembershipStatus @default(ACTIVE)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  company               Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  membership            Membership?

  @@unique([companyId, cpf])
  @@unique([companyId, employeeNumber])
  @@unique([companyId, userId])
  @@index([companyId])
  @@index([userId])
  @@map("employees")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  companyId String?
  action    String
  entity    String?
  entityId  String?
  metadata  Json?
  createdAt DateTime @default(now())
  company   Company? @relation(fields: [companyId], references: [id])

  @@index([userId])
  @@index([companyId])
  @@index([createdAt])
  @@map("audit_logs")
}

model MteStandard {
  id           String               @id @default(uuid())
  nrNumber     String
  title        String
  section      String               @default("")
  content      String
  version      String
  sourceUrl    String?
  lastVerified DateTime             @default(now())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  embeddings   KnowledgeEmbedding[]

  @@unique([nrNumber, section, version])
  @@index([nrNumber])
  @@map("mte_standards")
}

model KnowledgeEmbedding {
  id            String                 @id @default(uuid())
  sourceType    EmbeddingSourceType
  sourceId      String
  content       String
  metadata      Json?
  embedding     Unsupported("vector")?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  mteStandardId String?
  mteStandard   MteStandard?           @relation(fields: [mteStandardId], references: [id], onDelete: Cascade)

  @@index([sourceType])
  @@index([sourceId])
  @@map("knowledge_embeddings")
}

model AIFeedback {
  id          String         @id @default(uuid())
  messageId   String         @unique
  userId      String?
  userQuery   String
  aiResponse  String
  feedback    FeedbackType
  status      FeedbackStatus @default(PENDING)
  processedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  metadata    Json?

  @@index([feedback])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_feedbacks")
}

model AIConfiguration {
  id           String   @id @default(uuid())
  systemPrompt String
  temperature  Float    @default(0.7)
  maxTokens    Int      @default(2000)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  updatedBy    String?

  @@map("ai_configurations")
}

model KnowledgeDocument {
  id               String    @id @default(uuid())
  filename         String
  originalFilename String
  filepath         String
  size             Int
  mimeType         String?
  status           DocumentStatus @default(PROCESSING)
  pages            Int?
  extractedText    String?
  uploadedAt       DateTime  @default(now())
  processedAt      DateTime?
  uploadedBy       String

  @@map("knowledge_documents")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([email])
  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

enum Role {
  PLATFORM_ADMIN
  COMPANY_ADMIN
  ENGINEER
  EMPLOYER
  VIEWER
}

enum MembershipStatus {
  ACTIVE
  INVITED
  INACTIVE
}

enum TemplateType {
  NR
  ISO
  IMSST
  CUSTOM
}

enum TemplateStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum QuestionType {
  BOOLEAN
  SCORE
}

enum QuestionSource {
  MANUAL
  AI
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  SUBMITTED
  SCORED
  COMPLETED
}

enum FindingSeverity {
  HIGH
  MEDIUM
  LOW
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  DONE
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum ContractType {
  CLT
  INTERN
  OUTSOURCED
  TEMPORARY
  AUTONOMOUS
}

enum EmbeddingSourceType {
  TEMPLATE
  ASSESSMENT
  ACTION_PLAN
  MTE_STANDARD
  ISO_STANDARD
  BEST_PRACTICE
  DOCUMENT
}

enum FeedbackType {
  POSITIVE
  NEGATIVE
}

enum FeedbackStatus {
  PENDING
  PROCESSED
  REVIEWED
  IGNORED
}

enum DocumentStatus {
  PROCESSING
  READY
  ERROR
}
