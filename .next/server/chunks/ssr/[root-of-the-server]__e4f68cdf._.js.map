{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/assessments.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, getUserRole, isPlatformAdmin } from '@/lib/auth'\nimport { AssessmentStatus } from '@prisma/client'\n\nexport async function createAssessment(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const role = await getUserRole(user.id, companyId)\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n    return { error: 'Sem permissão para criar diagnósticos' }\n  }\n\n  const title = formData.get('title') as string\n  const description = formData.get('description') as string\n  const templateId = formData.get('templateId') as string | null\n\n  if (!title) {\n    return { error: 'Título é obrigatório' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.create({\n      data: {\n        companyId,\n        createdBy: user.id,\n        title,\n        description,\n        templateId: templateId || undefined,\n        status: 'DRAFT',\n      }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    redirect(`/dashboard/diagnostics/${assessment.id}`)\n  } catch (error) {\n    console.error('Erro ao criar diagnóstico:', error)\n    return { error: 'Erro ao criar diagnóstico' }\n  }\n}\n\nexport async function getAssessments(companyId?: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n    let assessments\n\n    if (isAdmin) {\n      assessments = await prisma.assessment.findMany({\n        where: companyId ? { companyId } : undefined,\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = memberships.map(m => m.companyId)\n\n      if (companyId && !companyIds.includes(companyId)) {\n        return { error: 'Sem permissão para acessar diagnósticos desta empresa' }\n      }\n\n      assessments = await prisma.assessment.findMany({\n        where: {\n          companyId: companyId ? companyId : { in: companyIds }\n        },\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    return { success: true, assessments }\n  } catch (error) {\n    console.error('Erro ao buscar diagnósticos:', error)\n    return { error: 'Erro ao buscar diagnósticos' }\n  }\n}\n\nexport async function getAssessmentById(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        company: true,\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: true\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true\n          }\n        },\n        scores: true,\n        findings: true,\n        evidences: true,\n        actionPlans: true,\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    return { success: true, assessment }\n  } catch (error) {\n    console.error('Erro ao buscar diagnóstico:', error)\n    return { error: 'Erro ao buscar diagnóstico' }\n  }\n}\n\nexport async function getTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: {\n        status: 'PUBLISHED'\n      },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: {\n                active: true,\n                approved: true\n              },\n              orderBy: {\n                createdAt: 'asc'\n              }\n            }\n          },\n          orderBy: {\n            order: 'asc'\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function saveAnswer(\n  assessmentId: string, \n  questionId: string, \n  value: number,\n  justification?: string,\n  evidenceUrls?: string[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    if (assessment.status === 'COMPLETED') {\n      return { error: 'Este diagnóstico já foi finalizado' }\n    }\n\n    const answer = await prisma.assessmentAnswer.upsert({\n      where: {\n        assessmentId_questionId: {\n          assessmentId,\n          questionId,\n        }\n      },\n      create: {\n        assessmentId,\n        questionId,\n        userId: user.id,\n        value,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      },\n      update: {\n        value,\n        userId: user.id,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      }\n    })\n\n    if (assessment.status === 'DRAFT') {\n      await prisma.assessment.update({\n        where: { id: assessmentId },\n        data: {\n          status: 'IN_PROGRESS',\n          startedAt: new Date(),\n        }\n      })\n    }\n\n    return { success: true, answer }\n  } catch (error) {\n    console.error('Erro ao salvar resposta:', error)\n    return { error: 'Erro ao salvar resposta' }\n  }\n}\n\nexport async function submitAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true\n          }\n        }\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (!assessment.template) {\n      return { error: 'Este diagnóstico não possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para submeter este diagnóstico' }\n    }\n\n    // Calcular scores por seção usando o novo schema\n    const totalQuestions = assessment.template.sections.reduce(\n      (sum, section) => sum + section.questions.length, \n      0\n    )\n    \n    if (assessment.answers.length < totalQuestions) {\n      return { error: `Por favor, responda todas as ${totalQuestions} perguntas antes de finalizar` }\n    }\n\n    const sectionScores: { sectionId: string; rawScore: number; weightedScore: number; level: number }[] = []\n\n    for (const section of assessment.template.sections) {\n      const sectionAnswers = assessment.answers.filter(\n        a => section.questions.some(q => q.id === a.questionId)\n      )\n\n      if (sectionAnswers.length === 0) continue\n\n      // Calcular score ponderado da seção\n      let rawScore = 0\n      let totalWeight = 0\n\n      for (const answer of sectionAnswers) {\n        const question = section.questions.find(q => q.id === answer.questionId)\n        if (!question) continue\n\n        rawScore += answer.value * question.weight\n        totalWeight += question.weight * (question.type === 'BOOLEAN' ? 1 : 5)\n      }\n\n      const weightedScore = totalWeight > 0 ? (rawScore / totalWeight) * 100 : 0\n      const level = Math.min(5, Math.max(1, Math.ceil(weightedScore / 20)))\n\n      sectionScores.push({ sectionId: section.id, rawScore, weightedScore, level })\n\n      await prisma.assessmentScore.upsert({\n        where: {\n          assessmentId_sectionId: {\n            assessmentId,\n            sectionId: section.id,\n          }\n        },\n        create: {\n          assessmentId,\n          sectionId: section.id,\n          rawScore,\n          weightedScore,\n          level,\n        },\n        update: {\n          rawScore,\n          weightedScore,\n          level,\n        }\n      })\n    }\n\n    // Calcular overall score (média ponderada de todas as seções)\n    const overallScore = sectionScores.length > 0 \n      ? sectionScores.reduce((sum, s) => sum + s.weightedScore, 0) / sectionScores.length \n      : 0\n    const overallLevel = Math.min(5, Math.max(1, Math.ceil(overallScore / 20)))\n\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: {\n        status: 'SCORED',\n        submittedAt: new Date(),\n        scoredAt: new Date(),\n        overallScore,\n        overallLevel,\n      }\n    })\n\n    // Gerar achados automaticamente baseados nas respostas não conformes\n    const { generateFindings } = await import('./findings')\n    await generateFindings(assessmentId)\n\n    revalidatePath('/dashboard/diagnostics')\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao submeter diagnóstico:', error)\n    return { error: 'Erro ao submeter diagnóstico' }\n  }\n}\n\nexport async function deleteAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, assessment.companyId)\n\n    if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n      return { error: 'Sem permissão para deletar este diagnóstico' }\n    }\n\n    await prisma.assessment.delete({\n      where: { id: assessmentId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar diagnóstico:', error)\n    return { error: 'Erro ao deletar diagnóstico' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 536, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/companies.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role } from '@prisma/client'\n\nexport async function createCompany(formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem criar empresas' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.create({\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao criar empresa:', error)\n    return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n  }\n}\n\nexport async function updateCompany(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Sem permissão para editar esta empresa' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.update({\n      where: { id: companyId },\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao atualizar empresa:', error)\n    return { error: 'Erro ao atualizar empresa' }\n  }\n}\n\nexport async function deleteCompany(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem deletar empresas' }\n  }\n\n  try {\n    await prisma.company.delete({\n      where: { id: companyId }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar empresa:', error)\n    return { error: 'Erro ao deletar empresa' }\n  }\n}\n\nexport async function getCompanies() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let companies\n\n    if (isAdmin) {\n      companies = await prisma.company.findMany({\n        include: {\n          _count: {\n            select: {\n              memberships: true,\n              assessments: true,\n              actionPlans: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        include: {\n          company: {\n            include: {\n              _count: {\n                select: {\n                  memberships: true,\n                  assessments: true,\n                  actionPlans: true,\n                }\n              }\n            }\n          }\n        }\n      })\n\n      companies = memberships.map(m => m.company)\n    }\n\n    return { success: true, companies }\n  } catch (error) {\n    console.error('Erro ao buscar empresas:', error)\n    return { error: 'Erro ao buscar empresas' }\n  }\n}\n\nexport async function getCompanyById(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar esta empresa' }\n  }\n\n  try {\n    const company = await prisma.company.findUnique({\n      where: { id: companyId },\n      include: {\n        memberships: {\n          include: {\n            company: true\n          }\n        },\n        assessments: {\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 5\n        },\n        _count: {\n          select: {\n            memberships: true,\n            assessments: true,\n            actionPlans: true,\n          }\n        }\n      }\n    })\n\n    if (!company) {\n      return { error: 'Empresa não encontrada' }\n    }\n\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao buscar empresa:', error)\n    return { error: 'Erro ao buscar empresa' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;;;;;;AAGO,eAAe,cAAc,QAAkB;IACpD,MAAM,OAAO,MAAM,IAAA,6HAAc;IACjC,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,OAAO;QAAiB;IACnC;IAEA,MAAM,UAAU,MAAM,IAAA,8HAAe,EAAC,KAAK,EAAE;IAC7C,IAAI,CAAC,SAAS;QACZ,OAAO;YAAE,OAAO;QAA4D;IAC9E;IAEA,MAAM,OAAO,SAAS,GAAG,CAAC;IAC1B,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,QAAQ,CAAC,MAAM;QAClB,OAAO;YAAE,OAAO;QAA+B;IACjD;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,uHAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1C,MAAM;gBACJ;gBACA;YACF;QACF;QAEA,IAAA,+IAAc,EAAC;QACf,OAAO;YAAE,SAAS;YAAM;QAAQ;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO;YAAE,OAAO;QAAqE;IACvF;AACF;AAEO,eAAe,cAAc,SAAiB,EAAE,QAAkB;IACvE,MAAM,OAAO,MAAM,IAAA,6HAAc;IACjC,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,OAAO;QAAiB;IACnC;IAEA,MAAM,UAAU,MAAM,IAAA,8HAAe,EAAC,KAAK,EAAE;IAC7C,MAAM,OAAO,MAAM,IAAA,0HAAW,EAAC,KAAK,EAAE,EAAE;IAExC,IAAI,CAAC,WAAW,SAAS,iBAAiB;QACxC,OAAO;YAAE,OAAO;QAAyC;IAC3D;IAEA,MAAM,OAAO,SAAS,GAAG,CAAC;IAC1B,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,QAAQ,CAAC,MAAM;QAClB,OAAO;YAAE,OAAO;QAA+B;IACjD;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,uHAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1C,OAAO;gBAAE,IAAI;YAAU;YACvB,MAAM;gBACJ;gBACA;YACF;QACF;QAEA,IAAA,+IAAc,EAAC;QACf,IAAA,+IAAc,EAAC,CAAC,qBAAqB,EAAE,WAAW;QAClD,OAAO;YAAE,SAAS;YAAM;QAAQ;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO;YAAE,OAAO;QAA4B;IAC9C;AACF;AAEO,eAAe,cAAc,SAAiB;IACnD,MAAM,OAAO,MAAM,IAAA,6HAAc;IACjC,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,OAAO;QAAiB;IACnC;IAEA,MAAM,UAAU,MAAM,IAAA,8HAAe,EAAC,KAAK,EAAE;IAC7C,IAAI,CAAC,SAAS;QACZ,OAAO;YAAE,OAAO;QAA8D;IAChF;IAEA,IAAI;QACF,MAAM,uHAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAC1B,OAAO;gBAAE,IAAI;YAAU;QACzB;QAEA,IAAA,+IAAc,EAAC;QACf,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;YAAE,OAAO;QAA0B;IAC5C;AACF;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM,IAAA,6HAAc;IACjC,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,OAAO;QAAiB;IACnC;IAEA,MAAM,UAAU,MAAM,IAAA,8HAAe,EAAC,KAAK,EAAE;IAE7C,IAAI;QACF,IAAI;QAEJ,IAAI,SAAS;YACX,YAAY,MAAM,uHAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;gBACxC,SAAS;oBACP,QAAQ;wBACN,QAAQ;4BACN,aAAa;4BACb,aAAa;4BACb,aAAa;wBACf;oBACF;gBACF;gBACA,SAAS;oBACP,WAAW;gBACb;YACF;QACF,OAAO;YACL,MAAM,cAAc,MAAM,uHAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACnD,OAAO;oBACL,QAAQ,KAAK,EAAE;oBACf,QAAQ;gBACV;gBACA,SAAS;oBACP,SAAS;wBACP,SAAS;4BACP,QAAQ;gCACN,QAAQ;oCACN,aAAa;oCACb,aAAa;oCACb,aAAa;gCACf;4BACF;wBACF;oBACF;gBACF;YACF;YAEA,YAAY,YAAY,GAAG,CAAC,CAAA,IAAK,EAAE,OAAO;QAC5C;QAEA,OAAO;YAAE,SAAS;YAAM;QAAU;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO;YAAE,OAAO;QAA0B;IAC5C;AACF;AAEO,eAAe,eAAe,SAAiB;IACpD,MAAM,OAAO,MAAM,IAAA,6HAAc;IACjC,IAAI,CAAC,MAAM;QACT,OAAO;YAAE,OAAO;QAAiB;IACnC;IAEA,MAAM,UAAU,MAAM,IAAA,8HAAe,EAAC,KAAK,EAAE;IAC7C,MAAM,OAAO,MAAM,IAAA,0HAAW,EAAC,KAAK,EAAE,EAAE;IAExC,IAAI,CAAC,WAAW,CAAC,MAAM;QACrB,OAAO;YAAE,OAAO;QAA0C;IAC5D;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,uHAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE,IAAI;YAAU;YACvB,SAAS;gBACP,aAAa;oBACX,SAAS;wBACP,SAAS;oBACX;gBACF;gBACA,aAAa;oBACX,SAAS;wBACP,WAAW;oBACb;oBACA,MAAM;gBACR;gBACA,QAAQ;oBACN,QAAQ;wBACN,aAAa;wBACb,aAAa;wBACb,aAAa;oBACf;gBACF;YACF;QACF;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO;gBAAE,OAAO;YAAyB;QAC3C;QAEA,OAAO;YAAE,SAAS;YAAM;QAAQ;IAClC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO;YAAE,OAAO;QAAyB;IAC3C;AACF;;;IAxMsB;IAkCA;IAsCA;IAwBA;IAyDA;;AAzJA,+OAAA;AAkCA,+OAAA;AAsCA,+OAAA;AAwBA,+OAAA;AAyDA,+OAAA","debugId":null}},
    {"offset": {"line": 801, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/templates.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\nimport { TemplateStatus } from '@prisma/client'\n\nexport async function getAllTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true },\n              orderBy: { createdAt: 'asc' }\n            }\n          },\n          orderBy: { order: 'asc' }\n        },\n        _count: {\n          select: {\n            sections: true,\n            assessments: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function getTemplateById(templateId: string) {\n  try {\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true },\n              orderBy: { createdAt: 'asc' }\n            }\n          },\n          orderBy: { order: 'asc' }\n        },\n        _count: {\n          select: { assessments: true }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    return { success: true, template }\n  } catch (error) {\n    console.error('Erro ao buscar template:', error)\n    return { error: 'Erro ao buscar template' }\n  }\n}\n\nexport async function updateTemplateStatus(templateId: string, status: TemplateStatus) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem alterar o status de templates' }\n  }\n\n  try {\n    await prisma.diagnosticTemplate.update({\n      where: { id: templateId },\n      data: { status }\n    })\n\n    revalidatePath('/dashboard/templates')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao atualizar status do template:', error)\n    return { error: 'Erro ao atualizar status do template' }\n  }\n}\n\nexport async function deleteTemplate(templateId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem excluir templates' }\n  }\n\n  try {\n    // Verificar se há assessments usando este template\n    const assessmentCount = await prisma.assessment.count({\n      where: { templateId }\n    })\n\n    if (assessmentCount > 0) {\n      return { error: `Não é possível excluir. Existem ${assessmentCount} diagnósticos usando este template.` }\n    }\n\n    await prisma.diagnosticTemplate.delete({\n      where: { id: templateId }\n    })\n\n    revalidatePath('/dashboard/templates')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir template:', error)\n    return { error: 'Erro ao excluir template' }\n  }\n}\n\nexport async function getPublishedTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: { status: 'PUBLISHED' },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        type: true,\n        _count: {\n          select: { sections: true }\n        }\n      },\n      orderBy: { name: 'asc' }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates publicados:', error)\n    return { error: 'Erro ao buscar templates publicados' }\n  }\n}\n\nexport async function applyTemplateToAssessment(assessmentId: string, templateId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o assessment existe e se o usuário tem permissão\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true, status: true, templateId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.status !== 'DRAFT') {\n      return { error: 'Só é possível aplicar template em diagnósticos com status DRAFT' }\n    }\n\n    if (assessment.templateId) {\n      return { error: 'Este diagnóstico já possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para modificar este diagnóstico' }\n    }\n\n    // Buscar o template com seções e perguntas para validação\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true }\n            }\n          }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    if (template.status !== 'PUBLISHED') {\n      return { error: 'Apenas templates publicados podem ser aplicados' }\n    }\n\n    // Associar o template ao assessment\n    // As seções e perguntas já existem no template e serão acessadas via relacionamento\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: { templateId }\n    })\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    return { \n      success: true, \n      sectionsCount: template.sections.length,\n      questionsCount: template.sections.reduce((sum, s) => sum + s.questions.length, 0)\n    }\n  } catch (error) {\n    console.error('Erro ao aplicar template:', error)\n    return { error: 'Erro ao aplicar template ao diagnóstico' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1132, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/diagnostics/new/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '001612479ffe3df3b560a9256854eff3c142a49046'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '403f6a655a93f19290c0377ca923599a3e5292077e'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '40439334a5568f25e33e14f048aea20f2229033d78'} from 'ACTIONS_MODULE0'\nexport {login as '408d6eb714a14577c51fc8b9493649ca0d998e08dc'} from 'ACTIONS_MODULE0'\nexport {signup as '40e02091b8a128ab738326d5d57e901f470c31b4f2'} from 'ACTIONS_MODULE0'\nexport {createAssessment as '6074b3a1af5e6bf8ac807cf2cb9882598cce2c6f0d'} from 'ACTIONS_MODULE1'\nexport {getCompanies as '004d3320cd4efa814dbe0b48e473573801fc1dcc86'} from 'ACTIONS_MODULE2'\nexport {getPublishedTemplates as '0036b80d6f455add1825877b528078e708fc55d3f9'} from 'ACTIONS_MODULE3'\n"],"names":[],"mappings":";AAAA;AAKA;AACA;AACA","debugId":null}},
    {"offset": {"line": 1188, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/new/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/diagnostics/new/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/diagnostics/new/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAA0S,GACvU,wEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1202, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/new/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/diagnostics/new/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/diagnostics/new/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAsR,GACnT,oDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}