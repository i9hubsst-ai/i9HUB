// Prisma schema for i9HUBSST - Occupational Health and Safety Management Platform

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

// ============================================
// AI AND KNOWLEDGE BASE
// ============================================

model AIPromptConfig {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  description   String?
  systemPrompt  String   @db.Text
  temperature   Float    @default(0.7)
  category      String   // NR12, NR35, ISO45001, etc.
  isActive      Boolean  @default(true)
  createdBy     String   // userId
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String

  @@index([category])
  @@index([companyId])
}

model KnowledgeSource {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  type          String   // URL, PDF, TEXT
  title         String
  description   String?
  content       String   @db.Text
  category      String   // NR12, NR35, ISO45001, etc.
  url           String?  // Para fontes online
  fileKey       String?  // Para arquivos armazenados (PDFs)
  embedding     Unsupported("vector")?  // Vetor de embedding para busca semântica
  isActive      Boolean  @default(true)
  createdBy     String   // userId
  company       Company  @relation(fields: [companyId], references: [id])
  companyId     String

  @@index([category])
  @@index([companyId])
}

// ============================================
// CORE ENTITIES
// ============================================

model Company {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  memberships       Membership[]
  employees         Employee[]
  assessments       Assessment[]
  actionPlans      ActionPlan[]
  modulePermissions ModulePermission[]
  auditLogs        AuditLog[]
  aiPrompts        AIPromptConfig[]
  knowledgeSources KnowledgeSource[]

  @@map("companies")
}

enum Role {
  PLATFORM_ADMIN
  COMPANY_ADMIN
  ENGINEER
  EMPLOYER
  VIEWER
}

enum MembershipStatus {
  ACTIVE
  INVITED
  INACTIVE
}

model Membership {
  id         String           @id @default(uuid())
  userId     String // Supabase Auth user ID
  companyId  String
  employeeId String?          @unique // Optional link to Employee data
  role       Role
  status     MembershipStatus @default(INVITED)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relations
  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee Employee? @relation(fields: [employeeId], references: [id], onDelete: SetNull)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@index([employeeId])
  @@map("memberships")
}

model PlatformAdmin {
  id        String   @id @default(uuid())
  userId    String   @unique // Supabase Auth user ID
  createdAt DateTime @default(now())

  @@map("platform_admins")
}

// ============================================
// MODULE PERMISSIONS
// ============================================

model ModulePermission {
  id        String   @id @default(uuid())
  userId    String // Supabase Auth user ID
  companyId String
  moduleKey String // e.g., "diagnostics", "actions", "training"
  canRead   Boolean  @default(false)
  canWrite  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId, moduleKey])
  @@index([userId, companyId])
  @@map("module_permissions")
}

// ============================================
// DIAGNOSTIC TEMPLATES SYSTEM
// ============================================

enum TemplateType {
  NR        // Norma Regulamentadora (NR-12, NR-35, etc)
  ISO       // ISO Standards (ISO 45001, ISO 14001, etc)
  IMSST     // Sistema Geral IMSST
  CUSTOM    // Custom templates
}

enum TemplateStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model DiagnosticTemplate {
  id          String         @id @default(uuid())
  name        String
  description String?
  type        TemplateType
  version     String         @default("1.0")
  status      TemplateStatus @default(DRAFT)
  createdBy   String // Supabase Auth user ID
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  sections    DiagnosticSection[]
  assessments Assessment[]

  @@index([type])
  @@index([status])
  @@map("diagnostic_templates")
}

model DiagnosticSection {
  id         String   @id @default(uuid())
  templateId String
  title      String
  order      Int
  createdAt  DateTime @default(now())

  // Relations
  template  DiagnosticTemplate   @relation(fields: [templateId], references: [id], onDelete: Cascade)
  questions DiagnosticQuestion[]
  scores    AssessmentScore[]

  @@index([templateId])
  @@map("diagnostic_sections")
}

enum QuestionType {
  BOOLEAN // Sim/Não
  SCORE   // 1-5 scale
}

enum QuestionSource {
  MANUAL
  AI
}

model DiagnosticQuestion {
  id                     String         @id @default(uuid())
  sectionId              String
  text                   String
  type                   QuestionType
  weight                 Float          @default(1.0)
  reference              String? // Referência normativa (ex: "NR-12.153")
  requiresJustification  Boolean        @default(false)
  requiresEvidence       Boolean        @default(false)
  source                 QuestionSource @default(MANUAL)
  versionOf              String? // UUID da pergunta original se for versão
  approved               Boolean        @default(false)
  active                 Boolean        @default(true)
  createdAt              DateTime       @default(now())

  // Relations
  section DiagnosticSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers AssessmentAnswer[]

  @@index([sectionId])
  @@index([approved])
  @@map("diagnostic_questions")
}

// ============================================
// LEGACY IMSST SYSTEM (manter compatibilidade)
// ============================================

model IMSSTDimension {
  id          String   @id @default(uuid())
  name        String
  description String?
  order       Int
  createdAt   DateTime @default(now())

  @@map("imsst_dimensions")
}

enum AssessmentStatus {
  DRAFT
  IN_PROGRESS
  SUBMITTED
  SCORED
  COMPLETED
}

model Assessment {
  id           String           @id @default(uuid())
  companyId    String
  templateId   String? // Link to DiagnosticTemplate
  createdBy    String // Supabase Auth user ID
  title        String
  description  String?
  status       AssessmentStatus @default(DRAFT)
  overallScore Float? // 0-100
  overallLevel Int? // 1-5 IMSST maturity level
  startedAt    DateTime?
  submittedAt  DateTime?
  scoredAt     DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  company     Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  template    DiagnosticTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)
  answers     AssessmentAnswer[]
  scores      AssessmentScore[]
  findings    Finding[]
  evidences   Evidence[]
  actionPlans ActionPlan[]

  @@index([companyId])
  @@index([templateId])
  @@index([createdBy])
  @@map("assessments")
}

model AssessmentAnswer {
  id            String   @id @default(uuid())
  assessmentId  String
  questionId    String
  userId        String // Supabase Auth user ID
  value         Float // 0 (Não) ou 1 (Sim) para BOOLEAN; 1-5 para SCORE
  justification String?
  evidenceUrls  String[] // Array de URLs de evidências no Supabase Storage (deprecated - use evidences relation)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  assessment Assessment         @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  question   DiagnosticQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  evidences  Evidence[]         // Evidências anexadas a esta resposta

  @@unique([assessmentId, questionId])
  @@index([assessmentId])
  @@index([userId])
  @@map("assessment_answers")
}

model AssessmentScore {
  id            String   @id @default(uuid())
  assessmentId  String
  sectionId     String // Link to DiagnosticSection
  rawScore      Float // Soma dos pontos
  weightedScore Float // Score ponderado 0-100
  level         Int // 1-5 maturity level
  createdAt     DateTime @default(now())

  // Relations
  assessment Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  section    DiagnosticSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, sectionId])
  @@index([assessmentId])
  @@map("assessment_scores")
}

// ============================================
// FINDINGS (ACHADOS)
// ============================================

enum FindingSeverity {
  HIGH   // Alta (Não Conformidade crítica)
  MEDIUM // Média (Oportunidade de melhoria)
  LOW    // Baixa (Observação)
}

model Finding {
  id            String          @id @default(uuid())
  assessmentId  String
  sectionTitle  String
  questionText  String
  questionType  QuestionType
  value         Float // Valor da resposta que gerou o achado
  reference     String? // Referência normativa
  justification String? // Justificativa do usuário
  severity      FindingSeverity
  evidenceCount Int             @default(0)
  createdAt     DateTime        @default(now())

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([severity])
  @@map("findings")
}

// ============================================
// EVIDENCE (EVIDÊNCIAS)
// ============================================

model Evidence {
  id           String   @id @default(uuid())
  assessmentId String
  answerId     String? // Link para resposta específica (opcional)
  fileName     String
  fileUrl      String // URL no Supabase Storage
  fileSize     Int // Tamanho em bytes
  mimeType     String
  uploadedBy   String // Supabase Auth user ID
  uploadedAt   DateTime @default(now())

  // Relations
  assessment Assessment        @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  answer     AssessmentAnswer? @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([answerId])
  @@map("evidences")
}

// ============================================
// ACTION PLANS
// ============================================

enum ActionStatus {
  PENDING
  IN_PROGRESS
  DONE
  CANCELLED
}

model ActionPlan {
  id           String       @id @default(uuid())
  assessmentId String
  companyId    String
  title        String
  description  String
  reference    String? // Referência normativa relacionada
  ownerUserId  String? // Supabase Auth user ID do responsável
  dueDate      DateTime?
  priority     Int          @default(2) // 1=High, 2=Medium, 3=Low
  status       ActionStatus @default(PENDING)
  createdBy    String // Supabase Auth user ID
  aiGenerated  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  assessment Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([assessmentId])
  @@index([companyId])
  @@index([status])
  @@index([priority])
  @@map("action_plans")
}

// ============================================
// EMPLOYEE MANAGEMENT
// ============================================

enum Gender {
  MALE      // Masculino
  FEMALE    // Feminino
  OTHER     // Outro
}

enum MaritalStatus {
  SINGLE    // Solteiro(a)
  MARRIED   // Casado(a)
  DIVORCED  // Divorciado(a)
  WIDOWED   // Viúvo(a)
  OTHER     // Outro
}

enum ContractType {
  CLT       // Consolidação das Leis do Trabalho
  INTERN    // Estágio
  OUTSOURCED // Terceirizado
  TEMPORARY // Temporário
  AUTONOMOUS // Autônomo
}

model Employee {
  id        String   @id @default(uuid())
  companyId String
  userId    String?  // Optional: linked Supabase Auth user (if employee has system access)

  // Identificação Civil
  fullName      String
  cpf           String
  birthDate     DateTime
  gender        Gender?
  maritalStatus MaritalStatus?
  nationality   String         @default("Brasileira")

  // Contato
  email                String
  phone                String?
  emergencyContactName String?
  emergencyContactPhone String?

  // Vínculo Trabalhista
  employeeNumber String   // Matrícula interna
  admissionDate  DateTime
  contractType   ContractType
  workSchedule   String?  // Jornada/turno (ex: "8h às 17h", "Turno A")
  unit           String?  // Unidade/obra
  department     String?  // Setor/área/linha
  position       String   // Cargo/função
  cboCode        String?  // Código CBO
  supervisor     String?  // Superior imediato

  // Metadata
  status    MembershipStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  membership Membership?

  @@unique([companyId, cpf])
  @@unique([companyId, employeeNumber])
  @@unique([companyId, userId]) // Ensure one employee record per user per company
  @@index([companyId])
  @@index([userId])
  @@map("employees")
}

// ============================================
// AUDIT & LOGGING
// ============================================

model AuditLog {
  id        String   @id @default(uuid())
  userId    String // Supabase Auth user ID
  companyId String?
  action    String // e.g., "CREATE_ASSESSMENT", "UPDATE_USER_ROLE"
  entity    String? // e.g., "assessment", "user"
  entityId  String?
  metadata  Json? // Additional context
  createdAt DateTime @default(now())

  // Relations
  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([companyId])
  @@index([createdAt])
  @@map("audit_logs")
}

// ============================================
// RAG SYSTEM - Knowledge Base & Embeddings
// ============================================

// MTE Standards (Normas Regulamentadoras)
model MteStandard {
  id           String   @id @default(uuid())
  nrNumber     String // e.g., "NR-12", "NR-35"
  title        String // e.g., "Segurança em Máquinas e Equipamentos"
  section      String   @default("") // Specific section/item (e.g., "12.38", "35.4.5.1"), empty string = full standard
  content      String   @db.Text // Full text content
  version      String // e.g., "2022.1"
  sourceUrl    String? // Official MTE URL
  lastVerified DateTime @default(now()) // Last time we verified the content
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  embeddings KnowledgeEmbedding[]

  @@unique([nrNumber, section, version])
  @@index([nrNumber])
  @@map("mte_standards")
}

enum EmbeddingSourceType {
  TEMPLATE
  ASSESSMENT
  ACTION_PLAN
  MTE_STANDARD
  ISO_STANDARD
  BEST_PRACTICE
}

// Vector embeddings for RAG search
model KnowledgeEmbedding {
  id         String              @id @default(uuid())
  sourceType EmbeddingSourceType
  sourceId   String // ID of the template, assessment, or standard
  content    String              @db.Text // Original text content
  metadata   Json? // Additional context (e.g., company sector, template type)
  embedding  Unsupported("vector(1536)")? // OpenAI ada-002 embedding dimension
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  // Relations (optional, for referencing source)
  mteStandard   MteStandard? @relation(fields: [mteStandardId], references: [id], onDelete: Cascade)
  mteStandardId String?

  @@index([sourceType])
  @@index([sourceId])
  @@map("knowledge_embeddings")
}

// ============================================
// AI FEEDBACK SYSTEM
// ============================================

enum FeedbackType {
  POSITIVE
  NEGATIVE
}

enum FeedbackStatus {
  PENDING     // Aguardando processamento
  PROCESSED   // Já foi processado (adicionado à base de conhecimento)
  REVIEWED    // Revisado manualmente
  IGNORED     // Marcado para ignorar
}

model AIFeedback {
  id          String         @id @default(uuid())
  messageId   String         @unique // ID único da conversa
  userId      String?        // Usuário que deu o feedback (opcional para analytics)
  userQuery   String         @db.Text // Pergunta original do usuário
  aiResponse  String         @db.Text // Resposta da IA que foi avaliada
  feedback    FeedbackType   // POSITIVE ou NEGATIVE
  status      FeedbackStatus @default(PENDING)
  processedAt DateTime?      // Quando foi processado
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Metadata opcional para análise
  metadata    Json? // Pode incluir: modelo usado, tempo de resposta, contexto RAG, etc.

  @@index([feedback])
  @@index([status])
  @@index([userId])
  @@index([createdAt])
  @@map("ai_feedbacks")
}
