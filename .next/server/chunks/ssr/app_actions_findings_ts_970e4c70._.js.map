{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/findings.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { FindingSeverity } from '@prisma/client'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\nexport async function generateFindings(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: {\n              include: {\n                section: true\n              }\n            }\n          }\n        }\n      }\n    })\n\n    if (!assessment || !assessment.template) {\n      return { error: 'Diagnóstico ou template não encontrado' }\n    }\n\n    // Verificar permissões\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para gerar achados neste diagnóstico' }\n    }\n\n    // Limpar achados existentes deste assessment\n    await prisma.finding.deleteMany({\n      where: { assessmentId }\n    })\n\n    const findings = []\n\n    // Regra: gerar achado para boolean=0 ou score≤3\n    for (const answer of assessment.answers) {\n      const isNonConformant = \n        (answer.question.type === 'BOOLEAN' && answer.value === 0) ||\n        (answer.question.type === 'SCORE' && answer.value <= 3)\n\n      if (isNonConformant) {\n        // Determinar severidade baseada no valor\n        let severity: FindingSeverity\n        if (answer.question.type === 'BOOLEAN' && answer.value === 0) {\n          severity = 'HIGH' // Não conformidade crítica\n        } else if (answer.value <= 2) {\n          severity = 'HIGH' // Muito baixo\n        } else if (answer.value === 3) {\n          severity = 'MEDIUM' // Oportunidade de melhoria\n        } else {\n          severity = 'LOW' // Observação\n        }\n\n        const finding = await prisma.finding.create({\n          data: {\n            assessmentId,\n            sectionTitle: answer.question.section.title,\n            questionText: answer.question.text,\n            questionType: answer.question.type,\n            value: answer.value,\n            reference: answer.question.reference,\n            justification: answer.justification,\n            severity\n          }\n        })\n\n        findings.push(finding)\n      }\n    }\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true, findingsCount: findings.length }\n  } catch (error) {\n    console.error('Erro ao gerar achados:', error)\n    return { error: 'Erro ao gerar achados' }\n  }\n}\n\nexport async function getFindings(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    const findings = await prisma.finding.findMany({\n      where: { assessmentId },\n      orderBy: [\n        { severity: 'desc' },\n        { createdAt: 'asc' }\n      ]\n    })\n\n    return { success: true, findings }\n  } catch (error) {\n    console.error('Erro ao buscar achados:', error)\n    return { error: 'Erro ao buscar achados' }\n  }\n}\n\nexport async function deleteFinding(findingId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Buscar o finding para verificar permissões\n    const finding = await prisma.finding.findUnique({\n      where: { id: findingId },\n      include: {\n        assessment: {\n          select: { companyId: true }\n        }\n      }\n    })\n\n    if (!finding) {\n      return { error: 'Achado não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: finding.assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para excluir este achado' }\n    }\n\n    await prisma.finding.delete({\n      where: { id: findingId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir achado:', error)\n    return { error: 'Erro ao excluir achado' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}