{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/assessments.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, getUserRole, isPlatformAdmin } from '@/lib/auth'\nimport { AssessmentStatus } from '@prisma/client'\n\nexport async function createAssessment(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const role = await getUserRole(user.id, companyId)\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n    return { error: 'Sem permissão para criar diagnósticos' }\n  }\n\n  const title = formData.get('title') as string\n  const description = formData.get('description') as string\n  const templateId = formData.get('templateId') as string | null\n\n  if (!title) {\n    return { error: 'Título é obrigatório' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.create({\n      data: {\n        companyId,\n        createdBy: user.id,\n        title,\n        description,\n        templateId: templateId || undefined,\n        status: 'DRAFT',\n      }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true, assessmentId: assessment.id }\n  } catch (error) {\n    console.error('Erro ao criar diagnóstico:', error)\n    return { error: 'Erro ao criar diagnóstico' }\n  }\n}\n\nexport async function getAssessments(companyId?: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n    let assessments\n\n    if (isAdmin) {\n      assessments = await prisma.assessment.findMany({\n        where: companyId ? { companyId } : undefined,\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = memberships.map(m => m.companyId)\n\n      if (companyId && !companyIds.includes(companyId)) {\n        return { error: 'Sem permissão para acessar diagnósticos desta empresa' }\n      }\n\n      assessments = await prisma.assessment.findMany({\n        where: {\n          companyId: companyId ? companyId : { in: companyIds }\n        },\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    return { success: true, assessments }\n  } catch (error) {\n    console.error('Erro ao buscar diagnósticos:', error)\n    return { error: 'Erro ao buscar diagnósticos' }\n  }\n}\n\nexport async function getAssessmentById(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        company: true,\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: true\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true,\n            evidences: true\n          }\n        },\n        scores: true,\n        findings: true,\n        evidences: true,\n        actionPlans: true,\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    // Buscar informações do usuário criador\n    let createdByUser = null\n    try {\n      const { createClient } = await import('@/lib/supabase/server')\n      const supabase = await createClient()\n      const { data: userData } = await supabase.auth.admin.getUserById(assessment.createdBy)\n      createdByUser = userData?.user ? {\n        id: userData.user.id,\n        email: userData.user.email || 'Desconhecido',\n        name: userData.user.user_metadata?.name || userData.user.email?.split('@')[0] || 'Usuário'\n      } : null\n    } catch (error) {\n      console.error('Erro ao buscar dados do usuário criador:', error)\n    }\n\n    return { success: true, assessment: { ...assessment, createdByUser } }\n  } catch (error) {\n    console.error('Erro ao buscar diagnóstico:', error)\n    return { error: 'Erro ao buscar diagnóstico' }\n  }\n}\n\nexport async function getTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: {\n        status: 'PUBLISHED'\n      },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: {\n                active: true,\n                approved: true\n              },\n              orderBy: {\n                createdAt: 'asc'\n              }\n            }\n          },\n          orderBy: {\n            order: 'asc'\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function saveAnswer(\n  assessmentId: string, \n  questionId: string, \n  value: number,\n  justification?: string,\n  evidenceUrls?: string[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    if (assessment.status === 'COMPLETED') {\n      return { error: 'Este diagnóstico já foi finalizado' }\n    }\n\n    const answer = await prisma.assessmentAnswer.upsert({\n      where: {\n        assessmentId_questionId: {\n          assessmentId,\n          questionId,\n        }\n      },\n      create: {\n        assessmentId,\n        questionId,\n        userId: user.id,\n        value,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      },\n      update: {\n        value,\n        userId: user.id,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      }\n    })\n\n    if (assessment.status === 'DRAFT') {\n      await prisma.assessment.update({\n        where: { id: assessmentId },\n        data: {\n          status: 'IN_PROGRESS',\n          startedAt: new Date(),\n        }\n      })\n    }\n\n    return { success: true, answer }\n  } catch (error) {\n    console.error('Erro ao salvar resposta:', error)\n    return { error: 'Erro ao salvar resposta' }\n  }\n}\n\nexport async function submitAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true\n          }\n        }\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (!assessment.template) {\n      return { error: 'Este diagnóstico não possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para submeter este diagnóstico' }\n    }\n\n    // Calcular scores por seção usando o novo schema\n    const totalQuestions = assessment.template.sections.reduce(\n      (sum, section) => sum + section.questions.length, \n      0\n    )\n    \n    if (assessment.answers.length < totalQuestions) {\n      return { error: `Por favor, responda todas as ${totalQuestions} perguntas antes de finalizar` }\n    }\n\n    const sectionScores: { sectionId: string; rawScore: number; weightedScore: number; level: number }[] = []\n\n    for (const section of assessment.template.sections) {\n      const sectionAnswers = assessment.answers.filter(\n        a => section.questions.some(q => q.id === a.questionId)\n      )\n\n      if (sectionAnswers.length === 0) continue\n\n      // Calcular score ponderado da seção\n      let rawScore = 0\n      let totalWeight = 0\n\n      for (const answer of sectionAnswers) {\n        const question = section.questions.find(q => q.id === answer.questionId)\n        if (!question) continue\n\n        rawScore += answer.value * question.weight\n        totalWeight += question.weight * (question.type === 'BOOLEAN' ? 1 : 5)\n      }\n\n      const weightedScore = totalWeight > 0 ? (rawScore / totalWeight) * 100 : 0\n      const level = Math.min(5, Math.max(1, Math.ceil(weightedScore / 20)))\n\n      sectionScores.push({ sectionId: section.id, rawScore, weightedScore, level })\n\n      await prisma.assessmentScore.upsert({\n        where: {\n          assessmentId_sectionId: {\n            assessmentId,\n            sectionId: section.id,\n          }\n        },\n        create: {\n          assessmentId,\n          sectionId: section.id,\n          rawScore,\n          weightedScore,\n          level,\n        },\n        update: {\n          rawScore,\n          weightedScore,\n          level,\n        }\n      })\n    }\n\n    // Calcular overall score (média ponderada de todas as seções)\n    const overallScore = sectionScores.length > 0 \n      ? sectionScores.reduce((sum, s) => sum + s.weightedScore, 0) / sectionScores.length \n      : 0\n    const overallLevel = Math.min(5, Math.max(1, Math.ceil(overallScore / 20)))\n\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: {\n        status: 'SCORED',\n        submittedAt: new Date(),\n        scoredAt: new Date(),\n        overallScore,\n        overallLevel,\n      }\n    })\n\n    // Gerar achados automaticamente baseados nas respostas não conformes\n    const { generateFindings } = await import('./findings')\n    await generateFindings(assessmentId)\n\n    revalidatePath('/dashboard/diagnostics')\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao submeter diagnóstico:', error)\n    return { error: 'Erro ao submeter diagnóstico' }\n  }\n}\n\nexport async function deleteAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, assessment.companyId)\n\n    if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n      return { error: 'Sem permissão para deletar este diagnóstico' }\n    }\n\n    await prisma.assessment.delete({\n      where: { id: assessmentId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar diagnóstico:', error)\n    return { error: 'Erro ao deletar diagnóstico' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/findings.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { FindingSeverity } from '@prisma/client'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\nexport async function generateFindings(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: {\n              include: {\n                section: true\n              }\n            }\n          }\n        }\n      }\n    })\n\n    if (!assessment || !assessment.template) {\n      return { error: 'Diagnóstico ou template não encontrado' }\n    }\n\n    // Verificar permissões\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para gerar achados neste diagnóstico' }\n    }\n\n    // Limpar achados existentes deste assessment\n    await prisma.finding.deleteMany({\n      where: { assessmentId }\n    })\n\n    const findings = []\n\n    // Regra: gerar achado para boolean=0 ou score≤3\n    for (const answer of assessment.answers) {\n      const isNonConformant = \n        (answer.question.type === 'BOOLEAN' && answer.value === 0) ||\n        (answer.question.type === 'SCORE' && answer.value <= 3)\n\n      if (isNonConformant) {\n        // Determinar severidade baseada no valor\n        let severity: FindingSeverity\n        if (answer.question.type === 'BOOLEAN' && answer.value === 0) {\n          severity = 'HIGH' // Não conformidade crítica\n        } else if (answer.value <= 2) {\n          severity = 'HIGH' // Muito baixo\n        } else if (answer.value === 3) {\n          severity = 'MEDIUM' // Oportunidade de melhoria\n        } else {\n          severity = 'LOW' // Observação\n        }\n\n        const finding = await prisma.finding.create({\n          data: {\n            assessmentId,\n            sectionTitle: answer.question.section.title,\n            questionText: answer.question.text,\n            questionType: answer.question.type,\n            value: answer.value,\n            reference: answer.question.reference,\n            justification: answer.justification,\n            severity\n          }\n        })\n\n        findings.push(finding)\n      }\n    }\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true, findingsCount: findings.length }\n  } catch (error) {\n    console.error('Erro ao gerar achados:', error)\n    return { error: 'Erro ao gerar achados' }\n  }\n}\n\nexport async function getFindings(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    const findings = await prisma.finding.findMany({\n      where: { assessmentId },\n      orderBy: [\n        { severity: 'desc' },\n        { createdAt: 'asc' }\n      ]\n    })\n\n    return { success: true, findings }\n  } catch (error) {\n    console.error('Erro ao buscar achados:', error)\n    return { error: 'Erro ao buscar achados' }\n  }\n}\n\nexport async function deleteFinding(findingId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Buscar o finding para verificar permissões\n    const finding = await prisma.finding.findUnique({\n      where: { id: findingId },\n      include: {\n        assessment: {\n          select: { companyId: true }\n        }\n      }\n    })\n\n    if (!finding) {\n      return { error: 'Achado não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: finding.assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para excluir este achado' }\n    }\n\n    await prisma.finding.delete({\n      where: { id: findingId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir achado:', error)\n    return { error: 'Erro ao excluir achado' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 803, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/evidence.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser } from '@/lib/auth'\nimport { revalidatePath } from 'next/cache'\n\nexport async function uploadEvidence(\n  assessmentId: string,\n  answerId: string,\n  formData: FormData\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar autorização multi-tenant\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        answers: {\n          where: { id: answerId },\n          select: { id: true }\n        }\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.answers.length === 0) {\n      return { error: 'Resposta não encontrada neste diagnóstico' }\n    }\n\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!membership) {\n      return { error: 'Sem permissão para fazer upload de evidências neste diagnóstico' }\n    }\n\n    const file = formData.get('file') as File\n    if (!file) {\n      return { error: 'Nenhum arquivo fornecido' }\n    }\n\n    // Validar tamanho (máx 10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      return { error: 'Arquivo muito grande. Máximo: 10MB' }\n    }\n\n    // Validar tipo\n    const allowedTypes = [\n      'image/jpeg',\n      'image/png',\n      'image/gif',\n      'image/webp',\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ]\n    \n    if (!allowedTypes.includes(file.type)) {\n      return { error: 'Tipo de arquivo não permitido. Use imagens, PDF ou documentos Office.' }\n    }\n\n    // Converter para base64 (temporário - posteriormente migrar para Supabase Storage)\n    const bytes = await file.arrayBuffer()\n    const buffer = Buffer.from(bytes)\n    const base64 = buffer.toString('base64')\n    const dataUrl = `data:${file.type};base64,${base64}`\n\n    // Salvar no banco\n    const evidence = await prisma.evidence.create({\n      data: {\n        assessmentId,\n        answerId,\n        fileName: file.name,\n        fileUrl: dataUrl, // Temporário: será substituído por URL do Supabase Storage\n        fileSize: file.size,\n        mimeType: file.type,\n        uploadedBy: user.id\n      }\n    })\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    return { success: true, evidence }\n  } catch (error) {\n    console.error('Erro ao fazer upload de evidência:', error)\n    return { error: 'Erro ao fazer upload do arquivo' }\n  }\n}\n\nexport async function deleteEvidence(evidenceId: string, assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar autorização multi-tenant PRIMEIRO\n    const evidence = await prisma.evidence.findUnique({\n      where: { id: evidenceId },\n      include: {\n        assessment: {\n          select: { companyId: true }\n        }\n      }\n    })\n\n    if (!evidence) {\n      return { error: 'Evidência não encontrada' }\n    }\n\n    // Garantir que o usuário tem membership ativa na empresa\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: evidence.assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!membership) {\n      return { error: 'Sem permissão para excluir esta evidência' }\n    }\n\n    // Verificar se pode deletar (apenas o próprio uploader ou admin/engineer)\n    if (evidence.uploadedBy !== user.id) {\n      if (!['COMPANY_ADMIN', 'ENGINEER'].includes(membership.role)) {\n        return { error: 'Apenas administradores ou engenheiros podem excluir evidências de outros usuários' }\n      }\n    }\n\n    // TODO: Se estiver usando Supabase Storage, deletar arquivo de lá também\n\n    await prisma.evidence.delete({\n      where: { id: evidenceId }\n    })\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir evidência:', error)\n    return { error: 'Erro ao excluir evidência' }\n  }\n}\n\nexport async function getEvidencesByAnswer(answerId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar autorização multi-tenant\n    const answer = await prisma.assessmentAnswer.findUnique({\n      where: { id: answerId },\n      include: {\n        assessment: {\n          select: { companyId: true }\n        }\n      }\n    })\n\n    if (!answer) {\n      return { error: 'Resposta não encontrada' }\n    }\n\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: answer.assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!membership) {\n      return { error: 'Sem permissão para visualizar evidências deste diagnóstico' }\n    }\n\n    const evidences = await prisma.evidence.findMany({\n      where: { answerId },\n      orderBy: { uploadedAt: 'desc' }\n    })\n\n    return { success: true, evidences }\n  } catch (error) {\n    console.error('Erro ao buscar evidências:', error)\n    return { error: 'Erro ao buscar evidências' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1061, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/action-plans.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\ninterface ActionPlanItem {\n  title: string\n  description: string\n  priority: 'HIGH' | 'MEDIUM' | 'LOW'\n  estimatedDays: number\n  reference: string | null\n}\n\nconst priorityMap: Record<'HIGH' | 'MEDIUM' | 'LOW', number> = {\n  HIGH: 1,\n  MEDIUM: 2,\n  LOW: 3\n}\n\nexport async function saveActionPlans(\n  assessmentId: string,\n  executiveSummary: string,\n  actionPlans: ActionPlanItem[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true, status: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.status !== 'SCORED') {\n      return { error: 'Diagnóstico precisa estar finalizado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para salvar plano de ação deste diagnóstico' }\n    }\n\n    // Deletar planos de ação existentes (se houver)\n    await prisma.actionPlan.deleteMany({\n      where: { assessmentId, aiGenerated: true }\n    })\n\n    // Criar novos planos de ação\n    const createdPlans = await Promise.all(\n      actionPlans.map((plan, index) =>\n        prisma.actionPlan.create({\n          data: {\n            assessmentId,\n            companyId: assessment.companyId,\n            title: plan.title,\n            description: `${executiveSummary}\\n\\n---\\n\\n${plan.description}`,\n            priority: priorityMap[plan.priority],\n            dueDate: new Date(Date.now() + plan.estimatedDays * 24 * 60 * 60 * 1000),\n            status: 'PENDING',\n            reference: plan.reference,\n            createdBy: user.id,\n            ownerUserId: user.id,\n            aiGenerated: true\n          }\n        })\n      )\n    )\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true, count: createdPlans.length, executiveSummary }\n  } catch (error) {\n    console.error('Erro ao salvar planos de ação:', error)\n    return { error: 'Erro ao salvar planos de ação' }\n  }\n}\n\nconst reversePriorityMap: Record<number, 'HIGH' | 'MEDIUM' | 'LOW'> = {\n  1: 'HIGH',\n  2: 'MEDIUM',\n  3: 'LOW'\n}\n\nexport async function getActionPlans(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    const actionPlans = await prisma.actionPlan.findMany({\n      where: { assessmentId, aiGenerated: true },\n      orderBy: [\n        { priority: 'asc' }, // 1=HIGH vem primeiro\n        { createdAt: 'asc' }\n      ]\n    })\n\n    // Extrair executive summary da primeira action plan (se existir)\n    let executiveSummary = ''\n    const formattedPlans = actionPlans.map(plan => {\n      const parts = plan.description.split('\\n\\n---\\n\\n')\n      if (parts.length > 1 && !executiveSummary) {\n        executiveSummary = parts[0]\n      }\n      \n      return {\n        ...plan,\n        priority: reversePriorityMap[plan.priority] || 'MEDIUM',\n        description: parts.length > 1 ? parts[1] : plan.description\n      }\n    })\n\n    return { \n      success: true, \n      actionPlans: formattedPlans,\n      executiveSummary \n    }\n  } catch (error) {\n    console.error('Erro ao buscar planos de ação:', error)\n    return { error: 'Erro ao buscar planos de ação' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1248, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/diagnostics/%5Bid%5D/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '004c5425eaeb09c9b625d178f54fab32e76ca96d31'} from 'ACTIONS_MODULE0'\nexport {login as '4017acd428bfe1e6ac9c7fe0671bb893857f7a0720'} from 'ACTIONS_MODULE0'\nexport {signup as '40650c85758da6451f62f5d11d25aa00a5e3e0635a'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '40ce0fdaaf41b6cb1dfaeb0abff18582098df1b3d7'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '40f2df53b5bae87659af86ab95605b0c53c1b51f26'} from 'ACTIONS_MODULE0'\nexport {getTemplates as '002be6816138687c04564e44e776844387addcb398'} from 'ACTIONS_MODULE1'\nexport {deleteAssessment as '4080b5c17eb960e9d558b32c5370c9f56e4efa45e0'} from 'ACTIONS_MODULE1'\nexport {getAssessments as '40bc29c3ffadfd93548a3e57c5edf9c4cd9088e5f8'} from 'ACTIONS_MODULE1'\nexport {submitAssessment as '40bca5172ccb3661660e6a49ea3c5e21e7c9cc4caf'} from 'ACTIONS_MODULE1'\nexport {getAssessmentById as '40d2dd25ad9ac0fbee1bf7c894980a640c432931e7'} from 'ACTIONS_MODULE1'\nexport {createAssessment as '6016b00cca2d8f7b4fd6c11d307fcf41775a38eb28'} from 'ACTIONS_MODULE1'\nexport {saveAnswer as '7cece1020a4afed8bae8ee3ce53e12985bcbffcb79'} from 'ACTIONS_MODULE1'\nexport {deleteFinding as '405dbc408f933ef2cf6b7741c65b1f50b52a650f21'} from 'ACTIONS_MODULE2'\nexport {getFindings as '406d39791438165335202a824a0d8dd9deb90f07dc'} from 'ACTIONS_MODULE2'\nexport {generateFindings as '40c202e0fd01f19fcb9c3bfb6794d9b100a323be28'} from 'ACTIONS_MODULE2'\nexport {uploadEvidence as '70c50e028033d974866984044da038ecc93667a943'} from 'ACTIONS_MODULE3'\nexport {deleteEvidence as '600e1abdda01d2473c07bd0ac5290871cf72eb6d5e'} from 'ACTIONS_MODULE3'\nexport {saveActionPlans as '70af039692b600dadafac6fe7871b2ee2fed95b1c1'} from 'ACTIONS_MODULE4'\nexport {getActionPlans as '4024e6f621d820af5c894ba7e74c802f095b273793'} from 'ACTIONS_MODULE4'\n"],"names":[],"mappings":";AAAA;AAKA;AAOA;AAGA;AAEA","debugId":null}},
    {"offset": {"line": 1339, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/diagnostic-tabs.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const DiagnosticTabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call DiagnosticTabs() from the server but DiagnosticTabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/diagnostic-tabs.tsx <module evaluation>\",\n    \"DiagnosticTabs\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,iBAAiB,IAAA,wQAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,0EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1353, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/diagnostic-tabs.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const DiagnosticTabs = registerClientReference(\n    function() { throw new Error(\"Attempted to call DiagnosticTabs() from the server but DiagnosticTabs is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/diagnostic-tabs.tsx\",\n    \"DiagnosticTabs\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,iBAAiB,IAAA,wQAAuB,EACjD;IAAa,MAAM,IAAI,MAAM;AAA4O,GACzQ,sDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1367, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1375, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/%5Bid%5D/page.tsx"],"sourcesContent":["import { notFound } from 'next/navigation'\nimport { getAssessmentById } from '@/app/actions/assessments'\nimport { DiagnosticTabs } from '@/components/dashboard/diagnostic-tabs'\n\nexport default async function DiagnosticDetailPage({ \n  params \n}: { \n  params: { id: string } \n}) {\n  const result = await getAssessmentById(params.id)\n\n  if (result.error || !result.assessment) {\n    notFound()\n  }\n\n  return (\n    <div className=\"p-8 space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold text-primary\">\n          {result.assessment.title}\n        </h1>\n      </div>\n\n      <DiagnosticTabs assessment={result.assessment} />\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;AACA;;;;;AAEe,eAAe,qBAAqB,EACjD,MAAM,EAGP;IACC,MAAM,SAAS,MAAM,IAAA,kJAAiB,EAAC,OAAO,EAAE;IAEhD,IAAI,OAAO,KAAK,IAAI,CAAC,OAAO,UAAU,EAAE;QACtC,IAAA,iMAAQ;IACV;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;0BACC,cAAA,8OAAC;oBAAG,WAAU;8BACX,OAAO,UAAU,CAAC,KAAK;;;;;;;;;;;0BAI5B,8OAAC,gKAAc;gBAAC,YAAY,OAAO,UAAU;;;;;;;;;;;;AAGnD","debugId":null}}]
}