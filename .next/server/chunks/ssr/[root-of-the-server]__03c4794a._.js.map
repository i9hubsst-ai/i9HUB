{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/companies.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role } from '@prisma/client'\n\nexport async function createCompany(formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem criar empresas' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.create({\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao criar empresa:', error)\n    return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n  }\n}\n\nexport async function updateCompany(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Sem permissão para editar esta empresa' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.update({\n      where: { id: companyId },\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao atualizar empresa:', error)\n    return { error: 'Erro ao atualizar empresa' }\n  }\n}\n\nexport async function deleteCompany(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem deletar empresas' }\n  }\n\n  try {\n    await prisma.company.delete({\n      where: { id: companyId }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar empresa:', error)\n    return { error: 'Erro ao deletar empresa' }\n  }\n}\n\nexport async function getCompanies() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let companies\n\n    if (isAdmin) {\n      companies = await prisma.company.findMany({\n        include: {\n          _count: {\n            select: {\n              memberships: true,\n              assessments: true,\n              actionPlans: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        include: {\n          company: {\n            include: {\n              _count: {\n                select: {\n                  memberships: true,\n                  assessments: true,\n                  actionPlans: true,\n                }\n              }\n            }\n          }\n        }\n      })\n\n      companies = memberships.map(m => m.company)\n    }\n\n    return { success: true, companies }\n  } catch (error) {\n    console.error('Erro ao buscar empresas:', error)\n    return { error: 'Erro ao buscar empresas' }\n  }\n}\n\nexport async function getCompanyById(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar esta empresa' }\n  }\n\n  try {\n    const company = await prisma.company.findUnique({\n      where: { id: companyId },\n      include: {\n        memberships: {\n          include: {\n            company: true\n          }\n        },\n        assessments: {\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 5\n        },\n        _count: {\n          select: {\n            memberships: true,\n            assessments: true,\n            actionPlans: true,\n          }\n        }\n      }\n    })\n\n    if (!company) {\n      return { error: 'Empresa não encontrada' }\n    }\n\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao buscar empresa:', error)\n    return { error: 'Erro ao buscar empresa' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/companies/new/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '00a5ee40487a794cf3de9757937d225488e1940bc6'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '407498a229d6e88c79a18aed9999686e3d982dd47c'} from 'ACTIONS_MODULE0'\nexport {login as '407cc9c953561b157cdc32d732b174c9b3729f8bc7'} from 'ACTIONS_MODULE0'\nexport {signup as '408394902f333d9ee6aeef2b5b649b5bf82aed622c'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '40dd34a7c5329f1fcd2a0a3f6c2b855b88f5487ac8'} from 'ACTIONS_MODULE0'\nexport {createCompany as '40a8960a707d60fb10e040648605ccd89037308905'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAKA","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/companies/new/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/companies/new/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/companies/new/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/companies/new/page.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/dashboard/companies/new/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/companies/new/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;uCACe,IAAA,wQAAuB,EAClC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}