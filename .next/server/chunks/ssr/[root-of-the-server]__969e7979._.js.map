{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/templates.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\nimport { TemplateStatus, QuestionType } from '@prisma/client'\n\nexport async function getAllTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true },\n              orderBy: { createdAt: 'asc' }\n            }\n          },\n          orderBy: { order: 'asc' }\n        },\n        _count: {\n          select: {\n            sections: true,\n            assessments: true\n          }\n        }\n      },\n      orderBy: { createdAt: 'desc' }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function getTemplateById(templateId: string) {\n  try {\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true },\n              orderBy: { createdAt: 'asc' }\n            }\n          },\n          orderBy: { order: 'asc' }\n        },\n        _count: {\n          select: { assessments: true }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    return { success: true, template }\n  } catch (error) {\n    console.error('Erro ao buscar template:', error)\n    return { error: 'Erro ao buscar template' }\n  }\n}\n\nexport async function updateTemplateStatus(templateId: string, status: TemplateStatus) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem alterar o status de templates' }\n  }\n\n  try {\n    await prisma.diagnosticTemplate.update({\n      where: { id: templateId },\n      data: { status }\n    })\n\n    revalidatePath('/dashboard/templates')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao atualizar status do template:', error)\n    return { error: 'Erro ao atualizar status do template' }\n  }\n}\n\nexport async function deleteTemplate(templateId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem excluir templates' }\n  }\n\n  try {\n    // Verificar se há assessments usando este template\n    const assessmentCount = await prisma.assessment.count({\n      where: { templateId }\n    })\n\n    if (assessmentCount > 0) {\n      return { error: `Não é possível excluir. Existem ${assessmentCount} diagnósticos usando este template.` }\n    }\n\n    await prisma.diagnosticTemplate.delete({\n      where: { id: templateId }\n    })\n\n    revalidatePath('/dashboard/templates')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir template:', error)\n    return { error: 'Erro ao excluir template' }\n  }\n}\n\nexport async function getPublishedTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: { status: 'PUBLISHED' },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        type: true,\n        _count: {\n          select: { sections: true }\n        }\n      },\n      orderBy: { name: 'asc' }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates publicados:', error)\n    return { error: 'Erro ao buscar templates publicados' }\n  }\n}\n\nexport async function publishTemplate(templateId: string) {\n  return updateTemplateStatus(templateId, 'PUBLISHED')\n}\n\nexport async function updateTemplate(\n  templateId: string,\n  data: {\n    name: string\n    description: string\n    sections: Array<{\n      id?: string\n      title: string\n      order: number\n      questions: Array<{\n        id?: string\n        text: string\n        type: string\n        weight: number\n        reference?: string | null\n        requiresJustification: boolean\n        requiresEvidence: boolean\n      }>\n    }>\n  }\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores podem editar templates' }\n  }\n\n  try {\n    // Verificar se template existe\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: { questions: true }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    // Atualizar template e suas seções/perguntas\n    await prisma.$transaction(async (tx) => {\n      // Atualizar informações básicas do template\n      await tx.diagnosticTemplate.update({\n        where: { id: templateId },\n        data: {\n          name: data.name,\n          description: data.description\n        }\n      })\n\n      // IDs de seções e perguntas que devem ser mantidos\n      const sectionIdsToKeep = data.sections.filter(s => s.id).map(s => s.id!)\n      const questionIdsToKeep = data.sections\n        .flatMap(s => s.questions.filter(q => q.id).map(q => q.id!))\n\n      // Deletar seções que foram removidas\n      await tx.diagnosticSection.deleteMany({\n        where: {\n          templateId,\n          id: { notIn: sectionIdsToKeep }\n        }\n      })\n\n      // Processar cada seção\n      for (const section of data.sections) {\n        if (section.id) {\n          // Atualizar seção existente\n          await tx.diagnosticSection.update({\n            where: { id: section.id },\n            data: {\n              title: section.title,\n              order: section.order\n            }\n          })\n\n          // Deletar perguntas removidas desta seção\n          await tx.diagnosticQuestion.deleteMany({\n            where: {\n              sectionId: section.id,\n              id: { notIn: section.questions.filter(q => q.id).map(q => q.id!) }\n            }\n          })\n\n          // Processar perguntas\n          for (const question of section.questions) {\n            if (question.id) {\n              // Atualizar pergunta existente\n              await tx.diagnosticQuestion.update({\n                where: { id: question.id },\n                data: {\n                  text: question.text,\n                  type: question.type as QuestionType,\n                  weight: question.weight,\n                  reference: question.reference,\n                  requiresJustification: question.requiresJustification,\n                  requiresEvidence: question.requiresEvidence\n                }\n              })\n            } else {\n              // Criar nova pergunta\n              await tx.diagnosticQuestion.create({\n                data: {\n                  sectionId: section.id,\n                  text: question.text,\n                  type: question.type as QuestionType,\n                  weight: question.weight,\n                  reference: question.reference,\n                  requiresJustification: question.requiresJustification,\n                  requiresEvidence: question.requiresEvidence\n                }\n              })\n            }\n          }\n        } else {\n          // Criar nova seção com suas perguntas\n          await tx.diagnosticSection.create({\n            data: {\n              templateId,\n              title: section.title,\n              order: section.order,\n              questions: {\n                create: section.questions.map(q => ({\n                  text: q.text,\n                  type: q.type as QuestionType,\n                  weight: q.weight,\n                  reference: q.reference,\n                  requiresJustification: q.requiresJustification,\n                  requiresEvidence: q.requiresEvidence\n                }))\n              }\n            }\n          })\n        }\n      }\n    })\n\n    revalidatePath('/dashboard/templates')\n    revalidatePath(`/dashboard/templates/${templateId}`)\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao atualizar template:', error)\n    return { error: 'Erro ao atualizar template' }\n  }\n}\n\nexport async function applyTemplateToAssessment(assessmentId: string, templateId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o assessment existe e se o usuário tem permissão\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true, status: true, templateId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.status !== 'DRAFT') {\n      return { error: 'Só é possível aplicar template em diagnósticos com status DRAFT' }\n    }\n\n    if (assessment.templateId) {\n      return { error: 'Este diagnóstico já possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para modificar este diagnóstico' }\n    }\n\n    // Buscar o template com seções e perguntas para validação\n    const template = await prisma.diagnosticTemplate.findUnique({\n      where: { id: templateId },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: { active: true }\n            }\n          }\n        }\n      }\n    })\n\n    if (!template) {\n      return { error: 'Template não encontrado' }\n    }\n\n    if (template.status !== 'PUBLISHED') {\n      return { error: 'Apenas templates publicados podem ser aplicados' }\n    }\n\n    // Associar o template ao assessment\n    // As seções e perguntas já existem no template e serão acessadas via relacionamento\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: { templateId }\n    })\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    return { \n      success: true, \n      sectionsCount: template.sections.length,\n      questionsCount: template.sections.reduce((sum, s) => sum + s.questions.length, 0)\n    }\n  } catch (error) {\n    console.error('Erro ao aplicar template:', error)\n    return { error: 'Erro ao aplicar template ao diagnóstico' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/templates/%5Bid%5D/edit/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '00cedfcc92a4d44087e4698f9ddfbc986cbddc47f2'} from 'ACTIONS_MODULE0'\nexport {signup as '402e643d3c7f31ce94b555510ab4277bfbf54e936a'} from 'ACTIONS_MODULE0'\nexport {login as '403251505a1e172fdb97c1deb3aeb0335378d56d29'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '40423aba6059f87938d0389073365c5852a63fdbd7'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '40da1e881a1e596b3a26ee1a98cb7d80d6e6e0ba16'} from 'ACTIONS_MODULE0'\nexport {updateTemplate as '6035685bfd84f446df5c61bf83a0e2ac0f93bdeee4'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAKA","debugId":null}},
    {"offset": {"line": 536, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/templates/%5Bid%5D/edit/template-edit-form.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TemplateEditForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call TemplateEditForm() from the server but TemplateEditForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/templates/[id]/edit/template-edit-form.tsx <module evaluation>\",\n    \"TemplateEditForm\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,wQAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,0FACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 550, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/templates/%5Bid%5D/edit/template-edit-form.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TemplateEditForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call TemplateEditForm() from the server but TemplateEditForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/dashboard/templates/[id]/edit/template-edit-form.tsx\",\n    \"TemplateEditForm\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,wQAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,sEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 564, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 572, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/templates/%5Bid%5D/edit/page.tsx"],"sourcesContent":["import { Metadata } from 'next'\nimport { redirect, notFound } from 'next/navigation'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\nimport { prisma } from '@/lib/prisma'\nimport { TemplateEditForm } from './template-edit-form'\n\nexport const metadata: Metadata = {\n  title: 'Editar Template | i9HUBSST',\n  description: 'Editar template de diagnóstico',\n}\n\nexport default async function EditTemplatePage({ params }: { params: Promise<{ id: string }> }) {\n  const { id } = await params\n  const user = await getCurrentUser()\n  \n  if (!user) {\n    redirect('/auth/login')\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    redirect('/dashboard/templates')\n  }\n\n  const template = await prisma.diagnosticTemplate.findUnique({\n    where: { id },\n    include: {\n      sections: {\n        include: {\n          questions: true\n        },\n        orderBy: { order: 'asc' }\n      }\n    }\n  })\n\n  if (!template) {\n    notFound()\n  }\n\n  return (\n    <div className=\"p-8 space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\">Editar Template</h1>\n        <p className=\"text-sm text-gray-600 mt-1\">\n          Modifique o nome, descrição, seções e perguntas do template\n        </p>\n      </div>\n\n      <TemplateEditForm template={template} />\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;;;AACA;AAAA;AACA;AACA;AACA;;;;;;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,eAAe,iBAAiB,EAAE,MAAM,EAAuC;IAC5F,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,OAAO,MAAM,IAAA,6HAAc;IAEjC,IAAI,CAAC,MAAM;QACT,IAAA,iMAAQ,EAAC;IACX;IAEA,MAAM,UAAU,MAAM,IAAA,8HAAe,EAAC,KAAK,EAAE;IAC7C,IAAI,CAAC,SAAS;QACZ,IAAA,iMAAQ,EAAC;IACX;IAEA,MAAM,WAAW,MAAM,uHAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC;QAC1D,OAAO;YAAE;QAAG;QACZ,SAAS;YACP,UAAU;gBACR,SAAS;oBACP,WAAW;gBACb;gBACA,SAAS;oBAAE,OAAO;gBAAM;YAC1B;QACF;IACF;IAEA,IAAI,CAAC,UAAU;QACb,IAAA,iMAAQ;IACV;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAAmC;;;;;;kCACjD,8OAAC;wBAAE,WAAU;kCAA6B;;;;;;;;;;;;0BAK5C,8OAAC,gMAAgB;gBAAC,UAAU;;;;;;;;;;;;AAGlC","debugId":null}}]
}