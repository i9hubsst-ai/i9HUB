{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/action-plans.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\ninterface ActionPlanItem {\n  title: string\n  description: string\n  priority: 'HIGH' | 'MEDIUM' | 'LOW'\n  estimatedDays: number\n  reference: string | null\n}\n\nconst priorityMap: Record<'HIGH' | 'MEDIUM' | 'LOW', number> = {\n  HIGH: 1,\n  MEDIUM: 2,\n  LOW: 3\n}\n\nexport async function saveActionPlans(\n  assessmentId: string,\n  executiveSummary: string,\n  actionPlans: ActionPlanItem[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true, status: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.status !== 'SCORED') {\n      return { error: 'Diagnóstico precisa estar finalizado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para salvar plano de ação deste diagnóstico' }\n    }\n\n    // Deletar planos de ação existentes (se houver)\n    await prisma.actionPlan.deleteMany({\n      where: { assessmentId, aiGenerated: true }\n    })\n\n    // Criar novos planos de ação\n    const createdPlans = await Promise.all(\n      actionPlans.map((plan, index) =>\n        prisma.actionPlan.create({\n          data: {\n            assessmentId,\n            companyId: assessment.companyId,\n            title: plan.title,\n            description: `${executiveSummary}\\n\\n---\\n\\n${plan.description}`,\n            priority: priorityMap[plan.priority],\n            dueDate: new Date(Date.now() + plan.estimatedDays * 24 * 60 * 60 * 1000),\n            status: 'PENDING',\n            reference: plan.reference,\n            createdBy: user.id,\n            ownerUserId: user.id,\n            aiGenerated: true\n          }\n        })\n      )\n    )\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true, count: createdPlans.length, executiveSummary }\n  } catch (error) {\n    console.error('Erro ao salvar planos de ação:', error)\n    return { error: 'Erro ao salvar planos de ação' }\n  }\n}\n\nconst reversePriorityMap: Record<number, 'HIGH' | 'MEDIUM' | 'LOW'> = {\n  1: 'HIGH',\n  2: 'MEDIUM',\n  3: 'LOW'\n}\n\nexport async function getActionPlans(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    const actionPlans = await prisma.actionPlan.findMany({\n      where: { assessmentId, aiGenerated: true },\n      orderBy: [\n        { priority: 'asc' }, // 1=HIGH vem primeiro\n        { createdAt: 'asc' }\n      ]\n    })\n\n    // Extrair executive summary da primeira action plan (se existir)\n    let executiveSummary = ''\n    const formattedPlans = actionPlans.map(plan => {\n      const parts = plan.description.split('\\n\\n---\\n\\n')\n      if (parts.length > 1 && !executiveSummary) {\n        executiveSummary = parts[0]\n      }\n      \n      return {\n        ...plan,\n        priority: reversePriorityMap[plan.priority] || 'MEDIUM',\n        description: parts.length > 1 ? parts[1] : plan.description\n      }\n    })\n\n    return { \n      success: true, \n      actionPlans: formattedPlans,\n      executiveSummary \n    }\n  } catch (error) {\n    console.error('Erro ao buscar planos de ação:', error)\n    return { error: 'Erro ao buscar planos de ação' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAoBsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/action-plans.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\ninterface ActionPlanItem {\n  title: string\n  description: string\n  priority: 'HIGH' | 'MEDIUM' | 'LOW'\n  estimatedDays: number\n  reference: string | null\n}\n\nconst priorityMap: Record<'HIGH' | 'MEDIUM' | 'LOW', number> = {\n  HIGH: 1,\n  MEDIUM: 2,\n  LOW: 3\n}\n\nexport async function saveActionPlans(\n  assessmentId: string,\n  executiveSummary: string,\n  actionPlans: ActionPlanItem[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true, status: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (assessment.status !== 'SCORED') {\n      return { error: 'Diagnóstico precisa estar finalizado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para salvar plano de ação deste diagnóstico' }\n    }\n\n    // Deletar planos de ação existentes (se houver)\n    await prisma.actionPlan.deleteMany({\n      where: { assessmentId, aiGenerated: true }\n    })\n\n    // Criar novos planos de ação\n    const createdPlans = await Promise.all(\n      actionPlans.map((plan, index) =>\n        prisma.actionPlan.create({\n          data: {\n            assessmentId,\n            companyId: assessment.companyId,\n            title: plan.title,\n            description: `${executiveSummary}\\n\\n---\\n\\n${plan.description}`,\n            priority: priorityMap[plan.priority],\n            dueDate: new Date(Date.now() + plan.estimatedDays * 24 * 60 * 60 * 1000),\n            status: 'PENDING',\n            reference: plan.reference,\n            createdBy: user.id,\n            ownerUserId: user.id,\n            aiGenerated: true\n          }\n        })\n      )\n    )\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true, count: createdPlans.length, executiveSummary }\n  } catch (error) {\n    console.error('Erro ao salvar planos de ação:', error)\n    return { error: 'Erro ao salvar planos de ação' }\n  }\n}\n\nconst reversePriorityMap: Record<number, 'HIGH' | 'MEDIUM' | 'LOW'> = {\n  1: 'HIGH',\n  2: 'MEDIUM',\n  3: 'LOW'\n}\n\nexport async function getActionPlans(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    const actionPlans = await prisma.actionPlan.findMany({\n      where: { assessmentId, aiGenerated: true },\n      orderBy: [\n        { priority: 'asc' }, // 1=HIGH vem primeiro\n        { createdAt: 'asc' }\n      ]\n    })\n\n    // Extrair executive summary da primeira action plan (se existir)\n    let executiveSummary = ''\n    const formattedPlans = actionPlans.map(plan => {\n      const parts = plan.description.split('\\n\\n---\\n\\n')\n      if (parts.length > 1 && !executiveSummary) {\n        executiveSummary = parts[0]\n      }\n      \n      return {\n        ...plan,\n        priority: reversePriorityMap[plan.priority] || 'MEDIUM',\n        description: parts.length > 1 ? parts[1] : plan.description\n      }\n    })\n\n    return { \n      success: true, \n      actionPlans: formattedPlans,\n      executiveSummary \n    }\n  } catch (error) {\n    console.error('Erro ao buscar planos de ação:', error)\n    return { error: 'Erro ao buscar planos de ação' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAmGsB,iBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}}]
}