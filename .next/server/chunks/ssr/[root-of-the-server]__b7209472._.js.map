{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/assessments.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, getUserRole, isPlatformAdmin } from '@/lib/auth'\nimport { AssessmentStatus } from '@prisma/client'\n\nexport async function createAssessment(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const role = await getUserRole(user.id, companyId)\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n    return { error: 'Sem permissão para criar diagnósticos' }\n  }\n\n  const title = formData.get('title') as string\n  const description = formData.get('description') as string\n  const templateId = formData.get('templateId') as string | null\n\n  if (!title) {\n    return { error: 'Título é obrigatório' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.create({\n      data: {\n        companyId,\n        createdBy: user.id,\n        title,\n        description,\n        templateId: templateId || undefined,\n        status: 'DRAFT',\n      }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true, assessmentId: assessment.id }\n  } catch (error) {\n    console.error('Erro ao criar diagnóstico:', error)\n    return { error: 'Erro ao criar diagnóstico' }\n  }\n}\n\nexport async function getAssessments(companyId?: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const isAdmin = await isPlatformAdmin(user.id)\n    let assessments\n\n    if (isAdmin) {\n      assessments = await prisma.assessment.findMany({\n        where: companyId ? { companyId } : undefined,\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = memberships.map(m => m.companyId)\n\n      if (companyId && !companyIds.includes(companyId)) {\n        return { error: 'Sem permissão para acessar diagnósticos desta empresa' }\n      }\n\n      assessments = await prisma.assessment.findMany({\n        where: {\n          companyId: companyId ? companyId : { in: companyIds }\n        },\n        include: {\n          company: true,\n          scores: true,\n          _count: {\n            select: {\n              answers: true,\n              scores: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    return { success: true, assessments }\n  } catch (error) {\n    console.error('Erro ao buscar diagnósticos:', error)\n    return { error: 'Erro ao buscar diagnósticos' }\n  }\n}\n\nexport async function getAssessmentById(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        company: true,\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: true\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true,\n            evidences: true\n          }\n        },\n        scores: true,\n        findings: true,\n        evidences: true,\n        actionPlans: true,\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    // Buscar informações do usuário criador\n    let createdByUser = null\n    try {\n      const { createClient } = await import('@/lib/supabase/server')\n      const supabase = await createClient()\n      const { data: userData } = await supabase.auth.admin.getUserById(assessment.createdBy)\n      createdByUser = userData?.user ? {\n        id: userData.user.id,\n        email: userData.user.email || 'Desconhecido',\n        name: userData.user.user_metadata?.name || userData.user.email?.split('@')[0] || 'Usuário'\n      } : null\n    } catch (error) {\n      console.error('Erro ao buscar dados do usuário criador:', error)\n    }\n\n    return { success: true, assessment: { ...assessment, createdByUser } }\n  } catch (error) {\n    console.error('Erro ao buscar diagnóstico:', error)\n    return { error: 'Erro ao buscar diagnóstico' }\n  }\n}\n\nexport async function getTemplates() {\n  try {\n    const templates = await prisma.diagnosticTemplate.findMany({\n      where: {\n        status: 'PUBLISHED'\n      },\n      include: {\n        sections: {\n          include: {\n            questions: {\n              where: {\n                active: true,\n                approved: true\n              },\n              orderBy: {\n                createdAt: 'asc'\n              }\n            }\n          },\n          orderBy: {\n            order: 'asc'\n          }\n        }\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    return { success: true, templates }\n  } catch (error) {\n    console.error('Erro ao buscar templates:', error)\n    return { error: 'Erro ao buscar templates' }\n  }\n}\n\nexport async function saveAnswer(\n  assessmentId: string, \n  questionId: string, \n  value: number,\n  justification?: string,\n  evidenceUrls?: string[]\n) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    if (assessment.status === 'COMPLETED') {\n      return { error: 'Este diagnóstico já foi finalizado' }\n    }\n\n    const answer = await prisma.assessmentAnswer.upsert({\n      where: {\n        assessmentId_questionId: {\n          assessmentId,\n          questionId,\n        }\n      },\n      create: {\n        assessmentId,\n        questionId,\n        userId: user.id,\n        value,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      },\n      update: {\n        value,\n        userId: user.id,\n        justification,\n        evidenceUrls: evidenceUrls || [],\n      }\n    })\n\n    if (assessment.status === 'DRAFT') {\n      await prisma.assessment.update({\n        where: { id: assessmentId },\n        data: {\n          status: 'IN_PROGRESS',\n          startedAt: new Date(),\n        }\n      })\n    }\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    return { success: true, answer }\n  } catch (error) {\n    console.error('Erro ao salvar resposta:', error)\n    return { error: 'Erro ao salvar resposta' }\n  }\n}\n\nexport async function submitAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: true\n          }\n        }\n      }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    if (!assessment.template) {\n      return { error: 'Este diagnóstico não possui um template associado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para submeter este diagnóstico' }\n    }\n\n    // Calcular scores por seção usando o novo schema\n    const totalQuestions = assessment.template.sections.reduce(\n      (sum, section) => sum + section.questions.length, \n      0\n    )\n    \n    if (assessment.answers.length < totalQuestions) {\n      return { error: `Por favor, responda todas as ${totalQuestions} perguntas antes de finalizar` }\n    }\n\n    const sectionScores: { sectionId: string; rawScore: number; weightedScore: number; level: number }[] = []\n\n    for (const section of assessment.template.sections) {\n      const sectionAnswers = assessment.answers.filter(\n        a => section.questions.some(q => q.id === a.questionId)\n      )\n\n      if (sectionAnswers.length === 0) continue\n\n      // Calcular score ponderado da seção\n      let rawScore = 0\n      let totalWeight = 0\n\n      for (const answer of sectionAnswers) {\n        const question = section.questions.find(q => q.id === answer.questionId)\n        if (!question) continue\n\n        rawScore += answer.value * question.weight\n        totalWeight += question.weight * (question.type === 'BOOLEAN' ? 1 : 5)\n      }\n\n      const weightedScore = totalWeight > 0 ? (rawScore / totalWeight) * 100 : 0\n      const level = Math.min(5, Math.max(1, Math.ceil(weightedScore / 20)))\n\n      sectionScores.push({ sectionId: section.id, rawScore, weightedScore, level })\n\n      await prisma.assessmentScore.upsert({\n        where: {\n          assessmentId_sectionId: {\n            assessmentId,\n            sectionId: section.id,\n          }\n        },\n        create: {\n          assessmentId,\n          sectionId: section.id,\n          rawScore,\n          weightedScore,\n          level,\n        },\n        update: {\n          rawScore,\n          weightedScore,\n          level,\n        }\n      })\n    }\n\n    // Calcular overall score (média ponderada de todas as seções)\n    const overallScore = sectionScores.length > 0 \n      ? sectionScores.reduce((sum, s) => sum + s.weightedScore, 0) / sectionScores.length \n      : 0\n    const overallLevel = Math.min(5, Math.max(1, Math.ceil(overallScore / 20)))\n\n    await prisma.assessment.update({\n      where: { id: assessmentId },\n      data: {\n        status: 'SCORED',\n        submittedAt: new Date(),\n        scoredAt: new Date(),\n        overallScore,\n        overallLevel,\n      }\n    })\n\n    // Gerar achados automaticamente baseados nas respostas não conformes\n    const { generateFindings } = await import('./findings')\n    await generateFindings(assessmentId)\n\n    revalidatePath('/dashboard/diagnostics')\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao submeter diagnóstico:', error)\n    return { error: 'Erro ao submeter diagnóstico' }\n  }\n}\n\nexport async function deleteAssessment(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, assessment.companyId)\n\n    if (!isAdmin && !['COMPANY_ADMIN', 'ENGINEER'].includes(role || '')) {\n      return { error: 'Sem permissão para deletar este diagnóstico' }\n    }\n\n    await prisma.assessment.delete({\n      where: { id: assessmentId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar diagnóstico:', error)\n    return { error: 'Erro ao deletar diagnóstico' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/findings.ts"],"sourcesContent":["'use server'\n\nimport { prisma } from '@/lib/prisma'\nimport { FindingSeverity } from '@prisma/client'\nimport { revalidatePath } from 'next/cache'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\n\nexport async function generateFindings(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      include: {\n        template: {\n          include: {\n            sections: {\n              include: {\n                questions: {\n                  where: { active: true }\n                }\n              }\n            }\n          }\n        },\n        answers: {\n          include: {\n            question: {\n              include: {\n                section: true\n              }\n            }\n          }\n        }\n      }\n    })\n\n    if (!assessment || !assessment.template) {\n      return { error: 'Diagnóstico ou template não encontrado' }\n    }\n\n    // Verificar permissões\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para gerar achados neste diagnóstico' }\n    }\n\n    // Limpar achados existentes deste assessment\n    await prisma.finding.deleteMany({\n      where: { assessmentId }\n    })\n\n    const findings = []\n\n    // Regra: gerar achado para boolean=0 ou score≤3\n    for (const answer of assessment.answers) {\n      const isNonConformant = \n        (answer.question.type === 'BOOLEAN' && answer.value === 0) ||\n        (answer.question.type === 'SCORE' && answer.value <= 3)\n\n      if (isNonConformant) {\n        // Determinar severidade baseada no valor\n        let severity: FindingSeverity\n        if (answer.question.type === 'BOOLEAN' && answer.value === 0) {\n          severity = 'HIGH' // Não conformidade crítica\n        } else if (answer.value <= 2) {\n          severity = 'HIGH' // Muito baixo\n        } else if (answer.value === 3) {\n          severity = 'MEDIUM' // Oportunidade de melhoria\n        } else {\n          severity = 'LOW' // Observação\n        }\n\n        const finding = await prisma.finding.create({\n          data: {\n            assessmentId,\n            sectionTitle: answer.question.section.title,\n            questionText: answer.question.text,\n            questionType: answer.question.type,\n            value: answer.value,\n            reference: answer.question.reference,\n            justification: answer.justification,\n            severity\n          }\n        })\n\n        findings.push(finding)\n      }\n    }\n\n    revalidatePath(`/dashboard/diagnostics/${assessmentId}`)\n    \n    return { success: true, findingsCount: findings.length }\n  } catch (error) {\n    console.error('Erro ao gerar achados:', error)\n    return { error: 'Erro ao gerar achados' }\n  }\n}\n\nexport async function getFindings(assessmentId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Verificar se o usuário tem acesso ao assessment\n    const assessment = await prisma.assessment.findUnique({\n      where: { id: assessmentId },\n      select: { companyId: true }\n    })\n\n    if (!assessment) {\n      return { error: 'Diagnóstico não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para acessar este diagnóstico' }\n    }\n\n    const findings = await prisma.finding.findMany({\n      where: { assessmentId },\n      orderBy: [\n        { severity: 'desc' },\n        { createdAt: 'asc' }\n      ]\n    })\n\n    return { success: true, findings }\n  } catch (error) {\n    console.error('Erro ao buscar achados:', error)\n    return { error: 'Erro ao buscar achados' }\n  }\n}\n\nexport async function deleteFinding(findingId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    // Buscar o finding para verificar permissões\n    const finding = await prisma.finding.findUnique({\n      where: { id: findingId },\n      include: {\n        assessment: {\n          select: { companyId: true }\n        }\n      }\n    })\n\n    if (!finding) {\n      return { error: 'Achado não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const membership = await prisma.membership.findFirst({\n      where: {\n        userId: user.id,\n        companyId: finding.assessment.companyId,\n        status: 'ACTIVE'\n      }\n    })\n\n    if (!isAdmin && !membership) {\n      return { error: 'Sem permissão para excluir este achado' }\n    }\n\n    await prisma.finding.delete({\n      where: { id: findingId }\n    })\n\n    revalidatePath('/dashboard/diagnostics')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao excluir achado:', error)\n    return { error: 'Erro ao excluir achado' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 804, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/diagnostics/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '00426900428acee266ca8771a87facffe85bb5ea64'} from 'ACTIONS_MODULE0'\nexport {signup as '400b5fc2d8e91ee16b4885c3c49c80c353004cded1'} from 'ACTIONS_MODULE0'\nexport {login as '4026fcd574301ab313f47da83f5d3c62fe3b9f35cb'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '408fa2e0fe342c6e9f91f45d1abcc0c6d2a92cbb28'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '40dbec54eefc4453f15cd3f9afea45ec142df0c5f4'} from 'ACTIONS_MODULE0'\nexport {getTemplates as '00c74e2ab00a93847b0266ab5e80f5a63e56d4478d'} from 'ACTIONS_MODULE1'\nexport {getAssessments as '400b939932307acb9443743a16497a5fbf65fc54c5'} from 'ACTIONS_MODULE1'\nexport {deleteAssessment as '401a81ccdf0fd9842510e16419d425567c30b0c44f'} from 'ACTIONS_MODULE1'\nexport {submitAssessment as '40de58c8c518a5f2fbc8e6f05061f85317659b8ccf'} from 'ACTIONS_MODULE1'\nexport {getAssessmentById as '40e21a95efad92a02b50ed48482a059b9d96ad3b31'} from 'ACTIONS_MODULE1'\nexport {createAssessment as '600c8974e4e32689e304a3fb8f78f074d729a39a95'} from 'ACTIONS_MODULE1'\nexport {saveAnswer as '7cd3d7bab8e1fc413e07e935ddafa6166765c2a131'} from 'ACTIONS_MODULE1'\nexport {deleteFinding as '40b100173832b59d9c0f4b05c3249957c2c63f900e'} from 'ACTIONS_MODULE2'\nexport {getFindings as '40d83e70362b715babfffad1d0b09921a11e18bf03'} from 'ACTIONS_MODULE2'\nexport {generateFindings as '40ed99f92b100b39a2c5d97d649240d68ce41c54ed'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AAKA;AAOA","debugId":null}},
    {"offset": {"line": 879, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,4JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 981, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/diagnostics/page.tsx"],"sourcesContent":["import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Plus, BarChart3, CheckCircle2, Clock, AlertCircle, FileEdit } from 'lucide-react'\nimport Link from 'next/link'\nimport { getAssessments } from '@/app/actions/assessments'\n\nexport default async function DiagnosticsPage() {\n  const result = await getAssessments()\n\n  if (result.error) {\n    return (\n      <div className=\"p-8\">\n        <Card className=\"border-destructive\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Erro</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>{result.error}</p>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const assessments = result.assessments || []\n\n  const statusConfig = {\n    DRAFT: { icon: FileEdit, color: 'text-gray-600', bg: 'bg-gray-100', label: 'Rascunho' },\n    IN_PROGRESS: { icon: Clock, color: 'text-blue-600', bg: 'bg-blue-100', label: 'Em Andamento' },\n    SUBMITTED: { icon: AlertCircle, color: 'text-yellow-600', bg: 'bg-yellow-100', label: 'Submetido' },\n    COMPLETED: { icon: CheckCircle2, color: 'text-green-600', bg: 'bg-green-100', label: 'Concluído' },\n  }\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary\">Diagnósticos IMSST</h1>\n          <p className=\"text-muted-foreground\">\n            Avaliação de maturidade em Segurança e Saúde do Trabalho ({assessments.length} total)\n          </p>\n        </div>\n        <Link href=\"/dashboard/diagnostics/new\">\n          <Button className=\"gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Novo Diagnóstico\n          </Button>\n        </Link>\n      </div>\n\n      {/* IMSST Info Card */}\n      <Card className=\"border-accent\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5 text-accent\" />\n            O que é o IMSST?\n          </CardTitle>\n          <CardDescription>\n            Índice de Maturidade do Sistema de Segurança do Trabalho\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            O IMSST avalia o nível de maturidade da gestão de SST da sua empresa em 5 dimensões fundamentais:\n          </p>\n          <div className=\"grid gap-3 md:grid-cols-5\">\n            <div className=\"bg-chart-1/10 p-3 rounded-lg\">\n              <div className=\"font-semibold text-sm\">Liderança</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Comprometimento da alta direção\n              </div>\n            </div>\n            <div className=\"bg-chart-2/10 p-3 rounded-lg\">\n              <div className=\"font-semibold text-sm\">Processos</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Documentação e padronização\n              </div>\n            </div>\n            <div className=\"bg-chart-3/10 p-3 rounded-lg\">\n              <div className=\"font-semibold text-sm\">Conformidade</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Atendimento legal\n              </div>\n            </div>\n            <div className=\"bg-chart-4/10 p-3 rounded-lg\">\n              <div className=\"font-semibold text-sm\">Capacitação</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Treinamentos e conscientização\n              </div>\n            </div>\n            <div className=\"bg-chart-5/10 p-3 rounded-lg\">\n              <div className=\"font-semibold text-sm\">Dados</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Indicadores e análises\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-primary/5 p-3 rounded-lg\">\n            <p className=\"text-sm\">\n              <strong>Níveis de Maturidade:</strong> 1 (Inicial) → 2 (Gerenciado) → 3 (Definido) → 4 (Quantitativamente Gerenciado) → 5 (Em Otimização)\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assessments List */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Diagnósticos Realizados</h2>\n        \n        {assessments.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <BarChart3 className=\"h-16 w-16 text-muted-foreground/50 mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">\n                Nenhum diagnóstico realizado\n              </h3>\n              <p className=\"text-muted-foreground text-center max-w-md mb-6\">\n                Comece criando seu primeiro diagnóstico IMSST para avaliar o nível de maturidade da gestão de SST da sua empresa.\n              </p>\n              <Link href=\"/dashboard/diagnostics/new\">\n                <Button className=\"gap-2\">\n                  <Plus className=\"h-4 w-4\" />\n                  Criar Primeiro Diagnóstico\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4\">\n            {assessments.map((assessment) => {\n              const status = statusConfig[assessment.status]\n              const StatusIcon = status.icon\n              const totalQuestions = 25\n              const progress = (assessment._count.answers / totalQuestions) * 100\n              \n              return (\n                <Card key={assessment.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <CardTitle>{assessment.title}</CardTitle>\n                        <CardDescription className=\"mt-1\">\n                          {assessment.company.name} • Criado em {new Date(assessment.createdAt).toLocaleDateString('pt-BR')}\n                        </CardDescription>\n                        {assessment.description && (\n                          <p className=\"text-sm text-muted-foreground mt-2\">\n                            {assessment.description}\n                          </p>\n                        )}\n                      </div>\n                      <div className={`flex items-center gap-2 px-3 py-1 rounded-full ${status.bg} ${status.color}`}>\n                        <StatusIcon className=\"h-4 w-4\" />\n                        <span className=\"text-sm font-medium\">{status.label}</span>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {assessment.status !== 'COMPLETED' && (\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-2\">\n                            <span className=\"text-muted-foreground\">Progresso</span>\n                            <span className=\"font-medium\">\n                              {assessment._count.answers}/{totalQuestions} perguntas\n                            </span>\n                          </div>\n                          <div className=\"w-full bg-secondary rounded-full h-2\">\n                            <div \n                              className=\"bg-primary h-2 rounded-full transition-all\"\n                              style={{ width: `${progress}%` }}\n                            />\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center gap-4\">\n                        {assessment.status === 'COMPLETED' && assessment.scores.length > 0 && (\n                          <>\n                            <div className=\"flex-1\">\n                              <div className=\"text-2xl font-bold text-primary\">\n                                Nível {Math.round(assessment.scores.reduce((acc, s) => acc + s.level, 0) / assessment.scores.length)}\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">Maturidade Média</div>\n                            </div>\n                            <div className=\"flex-1 text-center\">\n                              <div className=\"text-2xl font-bold text-primary\">\n                                {Math.round(assessment.scores.reduce((acc, s) => acc + s.score, 0) / assessment.scores.length)}%\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">Pontuação Geral</div>\n                            </div>\n                          </>\n                        )}\n                        \n                        <div className=\"flex gap-2 ml-auto\">\n                          <Link href={`/dashboard/diagnostics/${assessment.id}`}>\n                            <Button variant=\"outline\" size=\"sm\">\n                              {assessment.status === 'COMPLETED' ? 'Ver Resultados' : 'Continuar'}\n                            </Button>\n                          </Link>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )\n            })}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;AAEe,eAAe;IAC5B,MAAM,SAAS,MAAM,IAAA,+IAAc;IAEnC,IAAI,OAAO,KAAK,EAAE;QAChB,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,iIAAI;gBAAC,WAAU;;kCACd,8OAAC,uIAAU;kCACT,cAAA,8OAAC,sIAAS;4BAAC,WAAU;sCAAmB;;;;;;;;;;;kCAE1C,8OAAC,wIAAW;kCACV,cAAA,8OAAC;sCAAG,OAAO,KAAK;;;;;;;;;;;;;;;;;;;;;;IAK1B;IAEA,MAAM,cAAc,OAAO,WAAW,IAAI,EAAE;IAE5C,MAAM,eAAe;QACnB,OAAO;YAAE,MAAM,yNAAQ;YAAE,OAAO;YAAiB,IAAI;YAAe,OAAO;QAAW;QACtF,aAAa;YAAE,MAAM,6MAAK;YAAE,OAAO;YAAiB,IAAI;YAAe,OAAO;QAAe;QAC7F,WAAW;YAAE,MAAM,mOAAW;YAAE,OAAO;YAAmB,IAAI;YAAiB,OAAO;QAAY;QAClG,WAAW;YAAE,MAAM,qOAAY;YAAE,OAAO;YAAkB,IAAI;YAAgB,OAAO;QAAY;IACnG;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAG,WAAU;0CAAkC;;;;;;0CAChD,8OAAC;gCAAE,WAAU;;oCAAwB;oCACwB,YAAY,MAAM;oCAAC;;;;;;;;;;;;;kCAGlF,8OAAC,uKAAI;wBAAC,MAAK;kCACT,cAAA,8OAAC,qIAAM;4BAAC,WAAU;;8CAChB,8OAAC,0MAAI;oCAAC,WAAU;;;;;;gCAAY;;;;;;;;;;;;;;;;;;0BAOlC,8OAAC,iIAAI;gBAAC,WAAU;;kCACd,8OAAC,uIAAU;;0CACT,8OAAC,sIAAS;gCAAC,WAAU;;kDACnB,8OAAC,+NAAS;wCAAC,WAAU;;;;;;oCAAwB;;;;;;;0CAG/C,8OAAC,4IAAe;0CAAC;;;;;;;;;;;;kCAInB,8OAAC,wIAAW;wBAAC,WAAU;;0CACrB,8OAAC;gCAAE,WAAU;0CAAgC;;;;;;0CAG7C,8OAAC;gCAAI,WAAU;;kDACb,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,8OAAC;gDAAI,WAAU;0DAAqC;;;;;;;;;;;;kDAItD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,8OAAC;gDAAI,WAAU;0DAAqC;;;;;;;;;;;;kDAItD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,8OAAC;gDAAI,WAAU;0DAAqC;;;;;;;;;;;;kDAItD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,8OAAC;gDAAI,WAAU;0DAAqC;;;;;;;;;;;;kDAItD,8OAAC;wCAAI,WAAU;;0DACb,8OAAC;gDAAI,WAAU;0DAAwB;;;;;;0DACvC,8OAAC;gDAAI,WAAU;0DAAqC;;;;;;;;;;;;;;;;;;0CAKxD,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;oCAAE,WAAU;;sDACX,8OAAC;sDAAO;;;;;;wCAA8B;;;;;;;;;;;;;;;;;;;;;;;;0BAO9C,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;oBAE1C,YAAY,MAAM,KAAK,kBACtB,8OAAC,iIAAI;kCACH,cAAA,8OAAC,wIAAW;4BAAC,WAAU;;8CACrB,8OAAC,+NAAS;oCAAC,WAAU;;;;;;8CACrB,8OAAC;oCAAG,WAAU;8CAA6B;;;;;;8CAG3C,8OAAC;oCAAE,WAAU;8CAAkD;;;;;;8CAG/D,8OAAC,uKAAI;oCAAC,MAAK;8CACT,cAAA,8OAAC,qIAAM;wCAAC,WAAU;;0DAChB,8OAAC,0MAAI;gDAAC,WAAU;;;;;;4CAAY;;;;;;;;;;;;;;;;;;;;;;6CAOpC,8OAAC;wBAAI,WAAU;kCACZ,YAAY,GAAG,CAAC,CAAC;4BAChB,MAAM,SAAS,YAAY,CAAC,WAAW,MAAM,CAAC;4BAC9C,MAAM,aAAa,OAAO,IAAI;4BAC9B,MAAM,iBAAiB;4BACvB,MAAM,WAAW,AAAC,WAAW,MAAM,CAAC,OAAO,GAAG,iBAAkB;4BAEhE,qBACE,8OAAC,iIAAI;gCAAqB,WAAU;;kDAClC,8OAAC,uIAAU;kDACT,cAAA,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDAAI,WAAU;;sEACb,8OAAC,sIAAS;sEAAE,WAAW,KAAK;;;;;;sEAC5B,8OAAC,4IAAe;4DAAC,WAAU;;gEACxB,WAAW,OAAO,CAAC,IAAI;gEAAC;gEAAc,IAAI,KAAK,WAAW,SAAS,EAAE,kBAAkB,CAAC;;;;;;;wDAE1F,WAAW,WAAW,kBACrB,8OAAC;4DAAE,WAAU;sEACV,WAAW,WAAW;;;;;;;;;;;;8DAI7B,8OAAC;oDAAI,WAAW,CAAC,+CAA+C,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,OAAO,KAAK,EAAE;;sEAC3F,8OAAC;4DAAW,WAAU;;;;;;sEACtB,8OAAC;4DAAK,WAAU;sEAAuB,OAAO,KAAK;;;;;;;;;;;;;;;;;;;;;;;kDAIzD,8OAAC,wIAAW;kDACV,cAAA,8OAAC;4CAAI,WAAU;;gDACZ,WAAW,MAAM,KAAK,6BACrB,8OAAC;;sEACC,8OAAC;4DAAI,WAAU;;8EACb,8OAAC;oEAAK,WAAU;8EAAwB;;;;;;8EACxC,8OAAC;oEAAK,WAAU;;wEACb,WAAW,MAAM,CAAC,OAAO;wEAAC;wEAAE;wEAAe;;;;;;;;;;;;;sEAGhD,8OAAC;4DAAI,WAAU;sEACb,cAAA,8OAAC;gEACC,WAAU;gEACV,OAAO;oEAAE,OAAO,GAAG,SAAS,CAAC,CAAC;gEAAC;;;;;;;;;;;;;;;;;8DAMvC,8OAAC;oDAAI,WAAU;;wDACZ,WAAW,MAAM,KAAK,eAAe,WAAW,MAAM,CAAC,MAAM,GAAG,mBAC/D;;8EACE,8OAAC;oEAAI,WAAU;;sFACb,8OAAC;4EAAI,WAAU;;gFAAkC;gFACxC,KAAK,KAAK,CAAC,WAAW,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,KAAK,EAAE,KAAK,WAAW,MAAM,CAAC,MAAM;;;;;;;sFAErG,8OAAC;4EAAI,WAAU;sFAAgC;;;;;;;;;;;;8EAEjD,8OAAC;oEAAI,WAAU;;sFACb,8OAAC;4EAAI,WAAU;;gFACZ,KAAK,KAAK,CAAC,WAAW,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,KAAK,EAAE,KAAK,WAAW,MAAM,CAAC,MAAM;gFAAE;;;;;;;sFAEjG,8OAAC;4EAAI,WAAU;sFAAgC;;;;;;;;;;;;;;sEAKrD,8OAAC;4DAAI,WAAU;sEACb,cAAA,8OAAC,uKAAI;gEAAC,MAAM,CAAC,uBAAuB,EAAE,WAAW,EAAE,EAAE;0EACnD,cAAA,8OAAC,qIAAM;oEAAC,SAAQ;oEAAU,MAAK;8EAC5B,WAAW,MAAM,KAAK,cAAc,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BA5D3D,WAAW,EAAE;;;;;wBAqE5B;;;;;;;;;;;;;;;;;;AAMZ","debugId":null}}]
}