// Teste espec√≠fico para verificar se o prompt personalizado est√° sendo aplicado
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function testPromptSystem() {
  console.log('üß™ TESTANDO SISTEMA DE PROMPT PERSONALIZADO')
  console.log('==========================================\n')
  
  try {
    // 1. Verificar configura√ß√µes existentes
    console.log('1Ô∏è‚É£ Verificando configura√ß√µes na tabela ai_configurations...')
    const allConfigs = await prisma.aIConfiguration.findMany({
      orderBy: { createdAt: 'desc' }
    })
    
    console.log(`üìä Total de configura√ß√µes: ${allConfigs.length}`)
    allConfigs.forEach((config, index) => {
      console.log(`   ${index + 1}. ID: ${config.id}`)
      console.log(`      Ativa: ${config.isActive}`)
      console.log(`      Prompt: "${config.systemPrompt}"`)
      console.log(`      Criada: ${config.createdAt}`)
      console.log(`      Atualizada: ${config.updatedAt}`)
      console.log('')
    })
    
    // 2. Verificar configura√ß√£o ativa especificamente
    console.log('2Ô∏è‚É£ Buscando configura√ß√£o ATIVA...')
    const activeConfig = await prisma.aIConfiguration.findFirst({
      where: { isActive: true },
      select: { 
        id: true,
        systemPrompt: true,
        isActive: true,
        createdAt: true,
        updatedAt: true 
      }
    })
    
    if (activeConfig) {
      console.log('‚úÖ Configura√ß√£o ativa encontrada:')
      console.log(`   ID: ${activeConfig.id}`)
      console.log(`   Prompt: "${activeConfig.systemPrompt}"`)
      console.log(`   Criada: ${activeConfig.createdAt}`)
      console.log(`   Atualizada: ${activeConfig.updatedAt}`)
    } else {
      console.log('‚ùå PROBLEMA: Nenhuma configura√ß√£o ativa encontrada!')
      console.log('üí° Isso explica por que as instru√ß√µes n√£o aparecem')
    }
    
    // 3. Testar a fun√ß√£o que simula getSystemPromptFromConfig
    console.log('\n3Ô∏è‚É£ Simulando busca de prompt personalizado...')
    const customPrompt = activeConfig?.systemPrompt || null
    
    if (customPrompt && customPrompt.trim()) {
      console.log('‚úÖ Prompt personalizado encontrado:')
      console.log(`"${customPrompt}"`)
    } else {
      console.log('‚ùå Nenhum prompt personalizado ativo')
    }
    
    // 4. Criar uma configura√ß√£o de teste se n√£o existir
    if (!activeConfig) {
      console.log('\n4Ô∏è‚É£ Criando configura√ß√£o de teste...')
      const testConfig = await prisma.aIConfiguration.create({
        data: {
          systemPrompt: "- Sempre mencione custos estimados em an√°lises de SST\n- Priorize solu√ß√µes para pequenas empresas",
          temperature: 0.7,
          maxTokens: 2000,
          isActive: true,
          updatedBy: 'test-system'
        }
      })
      
      console.log('‚úÖ Configura√ß√£o de teste criada:')
      console.log(`   ID: ${testConfig.id}`)
      console.log(`   Prompt: "${testConfig.systemPrompt}"`)
    }
    
    // 5. Verificar novamente ap√≥s cria√ß√£o
    console.log('\n5Ô∏è‚É£ Verifica√ß√£o final...')
    const finalConfig = await prisma.aIConfiguration.findFirst({
      where: { isActive: true }
    })
    
    if (finalConfig) {
      console.log('‚úÖ Configura√ß√£o ativa final:')
      console.log(`   Prompt: "${finalConfig.systemPrompt}"`)
    }
    
  } catch (error) {
    console.error('‚ùå ERRO:', error)
  } finally {
    await prisma.$disconnect()
  }
}

testPromptSystem()