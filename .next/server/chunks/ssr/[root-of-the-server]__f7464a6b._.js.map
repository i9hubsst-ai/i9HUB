{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/supabase/admin.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nexport function createAdminClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!\n\n  if (!supabaseUrl || !supabaseServiceKey) {\n    throw new Error('Missing Supabase environment variables')\n  }\n\n  return createClient(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  })\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,SAAS;IACd,MAAM;IACN,MAAM,qBAAqB,QAAQ,GAAG,CAAC,yBAAyB;IAEhE,IAAI,CAAC,eAAe,CAAC,oBAAoB;QACvC,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,IAAA,uMAAY,EAAC,aAAa,oBAAoB;QACnD,MAAM;YACJ,kBAAkB;YAClB,gBAAgB;QAClB;IACF;AACF","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/users.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role, MembershipStatus } from '@prisma/client'\nimport { createClient } from '@/lib/supabase/server'\nimport { createAdminClient } from '@/lib/supabase/admin'\n\nexport async function inviteUser(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Apenas administradores podem convidar usuários' }\n  }\n\n  const email = formData.get('email') as string\n  const userRole = formData.get('role') as Role\n\n  if (!email || !userRole) {\n    return { error: 'Email e função são obrigatórios' }\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  if (!emailRegex.test(email)) {\n    return { error: 'Email inválido. Use o formato: usuario@empresa.com' }\n  }\n\n  try {\n    const supabaseAdmin = createAdminClient()\n    \n    // Check if user already exists in Supabase Auth\n    const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers()\n    let targetUser = existingUsers?.users.find(u => u.email?.toLowerCase() === email.toLowerCase())\n\n    // Check if there's already a membership for this email/company\n    if (targetUser) {\n      const existingMembership = await prisma.membership.findUnique({\n        where: {\n          userId_companyId: {\n            userId: targetUser.id,\n            companyId,\n          }\n        }\n      })\n\n      if (existingMembership) {\n        if (existingMembership.status === 'INVITED') {\n          return { error: 'Este usuário já tem um convite pendente para esta empresa' }\n        }\n        return { error: 'Este usuário já está associado a esta empresa' }\n      }\n    }\n\n    // If user doesn't exist, invite them via Supabase\n    if (!targetUser) {\n      const { data: inviteData, error: inviteError } = await supabaseAdmin.auth.admin.inviteUserByEmail(email, {\n        data: {\n          invited_by: user.id,\n          company_id: companyId,\n        }\n      })\n\n      if (inviteError) {\n        console.error('Erro ao enviar convite Supabase:', inviteError)\n        return { error: 'Erro ao enviar convite por email' }\n      }\n\n      targetUser = inviteData.user\n    }\n\n    // Create membership with INVITED status\n    const membership = await prisma.membership.create({\n      data: {\n        userId: targetUser.id,\n        companyId,\n        role: userRole,\n        status: 'INVITED',\n      }\n    })\n\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership }\n  } catch (error) {\n    console.error('Erro ao convidar usuário:', error)\n    return { error: 'Erro ao convidar usuário' }\n  }\n}\n\nexport async function resendInvite(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    if (membership.status !== 'INVITED') {\n      return { error: 'Apenas convites pendentes podem ser reenviados' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para reenviar convites' }\n    }\n\n    // Get user email from Supabase\n    const supabaseAdmin = createAdminClient()\n    const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(membership.userId)\n\n    if (!authUser.user?.email) {\n      return { error: 'Email do usuário não encontrado' }\n    }\n\n    // For users with status INVITED that haven't confirmed their email yet,\n    // we need to delete and recreate them to resend the invite email\n    // This is necessary because Supabase's inviteUserByEmail fails with \"email_exists\" \n    // for users that haven't confirmed yet\n    \n    // Check if user has confirmed their email\n    if (!authUser.user.email_confirmed_at) {\n      // User hasn't confirmed yet - delete and recreate to resend invite\n      const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(membership.userId)\n      \n      if (deleteError) {\n        console.error('Erro ao preparar reenvio:', deleteError)\n        return { error: 'Erro ao preparar reenvio de convite' }\n      }\n\n      // Recreate user with same email\n      const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.inviteUserByEmail(\n        authUser.user.email,\n        {\n          redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n          data: {\n            invited_by: user.id,\n            company_id: membership.companyId,\n          }\n        }\n      )\n\n      if (createError) {\n        console.error('Erro ao reenviar convite:', createError)\n        return { error: 'Erro ao reenviar convite por email' }\n      }\n\n      // Update membership with new user ID\n      await prisma.membership.update({\n        where: { id: membershipId },\n        data: { userId: newUser.user!.id }\n      })\n\n      revalidatePath(`/dashboard/companies/${membership.companyId}`)\n      revalidatePath('/dashboard/users')\n      return { success: true }\n    }\n\n    // User has confirmed email - they should login normally\n    return { error: 'Este usuário já confirmou o email. Ele deve fazer login normalmente.' }\n  } catch (error) {\n    console.error('Erro ao reenviar convite:', error)\n    return { error: 'Erro ao reenviar convite' }\n  }\n}\n\nexport async function updateUserRole(membershipId: string, newRole: Role) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para alterar funções' }\n    }\n\n    const updated = await prisma.membership.update({\n      where: { id: membershipId },\n      data: { role: newRole }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership: updated }\n  } catch (error) {\n    console.error('Erro ao atualizar função:', error)\n    return { error: 'Erro ao atualizar função' }\n  }\n}\n\nexport async function removeUserFromCompany(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para remover usuários' }\n    }\n\n    await prisma.membership.delete({\n      where: { id: membershipId }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao remover usuário:', error)\n    return { error: 'Erro ao remover usuário' }\n  }\n}\n\nexport async function updateUserProfile(userId: string, data: { name?: string; email?: string }) {\n  const currentUser = await getCurrentUser()\n  if (!currentUser) {\n    return { error: 'Não autorizado' }\n  }\n\n  // Only allow updating own profile or if Platform Admin\n  const isAdmin = await isPlatformAdmin(currentUser.id)\n  if (!isAdmin && currentUser.id !== userId) {\n    return { error: 'Você só pode editar seu próprio perfil' }\n  }\n\n  try {\n    const supabaseAdmin = createAdminClient()\n    \n    // Update user in Supabase Auth\n    const updateData: any = {}\n    \n    if (data.email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n      if (!emailRegex.test(data.email)) {\n        return { error: 'Email inválido' }\n      }\n      updateData.email = data.email\n    }\n    \n    if (data.name) {\n      updateData.user_metadata = { name: data.name }\n    }\n\n    const { data: updatedUser, error } = await supabaseAdmin.auth.admin.updateUserById(\n      userId,\n      updateData\n    )\n\n    if (error) {\n      console.error('Erro ao atualizar usuário no Supabase:', error)\n      return { error: 'Erro ao atualizar perfil' }\n    }\n\n    revalidatePath('/dashboard/users')\n    return { success: true, user: updatedUser }\n  } catch (error) {\n    console.error('Erro ao atualizar perfil:', error)\n    return { error: 'Erro ao atualizar perfil' }\n  }\n}\n\nexport async function getCompanyUsers(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar usuários desta empresa' }\n  }\n\n  try {\n    const memberships = await prisma.membership.findMany({\n      where: { companyId },\n      include: {\n        company: true\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      return {\n        ...membership,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function getAllUsers() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let memberships\n\n    if (isAdmin) {\n      memberships = await prisma.membership.findMany({\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const userMemberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = userMemberships.map(m => m.companyId)\n\n      memberships = await prisma.membership.findMany({\n        where: {\n          companyId: {\n            in: companyIds\n          }\n        },\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    // Get all platform admins to override their role display\n    const platformAdmins = await prisma.platformAdmin.findMany({\n      select: {\n        userId: true\n      }\n    })\n    const platformAdminIds = new Set(platformAdmins.map(pa => pa.userId))\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      \n      // If user is a platform admin, override their role for display\n      const effectiveRole = platformAdminIds.has(membership.userId) \n        ? 'PLATFORM_ADMIN' as Role\n        : membership.role\n\n      return {\n        ...membership,\n        role: effectiveRole,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function makePlatformAdmin(userId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem promover usuários' }\n  }\n\n  try {\n    const admin = await prisma.platformAdmin.create({\n      data: {\n        userId,\n      }\n    })\n\n    revalidatePath('/dashboard/users')\n    return { success: true, admin }\n  } catch (error) {\n    console.error('Erro ao promover usuário:', error)\n    return { error: 'Este usuário já é administrador da plataforma' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/companies.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role } from '@prisma/client'\n\nexport async function createCompany(formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem criar empresas' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.create({\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao criar empresa:', error)\n    return { error: 'Erro ao criar empresa. Verifique se o CNPJ já não está cadastrado.' }\n  }\n}\n\nexport async function updateCompany(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Sem permissão para editar esta empresa' }\n  }\n\n  const name = formData.get('name') as string\n  const cnpj = formData.get('cnpj') as string\n\n  if (!name || !cnpj) {\n    return { error: 'Nome e CNPJ são obrigatórios' }\n  }\n\n  try {\n    const company = await prisma.company.update({\n      where: { id: companyId },\n      data: {\n        name,\n        cnpj,\n      }\n    })\n\n    revalidatePath('/dashboard/companies')\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao atualizar empresa:', error)\n    return { error: 'Erro ao atualizar empresa' }\n  }\n}\n\nexport async function deleteCompany(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem deletar empresas' }\n  }\n\n  try {\n    await prisma.company.delete({\n      where: { id: companyId }\n    })\n\n    revalidatePath('/dashboard/companies')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao deletar empresa:', error)\n    return { error: 'Erro ao deletar empresa' }\n  }\n}\n\nexport async function getCompanies() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let companies\n\n    if (isAdmin) {\n      companies = await prisma.company.findMany({\n        include: {\n          _count: {\n            select: {\n              memberships: true,\n              assessments: true,\n              actionPlans: true,\n            }\n          }\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const memberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        include: {\n          company: {\n            include: {\n              _count: {\n                select: {\n                  memberships: true,\n                  assessments: true,\n                  actionPlans: true,\n                }\n              }\n            }\n          }\n        }\n      })\n\n      companies = memberships.map(m => m.company)\n    }\n\n    return { success: true, companies }\n  } catch (error) {\n    console.error('Erro ao buscar empresas:', error)\n    return { error: 'Erro ao buscar empresas' }\n  }\n}\n\nexport async function getCompanyById(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar esta empresa' }\n  }\n\n  try {\n    const company = await prisma.company.findUnique({\n      where: { id: companyId },\n      include: {\n        memberships: {\n          include: {\n            company: true\n          }\n        },\n        assessments: {\n          orderBy: {\n            createdAt: 'desc'\n          },\n          take: 5\n        },\n        _count: {\n          select: {\n            memberships: true,\n            assessments: true,\n            actionPlans: true,\n          }\n        }\n      }\n    })\n\n    if (!company) {\n      return { error: 'Empresa não encontrada' }\n    }\n\n    return { success: true, company }\n  } catch (error) {\n    console.error('Erro ao buscar empresa:', error)\n    return { error: 'Erro ao buscar empresa' }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 819, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/.next-internal/server/app/dashboard/users/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {logout as '000a7265372b70878088ed09036d1fd3e0864a1df5'} from 'ACTIONS_MODULE0'\nexport {signup as '401ec2d89585c019b90d74120d11e9c2dbf1af1441'} from 'ACTIONS_MODULE0'\nexport {updatePassword as '406cf3c73ab9c2d0f07b7a7beb2c6e7c1c5c21b032'} from 'ACTIONS_MODULE0'\nexport {resetPassword as '4084f6da2e1e7018c733313cf2901c8a22980453eb'} from 'ACTIONS_MODULE0'\nexport {login as '40faa7564ac777eb597397a532a6abe6fd7a5709ff'} from 'ACTIONS_MODULE0'\nexport {getAllUsers as '00c4b1fab92688d404c1a320305a203ef0ee4bc257'} from 'ACTIONS_MODULE1'\nexport {makePlatformAdmin as '4012efa5bc87166d61724efc28f5bb596451b6cb8a'} from 'ACTIONS_MODULE1'\nexport {removeUserFromCompany as '403da791a4cef969654ab1720ceb99ee607d63db3e'} from 'ACTIONS_MODULE1'\nexport {getCompanyUsers as '404593fe3053c9f2413fdb28e6438d4b1ac65b20e9'} from 'ACTIONS_MODULE1'\nexport {resendInvite as '4093c8a003ebcad5a4ed935db7ccac0049da29f097'} from 'ACTIONS_MODULE1'\nexport {updateUserRole as '602cbe5b903ac7a9fbf48285b7dd437012403f985f'} from 'ACTIONS_MODULE1'\nexport {updateUserProfile as '607268ae643b83e9504df31ac1ce8906c7ee0a2515'} from 'ACTIONS_MODULE1'\nexport {inviteUser as '60892d0d8038d658b98b3b8c480adcf64a50d67b70'} from 'ACTIONS_MODULE1'\nexport {getCompanies as '00fdebc57c98a02f7153921e98f722c5ca22e3fbe3'} from 'ACTIONS_MODULE2'\nexport {getCompanyById as '40467e17e3a13d9926560ffb1081f4cdd4fd4fd63b'} from 'ACTIONS_MODULE2'\nexport {createCompany as '4052fcadf6bb0dd36877faca385dbdf54a66b4224d'} from 'ACTIONS_MODULE2'\nexport {deleteCompany as '40f3f8b668a33ffd60becaa1f534ded3da3be7ad0c'} from 'ACTIONS_MODULE2'\nexport {updateCompany as '60274702b45e1aba05d576bf7ce7b8e8c6219b639b'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AAKA;AAQA","debugId":null}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,4JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 1005, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/invite-user-dialog.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const InviteUserDialog = registerClientReference(\n    function() { throw new Error(\"Attempted to call InviteUserDialog() from the server but InviteUserDialog is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/invite-user-dialog.tsx <module evaluation>\",\n    \"InviteUserDialog\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,wQAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,6EACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1019, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/invite-user-dialog.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const InviteUserDialog = registerClientReference(\n    function() { throw new Error(\"Attempted to call InviteUserDialog() from the server but InviteUserDialog is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/invite-user-dialog.tsx\",\n    \"InviteUserDialog\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,mBAAmB,IAAA,wQAAuB,EACnD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,yDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1033, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1041, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/users-list.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const UsersList = registerClientReference(\n    function() { throw new Error(\"Attempted to call UsersList() from the server but UsersList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/users-list.tsx <module evaluation>\",\n    \"UsersList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,qEACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1055, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/users-list.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const UsersList = registerClientReference(\n    function() { throw new Error(\"Attempted to call UsersList() from the server but UsersList is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/dashboard/users-list.tsx\",\n    \"UsersList\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,YAAY,IAAA,wQAAuB,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,iDACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1069, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1077, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/dashboard/users/page.tsx"],"sourcesContent":["import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Users, Shield, UserCog } from 'lucide-react'\nimport { getAllUsers } from '@/app/actions/users'\nimport { getCompanies } from '@/app/actions/companies'\nimport { InviteUserDialog } from '@/components/dashboard/invite-user-dialog'\nimport { UsersList } from '@/components/dashboard/users-list'\n\nexport default async function UsersPage() {\n  const result = await getAllUsers()\n  const companiesResult = await getCompanies()\n\n  if (result.error) {\n    return (\n      <div className=\"p-8\">\n        <Card className=\"border-destructive\">\n          <CardHeader>\n            <CardTitle className=\"text-destructive\">Erro</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>{result.error}</p>\n          </CardContent>\n        </Card>\n      </div>\n    )\n  }\n\n  const users = result.users || []\n  const companies = companiesResult.companies || []\n\n  const roleIcons = {\n    PLATFORM_ADMIN: { icon: Shield, color: 'bg-red-100 text-red-700', label: 'Admin Plataforma' },\n    COMPANY_ADMIN: { icon: UserCog, color: 'bg-orange-100 text-orange-700', label: 'Admin Empresa' },\n    ENGINEER: { icon: Users, color: 'bg-blue-100 text-blue-700', label: 'Engenheiro SST' },\n    EMPLOYER: { icon: Users, color: 'bg-green-100 text-green-700', label: 'Funcionário' },\n    VIEWER: { icon: Users, color: 'bg-gray-100 text-gray-700', label: 'Visualizador' },\n  }\n\n  const roleCounts = users.reduce((acc, user) => {\n    acc[user.role] = (acc[user.role] || 0) + 1\n    return acc\n  }, {} as Record<string, number>)\n\n  return (\n    <div className=\"p-8 space-y-8\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-primary\">Usuários</h1>\n          <p className=\"text-muted-foreground\">\n            Gerencie os usuários e suas permissões ({users.length} total)\n          </p>\n        </div>\n        <InviteUserDialog companies={companies} />\n      </div>\n\n      {/* Roles Overview */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Papéis e Permissões</h2>\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5\">\n          {Object.entries(roleIcons).map(([key, config]) => {\n            const Icon = config.icon\n            return (\n              <Card key={key}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className={`p-2 rounded-lg ${config.color}`}>\n                      <Icon className=\"h-4 w-4\" />\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-primary mb-1\">\n                    {roleCounts[key] || 0}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">{config.label}</p>\n                </CardContent>\n              </Card>\n            )\n          })}\n        </div>\n      </div>\n\n      {/* Users List */}\n      <div>\n        <h2 className=\"text-xl font-semibold mb-4\">Lista de Usuários</h2>\n        <UsersList users={users} />\n      </div>\n\n      {/* Roles Description */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Descrição dos Papéis</CardTitle>\n          <CardDescription>\n            Entenda as permissões de cada tipo de usuário\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <div className=\"border-l-4 border-red-600 pl-4\">\n              <h4 className=\"font-semibold\">Administrador da Plataforma</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Acesso total ao sistema. Pode criar empresas, gerenciar todos os usuários e acessar dados de todas as empresas.\n                Múltiplas empresas: ✓\n              </p>\n            </div>\n            <div className=\"border-l-4 border-orange-600 pl-4\">\n              <h4 className=\"font-semibold\">Administrador da Empresa</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Gerencia uma empresa específica. Pode convidar usuários, atribuir permissões e visualizar todos os dados da empresa.\n                Múltiplas empresas: ✗ (apenas uma)\n              </p>\n            </div>\n            <div className=\"border-l-4 border-blue-600 pl-4\">\n              <h4 className=\"font-semibold\">Engenheiro SST</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Aplica diagnósticos IMSST, gera relatórios e cria planos de ação. Pode trabalhar com múltiplas empresas.\n                Múltiplas empresas: ✓\n              </p>\n            </div>\n            <div className=\"border-l-4 border-green-600 pl-4\">\n              <h4 className=\"font-semibold\">Funcionário (Employer)</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Acesso limitado por módulo. Pode responder questionários e visualizar informações conforme permissões concedidas.\n                Múltiplas empresas: ✗ (apenas uma)\n              </p>\n            </div>\n            <div className=\"border-l-4 border-gray-600 pl-4\">\n              <h4 className=\"font-semibold\">Visualizador</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Apenas visualização. Não pode editar ou criar conteúdo. Pode acessar múltiplas empresas.\n                Múltiplas empresas: ✓\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAEe,eAAe;IAC5B,MAAM,SAAS,MAAM,IAAA,sIAAW;IAChC,MAAM,kBAAkB,MAAM,IAAA,2IAAY;IAE1C,IAAI,OAAO,KAAK,EAAE;QAChB,qBACE,8OAAC;YAAI,WAAU;sBACb,cAAA,8OAAC,iIAAI;gBAAC,WAAU;;kCACd,8OAAC,uIAAU;kCACT,cAAA,8OAAC,sIAAS;4BAAC,WAAU;sCAAmB;;;;;;;;;;;kCAE1C,8OAAC,wIAAW;kCACV,cAAA,8OAAC;sCAAG,OAAO,KAAK;;;;;;;;;;;;;;;;;;;;;;IAK1B;IAEA,MAAM,QAAQ,OAAO,KAAK,IAAI,EAAE;IAChC,MAAM,YAAY,gBAAgB,SAAS,IAAI,EAAE;IAEjD,MAAM,YAAY;QAChB,gBAAgB;YAAE,MAAM,gNAAM;YAAE,OAAO;YAA2B,OAAO;QAAmB;QAC5F,eAAe;YAAE,MAAM,uNAAO;YAAE,OAAO;YAAiC,OAAO;QAAgB;QAC/F,UAAU;YAAE,MAAM,6MAAK;YAAE,OAAO;YAA6B,OAAO;QAAiB;QACrF,UAAU;YAAE,MAAM,6MAAK;YAAE,OAAO;YAA+B,OAAO;QAAc;QACpF,QAAQ;YAAE,MAAM,6MAAK;YAAE,OAAO;YAA6B,OAAO;QAAe;IACnF;IAEA,MAAM,aAAa,MAAM,MAAM,CAAC,CAAC,KAAK;QACpC,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI;QACzC,OAAO;IACT,GAAG,CAAC;IAEJ,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;;0CACC,8OAAC;gCAAG,WAAU;0CAAkC;;;;;;0CAChD,8OAAC;gCAAE,WAAU;;oCAAwB;oCACM,MAAM,MAAM;oCAAC;;;;;;;;;;;;;kCAG1D,8OAAC,wKAAgB;wBAAC,WAAW;;;;;;;;;;;;0BAI/B,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC;wBAAI,WAAU;kCACZ,OAAO,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,KAAK,OAAO;4BAC3C,MAAM,OAAO,OAAO,IAAI;4BACxB,qBACE,8OAAC,iIAAI;;kDACH,8OAAC,uIAAU;wCAAC,WAAU;kDACpB,cAAA,8OAAC;4CAAI,WAAU;sDACb,cAAA,8OAAC;gDAAI,WAAW,CAAC,eAAe,EAAE,OAAO,KAAK,EAAE;0DAC9C,cAAA,8OAAC;oDAAK,WAAU;;;;;;;;;;;;;;;;;;;;;kDAItB,8OAAC,wIAAW;;0DACV,8OAAC;gDAAI,WAAU;0DACZ,UAAU,CAAC,IAAI,IAAI;;;;;;0DAEtB,8OAAC;gDAAE,WAAU;0DAAiC,OAAO,KAAK;;;;;;;;;;;;;+BAZnD;;;;;wBAgBf;;;;;;;;;;;;0BAKJ,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAA6B;;;;;;kCAC3C,8OAAC,sJAAS;wBAAC,OAAO;;;;;;;;;;;;0BAIpB,8OAAC,iIAAI;;kCACH,8OAAC,uIAAU;;0CACT,8OAAC,sIAAS;0CAAC;;;;;;0CACX,8OAAC,4IAAe;0CAAC;;;;;;;;;;;;kCAInB,8OAAC,wIAAW;wBAAC,WAAU;kCACrB,cAAA,8OAAC;4BAAI,WAAU;;8CACb,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAG,WAAU;sDAAgB;;;;;;sDAC9B,8OAAC;4CAAE,WAAU;sDAAgC;;;;;;;;;;;;8CAK/C,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAG,WAAU;sDAAgB;;;;;;sDAC9B,8OAAC;4CAAE,WAAU;sDAAgC;;;;;;;;;;;;8CAK/C,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAG,WAAU;sDAAgB;;;;;;sDAC9B,8OAAC;4CAAE,WAAU;sDAAgC;;;;;;;;;;;;8CAK/C,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAG,WAAU;sDAAgB;;;;;;sDAC9B,8OAAC;4CAAE,WAAU;sDAAgC;;;;;;;;;;;;8CAK/C,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAG,WAAU;sDAAgB;;;;;;sDAC9B,8OAAC;4CAAE,WAAU;sDAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAU3D","debugId":null}}]
}