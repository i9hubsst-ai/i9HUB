{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n        \"icon-sm\": \"size-8\",\n        \"icon-lg\": \"size-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean\n  }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  )\n}\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,iBAAiB,IAAA,uKAAG,EACxB,+bACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OACE;YACF,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;YACN,WAAW;YACX,WAAW;QACb;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AAGF,SAAS,OAAO,EACd,SAAS,EACT,OAAO,EACP,IAAI,EACJ,UAAU,KAAK,EACf,GAAG,OAIF;IACD,MAAM,OAAO,UAAU,wKAAI,GAAG;IAE9B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,eAAe;YAAE;YAAS;YAAM;QAAU;QACvD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAEA;AANA;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OAC+C;IAClD,qBAAO,8OAAC,0KAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,cAAc,EACrB,GAAG,OACkD;IACrD,qBAAO,8OAAC,6KAAuB;QAAC,aAAU;QAAkB,GAAG,KAAK;;;;;;AACtE;AAEA,SAAS,aAAa,EACpB,GAAG,OACiD;IACpD,qBAAO,8OAAC,4KAAsB;QAAC,aAAU;QAAiB,GAAG,KAAK;;;;;;AACpE;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,GAAG,OACkD;IACrD,qBACE,8OAAC,6KAAuB;QACtB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,kBAAkB,IAAI,EACtB,GAAG,OAGJ;IACC,qBACE,8OAAC;QAAa,aAAU;;0BACtB,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,aAAU;gBACV,WAAW,IAAA,kHAAE,EACX,+WACA;gBAED,GAAG,KAAK;;oBAER;oBACA,iCACC,8OAAC,2KAAqB;wBACpB,aAAU;wBACV,WAAU;;0CAEV,8OAAC,yMAAK;;;;;0CACN,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAMtC;AAEA,SAAS,aAAa,EAAE,SAAS,EAAE,GAAG,OAAoC;IACxE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,aAAa,EAAE,SAAS,EAAE,GAAG,OAAoC;IACxE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,0DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,2KAAqB;QACpB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsD;IACzD,qBACE,8OAAC,iLAA2B;QAC1B,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  align = \"center\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        align={align}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AAEA;AANA;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OAC+C;IAClD,qBAAO,8OAAC,0KAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,OAAO,SAAS,EAChB,QAAQ,EACR,GAAG,OAGJ;IACC,qBACE,8OAAC,6KAAuB;QACtB,aAAU;QACV,aAAW;QACX,WAAW,IAAA,kHAAE,EACX,gzBACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,0KAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,2OAAe;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAInC;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,WAAW,QAAQ,EACnB,QAAQ,QAAQ,EAChB,GAAG,OACkD;IACrD,qBACE,8OAAC,4KAAsB;kBACrB,cAAA,8OAAC,6KAAuB;YACtB,aAAU;YACV,WAAW,IAAA,kHAAE,EACX,ijBACA,aAAa,YACX,mIACF;YAEF,UAAU;YACV,OAAO;YACN,GAAG,KAAK;;8BAET,8OAAC;;;;;8BACD,8OAAC,8KAAwB;oBACvB,WAAW,IAAA,kHAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,8OAAC;;;;;;;;;;;;;;;;AAIT;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,2KAAqB;QACpB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAClB,SAAS,EACT,QAAQ,EACR,GAAG,OAC+C;IAClD,qBACE,8OAAC,0KAAoB;QACnB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,6aACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,mLAA6B;8BAC5B,cAAA,8OAAC,qNAAS;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAGzB,8OAAC,8KAAwB;0BAAE;;;;;;;;;;;;AAGjC;AAEA,SAAS,gBAAgB,EACvB,SAAS,EACT,GAAG,OACoD;IACvD,qBACE,8OAAC,+KAAyB;QACxB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iDAAiD;QAC9D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,qBAAqB,EAC5B,SAAS,EACT,GAAG,OACyD;IAC5D,qBACE,8OAAC,oLAA8B;QAC7B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,qOAAa;YAAC,WAAU;;;;;;;;;;;AAG/B;AAEA,SAAS,uBAAuB,EAC9B,SAAS,EACT,GAAG,OAC2D;IAC9D,qBACE,8OAAC,sLAAgC;QAC/B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,2OAAe;YAAC,WAAU;;;;;;;;;;;AAGjC","debugId":null}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\n  return (\n    <input\n      type={type}\n      data-slot=\"input\"\n      className={cn(\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAEA;;;AAEA,SAAS,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAsC;IACzE,qBACE,8OAAC;QACC,MAAM;QACN,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,8bACA,iFACA,0GACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 504, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Label({\n  className,\n  ...props\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\n  return (\n    <LabelPrimitive.Root\n      data-slot=\"label\"\n      className={cn(\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,MAAM,EACb,SAAS,EACT,GAAG,OAC8C;IACjD,qBACE,8OAAC,yKAAmB;QAClB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,uNACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 531, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/users.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role, MembershipStatus } from '@prisma/client'\nimport { createClient } from '@/lib/supabase/server'\nimport { createAdminClient } from '@/lib/supabase/admin'\n\nexport async function inviteUser(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Apenas administradores podem convidar usuários' }\n  }\n\n  const email = formData.get('email') as string\n  const userRole = formData.get('role') as Role\n\n  if (!email || !userRole) {\n    return { error: 'Email e função são obrigatórios' }\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  if (!emailRegex.test(email)) {\n    return { error: 'Email inválido. Use o formato: usuario@empresa.com' }\n  }\n\n  try {\n    const supabaseAdmin = createAdminClient()\n    \n    // Check if user already exists in Supabase Auth\n    const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers()\n    let targetUser = existingUsers?.users.find(u => u.email?.toLowerCase() === email.toLowerCase())\n\n    // Check if there's already a membership for this email/company\n    if (targetUser) {\n      const existingMembership = await prisma.membership.findUnique({\n        where: {\n          userId_companyId: {\n            userId: targetUser.id,\n            companyId,\n          }\n        }\n      })\n\n      if (existingMembership) {\n        if (existingMembership.status === 'INVITED') {\n          return { error: 'Este usuário já tem um convite pendente para esta empresa' }\n        }\n        return { error: 'Este usuário já está associado a esta empresa' }\n      }\n    }\n\n    // If user doesn't exist, invite them via Supabase\n    if (!targetUser) {\n      const { data: inviteData, error: inviteError } = await supabaseAdmin.auth.admin.inviteUserByEmail(email, {\n        data: {\n          invited_by: user.id,\n          company_id: companyId,\n        }\n      })\n\n      if (inviteError) {\n        console.error('Erro ao enviar convite Supabase:', inviteError)\n        return { error: 'Erro ao enviar convite por email' }\n      }\n\n      targetUser = inviteData.user\n    }\n\n    // Create membership with INVITED status\n    const membership = await prisma.membership.create({\n      data: {\n        userId: targetUser.id,\n        companyId,\n        role: userRole,\n        status: 'INVITED',\n      }\n    })\n\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership }\n  } catch (error) {\n    console.error('Erro ao convidar usuário:', error)\n    return { error: 'Erro ao convidar usuário' }\n  }\n}\n\nexport async function resendInvite(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    if (membership.status !== 'INVITED') {\n      return { error: 'Apenas convites pendentes podem ser reenviados' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para reenviar convites' }\n    }\n\n    // Get user email from Supabase\n    const supabaseAdmin = createAdminClient()\n    const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(membership.userId)\n\n    if (!authUser.user?.email) {\n      return { error: 'Email do usuário não encontrado' }\n    }\n\n    // Try to resend invite - if user already exists, use generateLink instead\n    let inviteError\n    const inviteResult = await supabaseAdmin.auth.admin.inviteUserByEmail(authUser.user.email, {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n      data: {\n        invited_by: user.id,\n        company_id: membership.companyId,\n      }\n    })\n    \n    inviteError = inviteResult.error\n\n    // If user already exists (email_exists error), use generateLink approach\n    if (inviteError && inviteError.message?.includes('already been registered')) {\n      const { data: linkData, error: linkError } = await supabaseAdmin.auth.admin.generateLink({\n        type: 'magiclink',\n        email: authUser.user.email,\n      })\n\n      if (linkError) {\n        console.error('Erro ao gerar link de convite:', linkError)\n        return { error: 'Erro ao reenviar convite. Por favor, tente novamente.' }\n      }\n\n      // Note: generateLink creates the link but doesn't send email automatically\n      // The link is in linkData.properties.action_link\n      // For now, we'll just update the membership timestamp\n      console.log('Link de convite gerado (configurar envio de email customizado):', linkData.properties?.action_link)\n      \n      // TODO: Implement custom email sending with the generated link\n      // For now, return success but user won't receive email\n      return { \n        success: true, \n        warning: 'Link gerado. Configure o envio de email customizado para que o usuário receba o convite.' \n      }\n    }\n\n    if (inviteError) {\n      console.error('Erro ao reenviar convite:', inviteError)\n      return { error: 'Erro ao reenviar convite por email' }\n    }\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao reenviar convite:', error)\n    return { error: 'Erro ao reenviar convite' }\n  }\n}\n\nexport async function updateUserRole(membershipId: string, newRole: Role) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para alterar funções' }\n    }\n\n    const updated = await prisma.membership.update({\n      where: { id: membershipId },\n      data: { role: newRole }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership: updated }\n  } catch (error) {\n    console.error('Erro ao atualizar função:', error)\n    return { error: 'Erro ao atualizar função' }\n  }\n}\n\nexport async function removeUserFromCompany(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para remover usuários' }\n    }\n\n    await prisma.membership.delete({\n      where: { id: membershipId }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao remover usuário:', error)\n    return { error: 'Erro ao remover usuário' }\n  }\n}\n\nexport async function getCompanyUsers(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar usuários desta empresa' }\n  }\n\n  try {\n    const memberships = await prisma.membership.findMany({\n      where: { companyId },\n      include: {\n        company: true\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      return {\n        ...membership,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function getAllUsers() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let memberships\n\n    if (isAdmin) {\n      memberships = await prisma.membership.findMany({\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const userMemberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = userMemberships.map(m => m.companyId)\n\n      memberships = await prisma.membership.findMany({\n        where: {\n          companyId: {\n            in: companyIds\n          }\n        },\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    // Get all platform admins to override their role display\n    const platformAdmins = await prisma.platformAdmin.findMany({\n      select: {\n        userId: true\n      }\n    })\n    const platformAdminIds = new Set(platformAdmins.map(pa => pa.userId))\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      \n      // If user is a platform admin, override their role for display\n      const effectiveRole = platformAdminIds.has(membership.userId) \n        ? 'PLATFORM_ADMIN' as Role\n        : membership.role\n\n      return {\n        ...membership,\n        role: effectiveRole,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function makePlatformAdmin(userId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem promover usuários' }\n  }\n\n  try {\n    const admin = await prisma.platformAdmin.create({\n      data: {\n        userId,\n      }\n    })\n\n    revalidatePath('/dashboard/users')\n    return { success: true, admin }\n  } catch (error) {\n    console.error('Erro ao promover usuário:', error)\n    return { error: 'Este usuário já é administrador da plataforma' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IASsB,aAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 543, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/invite-user-dialog.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { UserPlus } from 'lucide-react'\nimport { inviteUser } from '@/app/actions/users'\n\ninterface InviteUserDialogProps {\n  companies: Array<{\n    id: string\n    name: string\n  }>\n}\n\nexport function InviteUserDialog({ companies }: InviteUserDialogProps) {\n  const [open, setOpen] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState(false)\n  const [companyId, setCompanyId] = useState('')\n  const [role, setRole] = useState('')\n\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n    setSuccess(false)\n\n    const formData = new FormData(e.currentTarget)\n    \n    formData.set('companyId', companyId)\n    formData.set('role', role)\n\n    const result = await inviteUser(companyId, formData)\n\n    if (result.error) {\n      setError(result.error)\n      setLoading(false)\n    } else {\n      setSuccess(true)\n      setLoading(false)\n      setTimeout(() => {\n        setOpen(false)\n        setSuccess(false)\n        setCompanyId('')\n        setRole('')\n        e.currentTarget.reset()\n      }, 1500)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button className=\"gap-2\">\n          <UserPlus className=\"h-4 w-4\" />\n          Convidar Usuário\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Convidar Novo Usuário</DialogTitle>\n          <DialogDescription>\n            Envie um convite por email para um novo usuário acessar a plataforma\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4 pt-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">\n              Email do Usuário <span className=\"text-destructive\">*</span>\n            </Label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"usuario@empresa.com\"\n              required\n              disabled={loading}\n            />\n            <p className=\"text-xs text-muted-foreground\">\n              Um email será enviado com instruções para criar a senha\n            </p>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"companyId\">\n              Empresa <span className=\"text-destructive\">*</span>\n            </Label>\n            <Select value={companyId} onValueChange={setCompanyId} disabled={loading}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione uma empresa\" />\n              </SelectTrigger>\n              <SelectContent>\n                {companies.map((company) => (\n                  <SelectItem key={company.id} value={company.id}>\n                    {company.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"role\">\n              Papel <span className=\"text-destructive\">*</span>\n            </Label>\n            <Select value={role} onValueChange={setRole} disabled={loading}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione um papel\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"COMPANY_ADMIN\">Administrador da Empresa</SelectItem>\n                <SelectItem value=\"ENGINEER\">Engenheiro SST</SelectItem>\n                <SelectItem value=\"EMPLOYER\">Funcionário</SelectItem>\n                <SelectItem value=\"VIEWER\">Visualizador</SelectItem>\n              </SelectContent>\n            </Select>\n            <p className=\"text-xs text-muted-foreground\">\n              Define as permissões do usuário na empresa\n            </p>\n          </div>\n\n          {error && (\n            <div className=\"bg-destructive/10 text-destructive p-3 rounded-lg text-sm\">\n              {error}\n            </div>\n          )}\n\n          {success && (\n            <div className=\"bg-green-100 text-green-700 p-3 rounded-lg text-sm\">\n              Usuário adicionado com sucesso!\n            </div>\n          )}\n\n          <div className=\"flex gap-3 pt-2\">\n            <Button\n              type=\"submit\"\n              disabled={loading || success || !companyId || !role}\n              className=\"flex-1\"\n            >\n              {loading ? 'Adicionando...' : success ? 'Adicionado!' : 'Adicionar Usuário'}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setOpen(false)}\n              disabled={loading}\n              className=\"flex-1\"\n            >\n              Cancelar\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-2 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,4JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 1037, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nfunction AlertDialog({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {\n  return <AlertDialogPrimitive.Root data-slot=\"alert-dialog\" {...props} />\n}\n\nfunction AlertDialogTrigger({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {\n  return (\n    <AlertDialogPrimitive.Trigger data-slot=\"alert-dialog-trigger\" {...props} />\n  )\n}\n\nfunction AlertDialogPortal({\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {\n  return (\n    <AlertDialogPrimitive.Portal data-slot=\"alert-dialog-portal\" {...props} />\n  )\n}\n\nfunction AlertDialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {\n  return (\n    <AlertDialogPrimitive.Overlay\n      data-slot=\"alert-dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {\n  return (\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogPrimitive.Content\n        data-slot=\"alert-dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      />\n    </AlertDialogPortal>\n  )\n}\n\nfunction AlertDialogHeader({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogFooter({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {\n  return (\n    <AlertDialogPrimitive.Title\n      data-slot=\"alert-dialog-title\"\n      className={cn(\"text-lg font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {\n  return (\n    <AlertDialogPrimitive.Description\n      data-slot=\"alert-dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogAction({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {\n  return (\n    <AlertDialogPrimitive.Action\n      className={cn(buttonVariants(), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDialogCancel({\n  className,\n  ...props\n}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {\n  return (\n    <AlertDialogPrimitive.Cancel\n      className={cn(buttonVariants({ variant: \"outline\" }), className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAEA;AACA;AANA;;;;;AAQA,SAAS,YAAY,EACnB,GAAG,OACoD;IACvD,qBAAO,8OAAC,mLAAyB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AACtE;AAEA,SAAS,mBAAmB,EAC1B,GAAG,OACuD;IAC1D,qBACE,8OAAC,sLAA4B;QAAC,aAAU;QAAwB,GAAG,KAAK;;;;;;AAE5E;AAEA,SAAS,kBAAkB,EACzB,GAAG,OACsD;IACzD,qBACE,8OAAC,qLAA2B;QAAC,aAAU;QAAuB,GAAG,KAAK;;;;;;AAE1E;AAEA,SAAS,mBAAmB,EAC1B,SAAS,EACT,GAAG,OACuD;IAC1D,qBACE,8OAAC,sLAA4B;QAC3B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,mBAAmB,EAC1B,SAAS,EACT,GAAG,OACuD;IAC1D,qBACE,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,sLAA4B;gBAC3B,aAAU;gBACV,WAAW,IAAA,kHAAE,EACX,+WACA;gBAED,GAAG,KAAK;;;;;;;;;;;;AAIjB;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACyB;IAC5B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACyB;IAC5B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,0DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,iBAAiB,EACxB,SAAS,EACT,GAAG,OACqD;IACxD,qBACE,8OAAC,oLAA0B;QACzB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,yBAAyB;QACtC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,uBAAuB,EAC9B,SAAS,EACT,GAAG,OAC2D;IAC9D,qBACE,8OAAC,0LAAgC;QAC/B,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsD;IACzD,qBACE,8OAAC,qLAA2B;QAC1B,WAAW,IAAA,kHAAE,EAAC,IAAA,6IAAc,KAAI;QAC/B,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsD;IACzD,qBACE,8OAAC,qLAA2B;QAC1B,WAAW,IAAA,kHAAE,EAAC,IAAA,6IAAc,EAAC;YAAE,SAAS;QAAU,IAAI;QACrD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 1206, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/users.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role, MembershipStatus } from '@prisma/client'\nimport { createClient } from '@/lib/supabase/server'\nimport { createAdminClient } from '@/lib/supabase/admin'\n\nexport async function inviteUser(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Apenas administradores podem convidar usuários' }\n  }\n\n  const email = formData.get('email') as string\n  const userRole = formData.get('role') as Role\n\n  if (!email || !userRole) {\n    return { error: 'Email e função são obrigatórios' }\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  if (!emailRegex.test(email)) {\n    return { error: 'Email inválido. Use o formato: usuario@empresa.com' }\n  }\n\n  try {\n    const supabaseAdmin = createAdminClient()\n    \n    // Check if user already exists in Supabase Auth\n    const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers()\n    let targetUser = existingUsers?.users.find(u => u.email?.toLowerCase() === email.toLowerCase())\n\n    // Check if there's already a membership for this email/company\n    if (targetUser) {\n      const existingMembership = await prisma.membership.findUnique({\n        where: {\n          userId_companyId: {\n            userId: targetUser.id,\n            companyId,\n          }\n        }\n      })\n\n      if (existingMembership) {\n        if (existingMembership.status === 'INVITED') {\n          return { error: 'Este usuário já tem um convite pendente para esta empresa' }\n        }\n        return { error: 'Este usuário já está associado a esta empresa' }\n      }\n    }\n\n    // If user doesn't exist, invite them via Supabase\n    if (!targetUser) {\n      const { data: inviteData, error: inviteError } = await supabaseAdmin.auth.admin.inviteUserByEmail(email, {\n        data: {\n          invited_by: user.id,\n          company_id: companyId,\n        }\n      })\n\n      if (inviteError) {\n        console.error('Erro ao enviar convite Supabase:', inviteError)\n        return { error: 'Erro ao enviar convite por email' }\n      }\n\n      targetUser = inviteData.user\n    }\n\n    // Create membership with INVITED status\n    const membership = await prisma.membership.create({\n      data: {\n        userId: targetUser.id,\n        companyId,\n        role: userRole,\n        status: 'INVITED',\n      }\n    })\n\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership }\n  } catch (error) {\n    console.error('Erro ao convidar usuário:', error)\n    return { error: 'Erro ao convidar usuário' }\n  }\n}\n\nexport async function resendInvite(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    if (membership.status !== 'INVITED') {\n      return { error: 'Apenas convites pendentes podem ser reenviados' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para reenviar convites' }\n    }\n\n    // Get user email from Supabase\n    const supabaseAdmin = createAdminClient()\n    const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(membership.userId)\n\n    if (!authUser.user?.email) {\n      return { error: 'Email do usuário não encontrado' }\n    }\n\n    // Try to resend invite - if user already exists, use generateLink instead\n    let inviteError\n    const inviteResult = await supabaseAdmin.auth.admin.inviteUserByEmail(authUser.user.email, {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n      data: {\n        invited_by: user.id,\n        company_id: membership.companyId,\n      }\n    })\n    \n    inviteError = inviteResult.error\n\n    // If user already exists (email_exists error), use generateLink approach\n    if (inviteError && inviteError.message?.includes('already been registered')) {\n      const { data: linkData, error: linkError } = await supabaseAdmin.auth.admin.generateLink({\n        type: 'magiclink',\n        email: authUser.user.email,\n      })\n\n      if (linkError) {\n        console.error('Erro ao gerar link de convite:', linkError)\n        return { error: 'Erro ao reenviar convite. Por favor, tente novamente.' }\n      }\n\n      // Note: generateLink creates the link but doesn't send email automatically\n      // The link is in linkData.properties.action_link\n      // For now, we'll just update the membership timestamp\n      console.log('Link de convite gerado (configurar envio de email customizado):', linkData.properties?.action_link)\n      \n      // TODO: Implement custom email sending with the generated link\n      // For now, return success but user won't receive email\n      return { \n        success: true, \n        warning: 'Link gerado. Configure o envio de email customizado para que o usuário receba o convite.' \n      }\n    }\n\n    if (inviteError) {\n      console.error('Erro ao reenviar convite:', inviteError)\n      return { error: 'Erro ao reenviar convite por email' }\n    }\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao reenviar convite:', error)\n    return { error: 'Erro ao reenviar convite' }\n  }\n}\n\nexport async function updateUserRole(membershipId: string, newRole: Role) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para alterar funções' }\n    }\n\n    const updated = await prisma.membership.update({\n      where: { id: membershipId },\n      data: { role: newRole }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership: updated }\n  } catch (error) {\n    console.error('Erro ao atualizar função:', error)\n    return { error: 'Erro ao atualizar função' }\n  }\n}\n\nexport async function removeUserFromCompany(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para remover usuários' }\n    }\n\n    await prisma.membership.delete({\n      where: { id: membershipId }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao remover usuário:', error)\n    return { error: 'Erro ao remover usuário' }\n  }\n}\n\nexport async function getCompanyUsers(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar usuários desta empresa' }\n  }\n\n  try {\n    const memberships = await prisma.membership.findMany({\n      where: { companyId },\n      include: {\n        company: true\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      return {\n        ...membership,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function getAllUsers() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let memberships\n\n    if (isAdmin) {\n      memberships = await prisma.membership.findMany({\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const userMemberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = userMemberships.map(m => m.companyId)\n\n      memberships = await prisma.membership.findMany({\n        where: {\n          companyId: {\n            in: companyIds\n          }\n        },\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    // Get all platform admins to override their role display\n    const platformAdmins = await prisma.platformAdmin.findMany({\n      select: {\n        userId: true\n      }\n    })\n    const platformAdminIds = new Set(platformAdmins.map(pa => pa.userId))\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      \n      // If user is a platform admin, override their role for display\n      const effectiveRole = platformAdminIds.has(membership.userId) \n        ? 'PLATFORM_ADMIN' as Role\n        : membership.role\n\n      return {\n        ...membership,\n        role: effectiveRole,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function makePlatformAdmin(userId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem promover usuários' }\n  }\n\n  try {\n    const admin = await prisma.platformAdmin.create({\n      data: {\n        userId,\n      }\n    })\n\n    revalidatePath('/dashboard/users')\n    return { success: true, admin }\n  } catch (error) {\n    console.error('Erro ao promover usuário:', error)\n    return { error: 'Este usuário já é administrador da plataforma' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAqLsB,iBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1218, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/edit-user-role-dialog.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\nimport { Label } from '@/components/ui/label'\nimport { updateUserRole } from '@/app/actions/users'\nimport { Role } from '@prisma/client'\n\ninterface EditUserRoleDialogProps {\n  open: boolean\n  onOpenChange: (open: boolean) => void\n  user: {\n    id: string\n    email?: string\n    name?: string\n    role: Role\n  }\n}\n\nexport function EditUserRoleDialog({ open, onOpenChange, user }: EditUserRoleDialogProps) {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState('')\n  const [success, setSuccess] = useState(false)\n  const [selectedRole, setSelectedRole] = useState<Role>(user.role)\n\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n    setSuccess(false)\n\n    const result = await updateUserRole(user.id, selectedRole)\n\n    if (result.error) {\n      setError(result.error)\n      setLoading(false)\n    } else {\n      setSuccess(true)\n      setLoading(false)\n      setTimeout(() => {\n        onOpenChange(false)\n        setSuccess(false)\n      }, 1500)\n    }\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[400px]\">\n        <DialogHeader>\n          <DialogTitle>Editar Papel do Usuário</DialogTitle>\n          <DialogDescription>\n            Altere o papel de {user.name || user.email}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4 pt-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"role\">\n              Papel <span className=\"text-destructive\">*</span>\n            </Label>\n            <Select value={selectedRole} onValueChange={(value) => setSelectedRole(value as Role)} disabled={loading}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione um papel\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"COMPANY_ADMIN\">Administrador da Empresa</SelectItem>\n                <SelectItem value=\"ENGINEER\">Engenheiro SST</SelectItem>\n                <SelectItem value=\"EMPLOYER\">Funcionário</SelectItem>\n                <SelectItem value=\"VIEWER\">Visualizador</SelectItem>\n              </SelectContent>\n            </Select>\n            <p className=\"text-xs text-muted-foreground\">\n              Define as permissões do usuário na empresa\n            </p>\n          </div>\n\n          {error && (\n            <div className=\"bg-destructive/10 text-destructive p-3 rounded-lg text-sm\">\n              {error}\n            </div>\n          )}\n\n          {success && (\n            <div className=\"bg-green-500/10 text-green-700 p-3 rounded-lg text-sm\">\n              Papel atualizado com sucesso!\n            </div>\n          )}\n\n          <div className=\"flex gap-3 pt-2\">\n            <Button\n              type=\"submit\"\n              disabled={loading || success || selectedRole === user.role}\n              className=\"flex-1\"\n            >\n              {loading ? 'Salvando...' : success ? 'Salvo!' : 'Salvar'}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              disabled={loading}\n              className=\"flex-1\"\n            >\n              Cancelar\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  )\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAOA;AAOA;AACA;AAnBA;;;;;;;;AAiCO,SAAS,mBAAmB,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAA2B;IACtF,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,iNAAQ,EAAC;IACnC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IACvC,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAO,KAAK,IAAI;IAEhE,eAAe,aAAa,CAAmC;QAC7D,EAAE,cAAc;QAChB,WAAW;QACX,SAAS;QACT,WAAW;QAEX,MAAM,SAAS,MAAM,IAAA,wKAAc,EAAC,KAAK,EAAE,EAAE;QAE7C,IAAI,OAAO,KAAK,EAAE;YAChB,SAAS,OAAO,KAAK;YACrB,WAAW;QACb,OAAO;YACL,WAAW;YACX,WAAW;YACX,WAAW;gBACT,aAAa;gBACb,WAAW;YACb,GAAG;QACL;IACF;IAEA,qBACE,8OAAC,qIAAM;QAAC,MAAM;QAAM,cAAc;kBAChC,cAAA,8OAAC,4IAAa;YAAC,WAAU;;8BACvB,8OAAC,2IAAY;;sCACX,8OAAC,0IAAW;sCAAC;;;;;;sCACb,8OAAC,gJAAiB;;gCAAC;gCACE,KAAK,IAAI,IAAI,KAAK,KAAK;;;;;;;;;;;;;8BAI9C,8OAAC;oBAAK,UAAU;oBAAc,WAAU;;sCACtC,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,mIAAK;oCAAC,SAAQ;;wCAAO;sDACd,8OAAC;4CAAK,WAAU;sDAAmB;;;;;;;;;;;;8CAE3C,8OAAC,qIAAM;oCAAC,OAAO;oCAAc,eAAe,CAAC,QAAU,gBAAgB;oCAAgB,UAAU;;sDAC/F,8OAAC,4IAAa;sDACZ,cAAA,8OAAC,0IAAW;gDAAC,aAAY;;;;;;;;;;;sDAE3B,8OAAC,4IAAa;;8DACZ,8OAAC,yIAAU;oDAAC,OAAM;8DAAgB;;;;;;8DAClC,8OAAC,yIAAU;oDAAC,OAAM;8DAAW;;;;;;8DAC7B,8OAAC,yIAAU;oDAAC,OAAM;8DAAW;;;;;;8DAC7B,8OAAC,yIAAU;oDAAC,OAAM;8DAAS;;;;;;;;;;;;;;;;;;8CAG/B,8OAAC;oCAAE,WAAU;8CAAgC;;;;;;;;;;;;wBAK9C,uBACC,8OAAC;4BAAI,WAAU;sCACZ;;;;;;wBAIJ,yBACC,8OAAC;4BAAI,WAAU;sCAAwD;;;;;;sCAKzE,8OAAC;4BAAI,WAAU;;8CACb,8OAAC,qIAAM;oCACL,MAAK;oCACL,UAAU,WAAW,WAAW,iBAAiB,KAAK,IAAI;oCAC1D,WAAU;8CAET,UAAU,gBAAgB,UAAU,WAAW;;;;;;8CAElD,8OAAC,qIAAM;oCACL,MAAK;oCACL,SAAQ;oCACR,SAAS,IAAM,aAAa;oCAC5B,UAAU;oCACV,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQb","debugId":null}},
    {"offset": {"line": 1463, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/users.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role, MembershipStatus } from '@prisma/client'\nimport { createClient } from '@/lib/supabase/server'\nimport { createAdminClient } from '@/lib/supabase/admin'\n\nexport async function inviteUser(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Apenas administradores podem convidar usuários' }\n  }\n\n  const email = formData.get('email') as string\n  const userRole = formData.get('role') as Role\n\n  if (!email || !userRole) {\n    return { error: 'Email e função são obrigatórios' }\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  if (!emailRegex.test(email)) {\n    return { error: 'Email inválido. Use o formato: usuario@empresa.com' }\n  }\n\n  try {\n    const supabaseAdmin = createAdminClient()\n    \n    // Check if user already exists in Supabase Auth\n    const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers()\n    let targetUser = existingUsers?.users.find(u => u.email?.toLowerCase() === email.toLowerCase())\n\n    // Check if there's already a membership for this email/company\n    if (targetUser) {\n      const existingMembership = await prisma.membership.findUnique({\n        where: {\n          userId_companyId: {\n            userId: targetUser.id,\n            companyId,\n          }\n        }\n      })\n\n      if (existingMembership) {\n        if (existingMembership.status === 'INVITED') {\n          return { error: 'Este usuário já tem um convite pendente para esta empresa' }\n        }\n        return { error: 'Este usuário já está associado a esta empresa' }\n      }\n    }\n\n    // If user doesn't exist, invite them via Supabase\n    if (!targetUser) {\n      const { data: inviteData, error: inviteError } = await supabaseAdmin.auth.admin.inviteUserByEmail(email, {\n        data: {\n          invited_by: user.id,\n          company_id: companyId,\n        }\n      })\n\n      if (inviteError) {\n        console.error('Erro ao enviar convite Supabase:', inviteError)\n        return { error: 'Erro ao enviar convite por email' }\n      }\n\n      targetUser = inviteData.user\n    }\n\n    // Create membership with INVITED status\n    const membership = await prisma.membership.create({\n      data: {\n        userId: targetUser.id,\n        companyId,\n        role: userRole,\n        status: 'INVITED',\n      }\n    })\n\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership }\n  } catch (error) {\n    console.error('Erro ao convidar usuário:', error)\n    return { error: 'Erro ao convidar usuário' }\n  }\n}\n\nexport async function resendInvite(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    if (membership.status !== 'INVITED') {\n      return { error: 'Apenas convites pendentes podem ser reenviados' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para reenviar convites' }\n    }\n\n    // Get user email from Supabase\n    const supabaseAdmin = createAdminClient()\n    const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(membership.userId)\n\n    if (!authUser.user?.email) {\n      return { error: 'Email do usuário não encontrado' }\n    }\n\n    // Try to resend invite - if user already exists, use generateLink instead\n    let inviteError\n    const inviteResult = await supabaseAdmin.auth.admin.inviteUserByEmail(authUser.user.email, {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n      data: {\n        invited_by: user.id,\n        company_id: membership.companyId,\n      }\n    })\n    \n    inviteError = inviteResult.error\n\n    // If user already exists (email_exists error), use generateLink approach\n    if (inviteError && inviteError.message?.includes('already been registered')) {\n      const { data: linkData, error: linkError } = await supabaseAdmin.auth.admin.generateLink({\n        type: 'magiclink',\n        email: authUser.user.email,\n      })\n\n      if (linkError) {\n        console.error('Erro ao gerar link de convite:', linkError)\n        return { error: 'Erro ao reenviar convite. Por favor, tente novamente.' }\n      }\n\n      // Note: generateLink creates the link but doesn't send email automatically\n      // The link is in linkData.properties.action_link\n      // For now, we'll just update the membership timestamp\n      console.log('Link de convite gerado (configurar envio de email customizado):', linkData.properties?.action_link)\n      \n      // TODO: Implement custom email sending with the generated link\n      // For now, return success but user won't receive email\n      return { \n        success: true, \n        warning: 'Link gerado. Configure o envio de email customizado para que o usuário receba o convite.' \n      }\n    }\n\n    if (inviteError) {\n      console.error('Erro ao reenviar convite:', inviteError)\n      return { error: 'Erro ao reenviar convite por email' }\n    }\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao reenviar convite:', error)\n    return { error: 'Erro ao reenviar convite' }\n  }\n}\n\nexport async function updateUserRole(membershipId: string, newRole: Role) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para alterar funções' }\n    }\n\n    const updated = await prisma.membership.update({\n      where: { id: membershipId },\n      data: { role: newRole }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership: updated }\n  } catch (error) {\n    console.error('Erro ao atualizar função:', error)\n    return { error: 'Erro ao atualizar função' }\n  }\n}\n\nexport async function removeUserFromCompany(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para remover usuários' }\n    }\n\n    await prisma.membership.delete({\n      where: { id: membershipId }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao remover usuário:', error)\n    return { error: 'Erro ao remover usuário' }\n  }\n}\n\nexport async function getCompanyUsers(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar usuários desta empresa' }\n  }\n\n  try {\n    const memberships = await prisma.membership.findMany({\n      where: { companyId },\n      include: {\n        company: true\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      return {\n        ...membership,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function getAllUsers() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let memberships\n\n    if (isAdmin) {\n      memberships = await prisma.membership.findMany({\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const userMemberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = userMemberships.map(m => m.companyId)\n\n      memberships = await prisma.membership.findMany({\n        where: {\n          companyId: {\n            in: companyIds\n          }\n        },\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    // Get all platform admins to override their role display\n    const platformAdmins = await prisma.platformAdmin.findMany({\n      select: {\n        userId: true\n      }\n    })\n    const platformAdminIds = new Set(platformAdmins.map(pa => pa.userId))\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      \n      // If user is a platform admin, override their role for display\n      const effectiveRole = platformAdminIds.has(membership.userId) \n        ? 'PLATFORM_ADMIN' as Role\n        : membership.role\n\n      return {\n        ...membership,\n        role: effectiveRole,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function makePlatformAdmin(userId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem promover usuários' }\n  }\n\n  try {\n    const admin = await prisma.platformAdmin.create({\n      data: {\n        userId,\n      }\n    })\n\n    revalidatePath('/dashboard/users')\n    return { success: true, admin }\n  } catch (error) {\n    console.error('Erro ao promover usuário:', error)\n    return { error: 'Este usuário já é administrador da plataforma' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAgGsB,eAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1475, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/actions/users.ts"],"sourcesContent":["'use server'\n\nimport { revalidatePath } from 'next/cache'\nimport { prisma } from '@/lib/prisma'\nimport { getCurrentUser, isPlatformAdmin, getUserRole } from '@/lib/auth'\nimport { Role, MembershipStatus } from '@prisma/client'\nimport { createClient } from '@/lib/supabase/server'\nimport { createAdminClient } from '@/lib/supabase/admin'\n\nexport async function inviteUser(companyId: string, formData: FormData) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && role !== 'COMPANY_ADMIN') {\n    return { error: 'Apenas administradores podem convidar usuários' }\n  }\n\n  const email = formData.get('email') as string\n  const userRole = formData.get('role') as Role\n\n  if (!email || !userRole) {\n    return { error: 'Email e função são obrigatórios' }\n  }\n\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  if (!emailRegex.test(email)) {\n    return { error: 'Email inválido. Use o formato: usuario@empresa.com' }\n  }\n\n  try {\n    const supabaseAdmin = createAdminClient()\n    \n    // Check if user already exists in Supabase Auth\n    const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers()\n    let targetUser = existingUsers?.users.find(u => u.email?.toLowerCase() === email.toLowerCase())\n\n    // Check if there's already a membership for this email/company\n    if (targetUser) {\n      const existingMembership = await prisma.membership.findUnique({\n        where: {\n          userId_companyId: {\n            userId: targetUser.id,\n            companyId,\n          }\n        }\n      })\n\n      if (existingMembership) {\n        if (existingMembership.status === 'INVITED') {\n          return { error: 'Este usuário já tem um convite pendente para esta empresa' }\n        }\n        return { error: 'Este usuário já está associado a esta empresa' }\n      }\n    }\n\n    // If user doesn't exist, invite them via Supabase\n    if (!targetUser) {\n      const { data: inviteData, error: inviteError } = await supabaseAdmin.auth.admin.inviteUserByEmail(email, {\n        data: {\n          invited_by: user.id,\n          company_id: companyId,\n        }\n      })\n\n      if (inviteError) {\n        console.error('Erro ao enviar convite Supabase:', inviteError)\n        return { error: 'Erro ao enviar convite por email' }\n      }\n\n      targetUser = inviteData.user\n    }\n\n    // Create membership with INVITED status\n    const membership = await prisma.membership.create({\n      data: {\n        userId: targetUser.id,\n        companyId,\n        role: userRole,\n        status: 'INVITED',\n      }\n    })\n\n    revalidatePath(`/dashboard/companies/${companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership }\n  } catch (error) {\n    console.error('Erro ao convidar usuário:', error)\n    return { error: 'Erro ao convidar usuário' }\n  }\n}\n\nexport async function resendInvite(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    if (membership.status !== 'INVITED') {\n      return { error: 'Apenas convites pendentes podem ser reenviados' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para reenviar convites' }\n    }\n\n    // Get user email from Supabase\n    const supabaseAdmin = createAdminClient()\n    const { data: authUser } = await supabaseAdmin.auth.admin.getUserById(membership.userId)\n\n    if (!authUser.user?.email) {\n      return { error: 'Email do usuário não encontrado' }\n    }\n\n    // Try to resend invite - if user already exists, use generateLink instead\n    let inviteError\n    const inviteResult = await supabaseAdmin.auth.admin.inviteUserByEmail(authUser.user.email, {\n      redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/auth/callback`,\n      data: {\n        invited_by: user.id,\n        company_id: membership.companyId,\n      }\n    })\n    \n    inviteError = inviteResult.error\n\n    // If user already exists (email_exists error), use generateLink approach\n    if (inviteError && inviteError.message?.includes('already been registered')) {\n      const { data: linkData, error: linkError } = await supabaseAdmin.auth.admin.generateLink({\n        type: 'magiclink',\n        email: authUser.user.email,\n      })\n\n      if (linkError) {\n        console.error('Erro ao gerar link de convite:', linkError)\n        return { error: 'Erro ao reenviar convite. Por favor, tente novamente.' }\n      }\n\n      // Note: generateLink creates the link but doesn't send email automatically\n      // The link is in linkData.properties.action_link\n      // For now, we'll just update the membership timestamp\n      console.log('Link de convite gerado (configurar envio de email customizado):', linkData.properties?.action_link)\n      \n      // TODO: Implement custom email sending with the generated link\n      // For now, return success but user won't receive email\n      return { \n        success: true, \n        warning: 'Link gerado. Configure o envio de email customizado para que o usuário receba o convite.' \n      }\n    }\n\n    if (inviteError) {\n      console.error('Erro ao reenviar convite:', inviteError)\n      return { error: 'Erro ao reenviar convite por email' }\n    }\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao reenviar convite:', error)\n    return { error: 'Erro ao reenviar convite' }\n  }\n}\n\nexport async function updateUserRole(membershipId: string, newRole: Role) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para alterar funções' }\n    }\n\n    const updated = await prisma.membership.update({\n      where: { id: membershipId },\n      data: { role: newRole }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true, membership: updated }\n  } catch (error) {\n    console.error('Erro ao atualizar função:', error)\n    return { error: 'Erro ao atualizar função' }\n  }\n}\n\nexport async function removeUserFromCompany(membershipId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  try {\n    const membership = await prisma.membership.findUnique({\n      where: { id: membershipId }\n    })\n\n    if (!membership) {\n      return { error: 'Membro não encontrado' }\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    const role = await getUserRole(user.id, membership.companyId)\n\n    if (!isAdmin && role !== 'COMPANY_ADMIN') {\n      return { error: 'Sem permissão para remover usuários' }\n    }\n\n    await prisma.membership.delete({\n      where: { id: membershipId }\n    })\n\n    revalidatePath(`/dashboard/companies/${membership.companyId}`)\n    revalidatePath('/dashboard/users')\n    return { success: true }\n  } catch (error) {\n    console.error('Erro ao remover usuário:', error)\n    return { error: 'Erro ao remover usuário' }\n  }\n}\n\nexport async function getCompanyUsers(companyId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  const role = await getUserRole(user.id, companyId)\n\n  if (!isAdmin && !role) {\n    return { error: 'Sem permissão para acessar usuários desta empresa' }\n  }\n\n  try {\n    const memberships = await prisma.membership.findMany({\n      where: { companyId },\n      include: {\n        company: true\n      },\n      orderBy: {\n        createdAt: 'desc'\n      }\n    })\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      return {\n        ...membership,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function getAllUsers() {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n\n  try {\n    let memberships\n\n    if (isAdmin) {\n      memberships = await prisma.membership.findMany({\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    } else {\n      const userMemberships = await prisma.membership.findMany({\n        where: {\n          userId: user.id,\n          status: 'ACTIVE'\n        },\n        select: {\n          companyId: true\n        }\n      })\n\n      const companyIds = userMemberships.map(m => m.companyId)\n\n      memberships = await prisma.membership.findMany({\n        where: {\n          companyId: {\n            in: companyIds\n          }\n        },\n        include: {\n          company: true\n        },\n        orderBy: {\n          createdAt: 'desc'\n        }\n      })\n    }\n\n    const supabaseAdmin = createAdminClient()\n    const { data: authUsers } = await supabaseAdmin.auth.admin.listUsers()\n\n    // Get all platform admins to override their role display\n    const platformAdmins = await prisma.platformAdmin.findMany({\n      select: {\n        userId: true\n      }\n    })\n    const platformAdminIds = new Set(platformAdmins.map(pa => pa.userId))\n\n    const usersWithDetails = memberships.map(membership => {\n      const authUser = authUsers?.users.find(u => u.id === membership.userId)\n      \n      // If user is a platform admin, override their role for display\n      const effectiveRole = platformAdminIds.has(membership.userId) \n        ? 'PLATFORM_ADMIN' as Role\n        : membership.role\n\n      return {\n        ...membership,\n        role: effectiveRole,\n        email: authUser?.email,\n        name: authUser?.user_metadata?.name,\n      }\n    })\n\n    return { success: true, users: usersWithDetails }\n  } catch (error) {\n    console.error('Erro ao buscar usuários:', error)\n    return { error: 'Erro ao buscar usuários' }\n  }\n}\n\nexport async function makePlatformAdmin(userId: string) {\n  const user = await getCurrentUser()\n  if (!user) {\n    return { error: 'Não autorizado' }\n  }\n\n  const isAdmin = await isPlatformAdmin(user.id)\n  if (!isAdmin) {\n    return { error: 'Apenas administradores da plataforma podem promover usuários' }\n  }\n\n  try {\n    const admin = await prisma.platformAdmin.create({\n      data: {\n        userId,\n      }\n    })\n\n    revalidatePath('/dashboard/users')\n    return { success: true, admin }\n  } catch (error) {\n    console.error('Erro ao promover usuário:', error)\n    return { error: 'Este usuário já é administrador da plataforma' }\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAyNsB,wBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1487, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/components/dashboard/users-list.tsx"],"sourcesContent":["'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog'\nimport { Mail, MoreVertical, Pencil, Trash2, Send, Users, Shield, UserCog } from 'lucide-react'\nimport { EditUserRoleDialog } from './edit-user-role-dialog'\nimport { resendInvite, removeUserFromCompany } from '@/app/actions/users'\nimport { Role } from '@prisma/client'\nimport { useRouter } from 'next/navigation'\n\ninterface User {\n  id: string\n  userId: string\n  companyId: string\n  role: Role\n  status: string\n  email?: string\n  name?: string\n  company: {\n    id: string\n    name: string\n  }\n}\n\ninterface UsersListProps {\n  users: User[]\n}\n\nconst roleIcons = {\n  PLATFORM_ADMIN: { icon: Shield, color: 'bg-red-100 text-red-700', label: 'Admin Plataforma' },\n  COMPANY_ADMIN: { icon: UserCog, color: 'bg-orange-100 text-orange-700', label: 'Admin Empresa' },\n  ENGINEER: { icon: Users, color: 'bg-blue-100 text-blue-700', label: 'Engenheiro SST' },\n  EMPLOYER: { icon: Users, color: 'bg-green-100 text-green-700', label: 'Funcionário' },\n  VIEWER: { icon: Users, color: 'bg-gray-100 text-gray-700', label: 'Visualizador' },\n}\n\nexport function UsersList({ users }: UsersListProps) {\n  const router = useRouter()\n  const [editingUser, setEditingUser] = useState<User | null>(null)\n  const [removingUser, setRemovingUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState<string | null>(null)\n  const [error, setError] = useState('')\n\n  async function handleResendInvite(user: User) {\n    setLoading(user.id)\n    setError('')\n    \n    const result = await resendInvite(user.id)\n    \n    if (result.error) {\n      setError(result.error)\n    }\n    \n    setLoading(null)\n    router.refresh()\n  }\n\n  async function handleRemoveUser() {\n    if (!removingUser) return\n    \n    setLoading(removingUser.id)\n    setError('')\n    \n    const result = await removeUserFromCompany(removingUser.id)\n    \n    if (result.error) {\n      setError(result.error)\n    } else {\n      setRemovingUser(null)\n      router.refresh()\n    }\n    \n    setLoading(null)\n  }\n\n  if (users.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"flex flex-col items-center justify-center py-12\">\n          <Users className=\"h-16 w-16 text-muted-foreground/50 mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">\n            Nenhum usuário encontrado\n          </h3>\n          <p className=\"text-muted-foreground text-center max-w-md\">\n            Comece criando sua conta ou convidando membros para suas empresas\n          </p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <>\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"divide-y\">\n            {users.map((user) => {\n              const roleConfig = roleIcons[user.role]\n              const RoleIcon = roleConfig.icon\n              \n              return (\n                <div key={user.id} className=\"p-4 hover:bg-muted/50 transition-colors\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4 flex-1\">\n                      <div className={`p-3 rounded-lg ${roleConfig.color}`}>\n                        <RoleIcon className=\"h-5 w-5\" />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"font-semibold\">\n                          {user.name || user.email || 'Usuário sem nome'}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                          <Mail className=\"h-3 w-3\" />\n                          {user.email || user.userId}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium\">{user.company.name}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {roleConfig.label}\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\n                          ${user.status === 'ACTIVE' ? 'bg-green-100 text-green-700' : \n                            user.status === 'INVITED' ? 'bg-yellow-100 text-yellow-700' : \n                            'bg-gray-100 text-gray-700'}`}>\n                          {user.status === 'ACTIVE' ? 'Ativo' : user.status === 'INVITED' ? 'Convite Pendente' : 'Inativo'}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 p-0\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => setEditingUser(user)}>\n                          <Pencil className=\"h-4 w-4 mr-2\" />\n                          Editar Papel\n                        </DropdownMenuItem>\n                        {user.status === 'INVITED' && (\n                          <DropdownMenuItem \n                            onClick={() => handleResendInvite(user)}\n                            disabled={loading === user.id}\n                          >\n                            <Send className=\"h-4 w-4 mr-2\" />\n                            {loading === user.id ? 'Enviando...' : 'Reenviar Convite'}\n                          </DropdownMenuItem>\n                        )}\n                        <DropdownMenuItem \n                          onClick={() => setRemovingUser(user)}\n                          className=\"text-destructive focus:text-destructive\"\n                        >\n                          <Trash2 className=\"h-4 w-4 mr-2\" />\n                          Remover\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {error && (\n        <div className=\"bg-destructive/10 text-destructive p-3 rounded-lg text-sm mt-4\">\n          {error}\n        </div>\n      )}\n\n      {editingUser && (\n        <EditUserRoleDialog\n          open={!!editingUser}\n          onOpenChange={(open: boolean) => {\n            if (!open) setEditingUser(null)\n            else router.refresh()\n          }}\n          user={editingUser}\n        />\n      )}\n\n      <AlertDialog open={!!removingUser} onOpenChange={(open) => !open && setRemovingUser(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Remover Usuário</AlertDialogTitle>\n            <AlertDialogDescription>\n              Tem certeza que deseja remover <strong>{removingUser?.name || removingUser?.email}</strong> da empresa <strong>{removingUser?.company.name}</strong>?\n              <br /><br />\n              Esta ação não pode ser desfeita.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel disabled={loading === removingUser?.id}>\n              Cancelar\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleRemoveUser}\n              disabled={loading === removingUser?.id}\n              className=\"bg-destructive hover:bg-destructive/90\"\n            >\n              {loading === removingUser?.id ? 'Removendo...' : 'Remover'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}