// Script para testar logs detalhados do sistema de prompt
console.log('üß™ TESTE DOS LOGS DETALHADOS DO PROMPT')
console.log('======================================')

const testPromptLogs = async () => {
  try {
    console.log('\nüöÄ Fazendo pergunta para a IA para ver os logs...')
    
    const response = await fetch('https://i9hubsst.vercel.app/api/ai/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        messages: [
          {
            role: 'user',
            content: 'Qual √© o seu nome e qual sua especialidade?'
          }
        ]
      })
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    console.log('‚úÖ RESPOSTA RECEBIDA!')
    console.log('üìÑ Status:', response.status)
    
    // Ler stream da resposta
    const reader = response.body?.getReader()
    const decoder = new TextDecoder()
    let result = ''
    
    if (reader) {
      console.log('\nü§ñ RESPOSTA DA IA:')
      console.log('-'.repeat(50))
      
      while (true) {
        const { done, value } = await reader.read()
        if (done) break
        
        const chunk = decoder.decode(value, { stream: true })
        result += chunk
        process.stdout.write(chunk) // Mostrar em tempo real
      }
      
      console.log('\n' + '-'.repeat(50))
    }
    
    console.log('\n\nüìã AN√ÅLISE DA RESPOSTA:')
    console.log('======================')
    
    // Verificar se menciona MA.IA
    if (result.toLowerCase().includes('ma.ia') || result.toLowerCase().includes('m√°quina de an√°lise')) {
      console.log('üéØ ‚úÖ NOME MA.IA DETECTADO!')
    } else {
      console.log('‚ùå Nome MA.IA N√ÉO encontrado')
    }
    
    // Verificar se menciona SST
    if (result.toLowerCase().includes('seguran√ßa') && result.toLowerCase().includes('trabalho')) {
      console.log('üéØ ‚úÖ ESPECIALIDADE SST DETECTADA!')
    } else {
      console.log('‚ùå Especialidade SST N√ÉO detectada claramente')
    }
    
    console.log('\nüîç PR√ìXIMOS PASSOS:')
    console.log('1. Verifique os logs do servidor (terminal do npm run dev)')
    console.log('2. Procure por linhas come√ßando com [PROMPT DEBUG] e [CONFIG DEBUG]')
    console.log('3. Verifique se est√° carregando do banco ou usando fallback')
    
  } catch (error) {
    console.error('‚ùå ERRO NO TESTE:', error.message)
    console.log('\nüîç VERIFICA√á√ïES:')
    console.log('- O servidor est√° rodando? (npm run dev)')
    console.log('- O banco est√° conectado?')
    console.log('- H√° configura√ß√µes salvas na Gest√£o de IA?')
  }
}

// Executar teste
testPromptLogs()