{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // Server Component context\n          }\n        },\n      },\n    }\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,4IAAO;IAEjC,OAAO,IAAA,iMAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,2BAA2B;gBAC7B;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient({\n  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],\n})\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY,CAAC;IAC/D,KAAK,uCAAyC;QAAC;QAAS;KAAO,GAAG;AACpE;AAEA,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/lib/auth.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase/server'\nimport { prisma } from '@/lib/prisma'\nimport { Role } from '@prisma/client'\n\nexport async function getCurrentUser() {\n  const supabase = await createClient()\n  const { data: { user }, error } = await supabase.auth.getUser()\n  \n  if (error || !user) {\n    return null\n  }\n  \n  return user\n}\n\nexport async function getUserMemberships(userId: string) {\n  return await prisma.membership.findMany({\n    where: {\n      userId,\n      status: 'ACTIVE'\n    },\n    include: {\n      company: true\n    },\n    orderBy: {\n      createdAt: 'desc'\n    }\n  })\n}\n\nexport async function isPlatformAdmin(userId: string): Promise<boolean> {\n  const admin = await prisma.platformAdmin.findUnique({\n    where: { userId }\n  })\n  return !!admin\n}\n\nexport async function getUserRole(userId: string, companyId: string): Promise<Role | null> {\n  const membership = await prisma.membership.findUnique({\n    where: {\n      userId_companyId: {\n        userId,\n        companyId\n      }\n    }\n  })\n  \n  return membership?.role ?? null\n}\n\nexport async function requireAuth() {\n  const user = await getCurrentUser()\n  if (!user) {\n    throw new Error('Unauthorized')\n  }\n  return user\n}\n\nexport async function requireRole(userId: string, companyId: string, allowedRoles: Role[]) {\n  const role = await getUserRole(userId, companyId)\n  const isAdmin = await isPlatformAdmin(userId)\n  \n  if (isAdmin) return true\n  \n  if (!role || !allowedRoles.includes(role)) {\n    throw new Error('Insufficient permissions')\n  }\n  \n  return true\n}\n\nexport async function getUserDisplayRole(userId: string): Promise<{ role: Role | 'PLATFORM_ADMIN', label: string }> {\n  // Check if user is Platform Admin first\n  const isAdmin = await isPlatformAdmin(userId)\n  \n  if (isAdmin) {\n    return {\n      role: 'PLATFORM_ADMIN',\n      label: 'Admin da Plataforma'\n    }\n  }\n  \n  // Get the user's primary membership (most recent active one)\n  const memberships = await getUserMemberships(userId)\n  \n  if (memberships.length === 0) {\n    return {\n      role: 'VIEWER',\n      label: 'Sem Acesso'\n    }\n  }\n  \n  // Use the first membership's role\n  const primaryRole = memberships[0].role\n  \n  const roleLabels: Record<Role, string> = {\n    PLATFORM_ADMIN: 'Admin da Plataforma',\n    COMPANY_ADMIN: 'Admin da Empresa',\n    ENGINEER: 'Engenheiro SST',\n    EMPLOYER: 'Empregador',\n    VIEWER: 'Visualizador'\n  }\n  \n  return {\n    role: primaryRole,\n    label: roleLabels[primaryRole]\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;;;AAGO,eAAe;IACpB,MAAM,WAAW,MAAM,IAAA,2IAAY;IACnC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE7D,IAAI,SAAS,CAAC,MAAM;QAClB,OAAO;IACT;IAEA,OAAO;AACT;AAEO,eAAe,mBAAmB,MAAc;IACrD,OAAO,MAAM,yHAAM,CAAC,UAAU,CAAC,QAAQ,CAAC;QACtC,OAAO;YACL;YACA,QAAQ;QACV;QACA,SAAS;YACP,SAAS;QACX;QACA,SAAS;YACP,WAAW;QACb;IACF;AACF;AAEO,eAAe,gBAAgB,MAAc;IAClD,MAAM,QAAQ,MAAM,yHAAM,CAAC,aAAa,CAAC,UAAU,CAAC;QAClD,OAAO;YAAE;QAAO;IAClB;IACA,OAAO,CAAC,CAAC;AACX;AAEO,eAAe,YAAY,MAAc,EAAE,SAAiB;IACjE,MAAM,aAAa,MAAM,yHAAM,CAAC,UAAU,CAAC,UAAU,CAAC;QACpD,OAAO;YACL,kBAAkB;gBAChB;gBACA;YACF;QACF;IACF;IAEA,OAAO,YAAY,QAAQ;AAC7B;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM;IACnB,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAEO,eAAe,YAAY,MAAc,EAAE,SAAiB,EAAE,YAAoB;IACvF,MAAM,OAAO,MAAM,YAAY,QAAQ;IACvC,MAAM,UAAU,MAAM,gBAAgB;IAEtC,IAAI,SAAS,OAAO;IAEpB,IAAI,CAAC,QAAQ,CAAC,aAAa,QAAQ,CAAC,OAAO;QACzC,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;AACT;AAEO,eAAe,mBAAmB,MAAc;IACrD,wCAAwC;IACxC,MAAM,UAAU,MAAM,gBAAgB;IAEtC,IAAI,SAAS;QACX,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,6DAA6D;IAC7D,MAAM,cAAc,MAAM,mBAAmB;IAE7C,IAAI,YAAY,MAAM,KAAK,GAAG;QAC5B,OAAO;YACL,MAAM;YACN,OAAO;QACT;IACF;IAEA,kCAAkC;IAClC,MAAM,cAAc,WAAW,CAAC,EAAE,CAAC,IAAI;IAEvC,MAAM,aAAmC;QACvC,gBAAgB;QAChB,eAAe;QACf,UAAU;QACV,UAAU;QACV,QAAQ;IACV;IAEA,OAAO;QACL,MAAM;QACN,OAAO,UAAU,CAAC,YAAY;IAChC;AACF","debugId":null}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":["file:///home/runner/workspace/app/api/templates/save/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { getCurrentUser, isPlatformAdmin } from '@/lib/auth'\nimport { prisma } from '@/lib/prisma'\n\ninterface SaveTemplateRequest {\n  name: string\n  description: string\n  type: string\n  sections: Array<{\n    title: string\n    description: string | null\n    order: number\n    questions: Array<{\n      text: string\n      type: 'BOOLEAN' | 'SCORE'\n      weight: number\n      reference: string | null\n      requiresJustification: boolean\n    }>\n  }>\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const user = await getCurrentUser()\n    if (!user) {\n      return NextResponse.json({ error: 'Não autorizado' }, { status: 401 })\n    }\n\n    const isAdmin = await isPlatformAdmin(user.id)\n    if (!isAdmin) {\n      return NextResponse.json(\n        { error: 'Apenas administradores podem salvar templates' },\n        { status: 403 }\n      )\n    }\n\n    const body: SaveTemplateRequest = await request.json()\n    const { name, description, type, sections } = body\n\n    if (!name || !description || !sections || sections.length === 0) {\n      return NextResponse.json(\n        { error: 'Dados incompletos' },\n        { status: 400 }\n      )\n    }\n\n    // Criar template com seções e perguntas\n    const template = await prisma.diagnosticTemplate.create({\n      data: {\n        name,\n        description,\n        type: type as any,\n        source: 'AI',\n        approved: false,\n        status: 'DRAFT',\n        createdBy: user.id,\n        sections: {\n          create: sections.map((section, idx) => ({\n            title: section.title,\n            description: section.description,\n            order: section.order || idx + 1,\n            questions: {\n              create: section.questions.map((question) => ({\n                text: question.text,\n                type: question.type,\n                weight: question.weight,\n                reference: question.reference,\n                requiresJustification: question.requiresJustification,\n                source: 'AI',\n                approved: false,\n                active: true\n              }))\n            }\n          }))\n        }\n      },\n      include: {\n        sections: {\n          include: {\n            questions: true\n          }\n        }\n      }\n    })\n\n    return NextResponse.json({\n      success: true,\n      templateId: template.id,\n      template\n    })\n\n  } catch (error) {\n    console.error('Erro ao salvar template:', error)\n    return NextResponse.json(\n      { error: 'Erro ao salvar template' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAoBO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,IAAA,+HAAc;QACjC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,UAAU,MAAM,IAAA,gIAAe,EAAC,KAAK,EAAE;QAC7C,IAAI,CAAC,SAAS;YACZ,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgD,GACzD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAA4B,MAAM,QAAQ,IAAI;QACpD,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG;QAE9C,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,SAAS,MAAM,KAAK,GAAG;YAC/D,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,WAAW,MAAM,yHAAM,CAAC,kBAAkB,CAAC,MAAM,CAAC;YACtD,MAAM;gBACJ;gBACA;gBACA,MAAM;gBACN,QAAQ;gBACR,UAAU;gBACV,QAAQ;gBACR,WAAW,KAAK,EAAE;gBAClB,UAAU;oBACR,QAAQ,SAAS,GAAG,CAAC,CAAC,SAAS,MAAQ,CAAC;4BACtC,OAAO,QAAQ,KAAK;4BACpB,aAAa,QAAQ,WAAW;4BAChC,OAAO,QAAQ,KAAK,IAAI,MAAM;4BAC9B,WAAW;gCACT,QAAQ,QAAQ,SAAS,CAAC,GAAG,CAAC,CAAC,WAAa,CAAC;wCAC3C,MAAM,SAAS,IAAI;wCACnB,MAAM,SAAS,IAAI;wCACnB,QAAQ,SAAS,MAAM;wCACvB,WAAW,SAAS,SAAS;wCAC7B,uBAAuB,SAAS,qBAAqB;wCACrD,QAAQ;wCACR,UAAU;wCACV,QAAQ;oCACV,CAAC;4BACH;wBACF,CAAC;gBACH;YACF;YACA,SAAS;gBACP,UAAU;oBACR,SAAS;wBACP,WAAW;oBACb;gBACF;YACF;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,YAAY,SAAS,EAAE;YACvB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}